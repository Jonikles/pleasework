======================================================================
// FILE: src\main\resources\static\index.html
======================================================================

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tutoring Platform</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="css/styles.css">
</head>

<body>
    <div id="app">
        <!-- Navigation -->
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark" id="mainNav" style="display: none;">
            <div class="container">
                <a class="navbar-brand" href="#">Tutoring Platform</a>
                <div class="navbar-nav ms-auto">
                    <span class="navbar-text me-3" id="userNameDisplay"></span>
                    <span class="navbar-text me-3" id="balanceDisplay"></span>
                    <!-- Notification bell -->
                    <div class="dropdown me-3">
                        <button class="btn btn-outline-light position-relative" id="notificationBell"
                            data-bs-toggle="dropdown">
                            <i class="bi bi-bell"></i>
                            <span
                                class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                                id="notificationCount" style="display: none;">
                                0
                            </span>
                        </button>
                        <div class="dropdown-menu dropdown-menu-end" id="notificationDropdown" style="width: 350px;">
                            <h6 class="dropdown-header">Notifications</h6>
                            <div id="notificationList" style="max-height: 400px; overflow-y: auto;">
                                <!-- Notifications will be populated here -->
                            </div>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item text-center" href="#" id="markAllReadBtn">Mark all as read</a>
                        </div>
                    </div>
                    <button class="btn btn-outline-light" id="logoutBtn">Logout</button>
                </div>
            </div>
        </nav>

        <!-- Login/Signup View -->
        <div id="authView" class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <ul class="nav nav-tabs mb-3">
                                <li class="nav-item">
                                    <a class="nav-link active" id="loginTab" href="#">Login</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="signupTab" href="#">Sign Up</a>
                                </li>
                            </ul>

                            <!-- Login Form -->
                            <form id="loginForm">
                                <div class="mb-3">
                                    <label for="loginEmail" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="loginEmail" required>
                                </div>
                                <div class="mb-3">
                                    <label for="loginPassword" class="form-label">Password</label>
                                    <input type="password" class="form-control" id="loginPassword" required>
                                </div>
                                <button type="submit" class="btn btn-primary">Login</button>
                                <div class="alert alert-danger mt-3" id="loginError" style="display: none;"></div>
                            </form>

                            <!-- Signup Form -->
                            <form id="signupForm" style="display: none;">
                                <div class="mb-3">
                                    <label for="signupUserType" class="form-label">I am a</label>
                                    <select class="form-control" id="signupUserType" required>
                                        <option value="">Select...</option>
                                        <option value="STUDENT">Student</option>
                                        <option value="TUTOR">Tutor</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="signupName" class="form-label">Name</label>
                                    <input type="text" class="form-control" id="signupName" required>
                                </div>
                                <div class="mb-3">
                                    <label for="signupEmail" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="signupEmail" required>
                                    <div class="invalid-feedback">Please enter a valid email address</div>
                                </div>
                                <div class="mb-3">
                                    <label for="signupPassword" class="form-label">Password</label>
                                    <input type="password" class="form-control" id="signupPassword" required>
                                    <div class="invalid-feedback">Password must be at least 8 characters</div>
                                    <small id="passwordStrength" class="form-text"></small>
                                </div>
                                <div class="mb-3">
                                    <label for="signupTimeZone" class="form-label">Time Zone</label>
                                    <select class="form-control" id="signupTimeZone" required>
                                        <option value="">Select timezone...</option>
                                        <option value="America/New_York">Eastern Time</option>
                                        <option value="America/Chicago">Central Time</option>
                                        <option value="America/Denver">Mountain Time</option>
                                        <option value="America/Los_Angeles">Pacific Time</option>
                                        <option value="Europe/London">London</option>
                                        <option value="Europe/Paris">Paris</option>
                                        <option value="Asia/Tokyo">Tokyo</option>
                                    </select>
                                </div>
                                <div id="tutorFields" style="display: none;">
                                    <div class="mb-3">
                                        <label for="signupHourlyRate" class="form-label">Hourly Rate ($)</label>
                                        <input type="number" class="form-control" id="signupHourlyRate" min="1"
                                            step="0.01">
                                    </div>
                                    <div class="mb-3">
                                        <label for="signupDescription" class="form-label">Description</label>
                                        <textarea class="form-control" id="signupDescription" rows="3"></textarea>
                                    </div>
                                </div>
                                <button type="submit" class="btn btn-primary">Sign Up</button>
                                <div class="alert alert-danger mt-3" id="signupError" style="display: none;"></div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Student Dashboard View -->
        <div id="studentDashboard" class="container mt-5" style="display: none;">
            <h2>Your Dashboard</h2>
            <div class="row mt-4">
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Profile</h5>
                            <div class="text-center mb-3">
                                <img id="studentProfilePic" src="/api/files/default-avatar" alt="Profile"
                                    class="profile-picture-preview">
                            </div>
                            <p>Name: <span id="studentName"></span></p>
                            <p>Balance: $<span id="studentBalance"></span></p>
                            <button class="btn btn-sm btn-primary" id="addFundsBtn">Add Funds</button>
                            <button class="btn btn-sm btn-secondary" id="editStudentProfileBtn">Edit Profile</button>
                        </div>
                    </div>
                    <div class="card mt-3">
                        <div class="card-body">
                            <h5 class="card-title">Statistics</h5>
                            <p>Total Sessions: <span id="totalSessions"></span></p>
                            <p>Completed: <span id="completedSessions"></span></p>
                            <p>Upcoming: <span id="upcomingSessions"></span></p>
                        </div>
                    </div>
                </div>
                <div class="col-md-9">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Actions</h5>
                            <button class="btn btn-primary" id="findTutorBtn">Find a Tutor</button>
                            <button class="btn btn-secondary" id="viewStudentBookingsBtn">My Bookings</button>
                        </div>
                    </div>
                    <div class="card mt-3">
                        <div class="card-body">
                            <h5 class="card-title">Upcoming Sessions</h5>
                            <div id="upcomingBookingsList"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tutor Dashboard View -->
        <div id="tutorDashboard" class="container mt-5" style="display: none;">
            <h2>Your Dashboard</h2>
            <div class="row mt-4">
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Profile</h5>
                            <div class="text-center mb-3">
                                <img id="tutorProfilePic" src="/api/files/default-avatar" alt="Profile"
                                    class="profile-picture-preview">
                            </div>
                            <p>Name: <span id="tutorName"></span></p>
                            <p>Rate: $<span id="tutorRate"></span>/hr</p>
                            <p>Rating: <span id="tutorRating"></span></p>
                            <p>Earnings: $<span id="tutorEarnings"></span></p>
                            <button class="btn btn-sm btn-secondary" id="editTutorProfileBtn">Edit Profile</button>
                        </div>
                    </div>
                    <div class="card mt-3">
                        <div class="card-body">
                            <h5 class="card-title">Statistics</h5>
                            <p>Total Sessions: <span id="tutorTotalSessions"></span></p>
                            <p>Completed: <span id="tutorCompletedSessions"></span></p>
                            <p>This Month: $<span id="thisMonthEarnings"></span></p>
                            <p>Reviews: <span id="totalReviews"></span></p>
                        </div>
                    </div>
                </div>
                <div class="col-md-9">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Actions</h5>
                            <button class="btn btn-primary" id="manageSubjectsBtn">Manage Subjects</button>
                            <button class="btn btn-secondary" id="manageAvailabilityBtn">Manage Availability</button>
                            <button class="btn btn-info" id="viewTutorBookingsBtn">My Sessions</button>
                        </div>
                    </div>
                    <div class="card mt-3">
                        <div class="card-body">
                            <h5 class="card-title">Today's Schedule</h5>
                            <div id="todaysScheduleList"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search Tutors View -->
        <div id="searchTutorsView" class="container mt-5" style="display: none;">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Find a Tutor</h2>
                <button class="btn btn-secondary" id="backFromSearchBtn">Back to Dashboard</button>
            </div>
            <div class="card mb-4">
                <div class="card-body">
                    <form id="searchForm">
                        <div class="row">
                            <div class="col-md-4">
                                <label for="searchSubject" class="form-label">Subject</label>
                                <select class="form-control" id="searchSubject">
                                    <option value="">All Subjects</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label for="minPrice" class="form-label">Min Price</label>
                                <input type="number" class="form-control" id="minPrice" min="0">
                            </div>
                            <div class="col-md-2">
                                <label for="maxPrice" class="form-label">Max Price</label>
                                <input type="number" class="form-control" id="maxPrice" min="0">
                            </div>
                            <div class="col-md-2">
                                <label for="minRating" class="form-label">Min Rating</label>
                                <input type="number" class="form-control" id="minRating" min="0" max="5" step="0.1">
                            </div>
                            <div class="col-md-2">
                                <label for="sortBy" class="form-label">Sort By</label>
                                <select class="form-control" id="sortBy">
                                    <option value="RATING">Rating</option>
                                    <option value="PRICE_LOW">Price: Low to High</option>
                                    <option value="PRICE_HIGH">Price: High to Low</option>
                                    <option value="REVIEWS">Most Reviews</option>
                                </select>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary mt-3">Search</button>
                    </form>
                </div>
            </div>
            <div id="searchResults"></div>
        </div>

        <!-- Booking Management View -->
        <div id="bookingManagementView" class="container mt-5" style="display: none;">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 id="bookingViewTitle">My Bookings</h2>
                <button class="btn btn-secondary" id="backFromBookingsBtn">Back to Dashboard</button>
            </div>
            <ul class="nav nav-tabs mb-3">
                <li class="nav-item">
                    <a class="nav-link active" id="upcomingTab" href="#">Upcoming</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="pastTab" href="#">Past</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="cancelledTab" href="#">Cancelled</a>
                </li>
            </ul>
            <div id="bookingsList"></div>
        </div>

        <!-- Subject Management View (Tutors) -->
        <div id="subjectManagementView" class="container mt-5" style="display: none;">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Manage Subjects</h2>
                <button class="btn btn-secondary" id="backFromSubjectsBtn">Back to Dashboard</button>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">My Subjects</h5>
                            <div id="mySubjectsList"></div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Available Subjects</h5>
                            <div id="availableSubjectsList"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Availability Management View (Tutors) -->
        <div id="availabilityManagementView" class="container mt-5" style="display: none;">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Manage Availability</h2>
                <button class="btn btn-secondary" id="backFromAvailabilityBtn">Back to Dashboard</button>
            </div>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Add Availability Slot</h5>
                    <form id="availabilityForm">
                        <div class="row">
                            <div class="col-md-3">
                                <label for="dayOfWeek" class="form-label">Day of Week</label>
                                <select class="form-control" id="dayOfWeek" required>
                                    <option value="MONDAY">Monday</option>
                                    <option value="TUESDAY">Tuesday</option>
                                    <option value="WEDNESDAY">Wednesday</option>
                                    <option value="THURSDAY">Thursday</option>
                                    <option value="FRIDAY">Friday</option>
                                    <option value="SATURDAY">Saturday</option>
                                    <option value="SUNDAY">Sunday</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="startTime" class="form-label">Start Time</label>
                                <input type="time" class="form-control" id="startTime" required>
                            </div>
                            <div class="col-md-3">
                                <label for="endTime" class="form-label">End Time</label>
                                <input type="time" class="form-control" id="endTime" required>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">&nbsp;</label>
                                <button type="submit" class="btn btn-primary d-block">Add Slot</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="card mt-3">
                <div class="card-body">
                    <h5 class="card-title">Current Availability</h5>
                    <div id="availabilityList"></div>
                </div>
            </div>
        </div>

        <!-- Profile Edit Modal -->
        <div class="modal fade" id="profileEditModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Profile</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger modal-error" style="display: none;"></div>
                        <form id="profileEditForm">
                            <div class="mb-3">
                                <label for="editName" class="form-label">Name</label>
                                <input type="text" class="form-control" id="editName">
                            </div>
                            <div class="mb-3">
                                <label for="editEmail" class="form-label">Email</label>
                                <input type="email" class="form-control" id="editEmail">
                            </div>
                            <div class="mb-3">
                                <label for="editCurrentPassword" class="form-label">Current Password (required for
                                    password change)</label>
                                <input type="password" class="form-control" id="editCurrentPassword">
                            </div>
                            <div class="mb-3">
                                <label for="editNewPassword" class="form-label">New Password</label>
                                <input type="password" class="form-control" id="editNewPassword">
                            </div>
                            <div class="mb-3">
                                <label for="editTimeZone" class="form-label">Time Zone</label>
                                <select class="form-control" id="editTimeZone">
                                    <option value="America/New_York">Eastern Time (UTC-5)</option>
                                    <option value="America/Chicago">Central Time (UTC-6)</option>
                                    <option value="America/Denver">Mountain Time (UTC-7)</option>
                                    <option value="America/Los_Angeles">Pacific Time (UTC-8)</option>
                                    <option value="Europe/London">London (UTC+0)</option>
                                    <option value="Europe/Paris">Paris (UTC+1)</option>
                                    <option value="Asia/Tokyo">Tokyo (UTC+9)</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="profilePictureUpload" class="form-label">Profile Picture</label>
                                <input type="file" class="form-control" id="profilePictureUpload" accept="image/*">
                                <small class="text-muted">Accepted formats: JPG, PNG (Max 5MB)</small>
                            </div>
                            <div id="tutorEditFields" style="display: none;">
                                <div class="mb-3">
                                    <label for="editHourlyRate" class="form-label">Hourly Rate ($)</label>
                                    <input type="number" class="form-control" id="editHourlyRate" min="1" step="0.01">
                                </div>
                                <div class="mb-3">
                                    <label for="editDescription" class="form-label">Description</label>
                                    <textarea class="form-control" id="editDescription" rows="3"></textarea>
                                    <small id="autoSaveIndicator" class="text-muted"></small>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="saveProfileBtn">Save Changes</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Add Funds Modal -->
        <div class="modal fade" id="addFundsModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add Funds</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger modal-error" style="display: none;"></div>
                        <form id="addFundsForm">
                            <div class="mb-3">
                                <label for="fundAmount" class="form-label">Amount ($)</label>
                                <input type="number" class="form-control" id="fundAmount" min="1" step="0.01" required>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="confirmAddFundsBtn">Add Funds</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Create Booking Modal -->
        <div class="modal fade" id="createBookingModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Book Session with <span id="bookingTutorName"></span></h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger modal-error" style="display: none;"></div>
                        <form id="createBookingForm">
                            <input type="hidden" id="bookingTutorId">
                            <div class="mb-3">
                                <label for="bookingSubject" class="form-label">Subject</label>
                                <select class="form-control" id="bookingSubject" required>
                                    <option value="">Select subject...</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="bookingDate" class="form-label">Date</label>
                                <input type="date" class="form-control" id="bookingDate" required min="">
                            </div>
                            <div class="mb-3">
                                <label for="bookingTime" class="form-label">Time</label>
                                <input type="time" class="form-control" id="bookingTime" required>
                            </div>
                            <div class="mb-3">
                                <label for="bookingDuration" class="form-label">Duration (hours)</label>
                                <input type="number" class="form-control" id="bookingDuration" min="1" max="4" value="1"
                                    required>
                            </div>
                            <p>Total Cost: $<span id="bookingTotalCost">0</span></p>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="confirmBookingBtn">Create Booking</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Review Modal -->
        <div class="modal fade" id="reviewModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Leave a Review</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger modal-error" style="display: none;"></div>
                        <form id="reviewForm">
                            <input type="hidden" id="reviewTutorId">
                            <div class="mb-3">
                                <label for="reviewRating" class="form-label">Rating</label>
                                <select class="form-control" id="reviewRating" required>
                                    <option value="">Select rating...</option>
                                    <option value="5">5 - Excellent</option>
                                    <option value="4">4 - Very Good</option>
                                    <option value="3">3 - Good</option>
                                    <option value="2">2 - Fair</option>
                                    <option value="1">1 - Poor</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="reviewComment" class="form-label">Comment</label>
                                <textarea class="form-control" id="reviewComment" rows="3" required></textarea>
                                <small class="text-muted">Minimum 50 characters required</small>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="submitReviewBtn">Submit Review</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tutor Details Modal -->
        <div class="modal fade" id="tutorDetailsModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Tutor Details</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div id="tutorDetailsContent"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Generic Confirmation Modal -->
        <div class="modal fade" id="confirmModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="confirmTitle">Confirm Action</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <p id="confirmMessage"></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" id="confirmCancelBtn">Cancel</button>
                        <button type="button" class="btn btn-warning" id="confirmActionBtn">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="loading-message mt-3">Loading...</p>
    </div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="toast" class="toast" role="alert">
            <div class="toast-header">
                <strong class="me-auto" id="toastTitle">Notification</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body" id="toastMessage"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="js/app.js"></script>
</body>

</html>



======================================================================
// FILE: src\main\resources\static\css\styles.css
======================================================================

/* CSS Variables for theming */
:root {
    --primary: #4f46e5;
    --primary-dark: #4338ca;
    --primary-light: #6366f1;
    --secondary: #10b981;
    --danger: #ef4444;
    --warning: #f59e0b;
    --gray-50: #f9fafb;
    --gray-100: #f3f4f6;
    --gray-200: #e5e7eb;
    --gray-300: #d1d5db;
    --gray-400: #9ca3af;
    --gray-500: #6b7280;
    --gray-600: #4b5563;
    --gray-700: #374151;
    --gray-800: #1f2937;
    --gray-900: #111827;
    --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    line-height: 1.6;
    color: var(--gray-900);
    background: var(--gray-50);
}

/* Override Bootstrap Navbar */
.navbar {
    background: white !important;
    box-shadow: var(--shadow);
    padding: 1rem 0;
}

.navbar-brand {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primary) !important;
    cursor: pointer;
    text-decoration: none;
}

.navbar-brand:hover {
    color: var(--primary-dark) !important;
}

.navbar-text,
#userNameDisplay {
    color: var(--gray-700) !important;
    font-weight: 500;
}

/* Remove balance/rate display */
#balanceDisplay {
    display: none;
}

/* Fix logout button visibility */
#logoutBtn {
    background: var(--primary);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
}

#logoutBtn:hover {
    background: var(--primary-dark);
    color: white;
}

/* Override Bootstrap Cards */
.card {
    background: white;
    border: none;
    border-radius: 8px;
    box-shadow: var(--shadow);
    margin-bottom: 1rem;
    transition: box-shadow 0.2s;
}

.card:hover {
    box-shadow: var(--shadow-lg);
}

.card-body {
    padding: 1.5rem;
}

.card-title {
    color: var(--gray-900);
    margin-bottom: 0.5rem;
}

/* Override Bootstrap Forms */
.form-label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--gray-700);
}

.form-control,
.form-select {
    width: 100%;
    padding: 0.5rem 0.75rem;
    border: 1px solid var(--gray-300);
    border-radius: 4px;
    font-size: 1rem;
    transition: border-color 0.2s, box-shadow 0.2s;
    background: white;
}

.form-control:focus,
.form-select:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
}

.form-control[type="date"],
.form-control[type="time"] {
    padding: 0.5rem 0.75rem;
}

textarea.form-control {
    resize: vertical;
    min-height: 100px;
}

/* Override Bootstrap Buttons */
.btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
    text-decoration: none;
    display: inline-block;
    text-align: center;
}

.btn:hover {
    transform: translateY(-1px);
    box-shadow: var(--shadow);
}

.btn:active {
    transform: translateY(0);
}

/* Unified button styling - primary for main actions */
.btn-primary,
.btn-success,
.btn-info {
    background: var(--primary);
    color: white;
}

.btn-primary:hover,
.btn-success:hover,
.btn-info:hover {
    background: var(--primary-dark);
    color: white;
}

.btn-secondary {
    background: var(--gray-200);
    color: var(--gray-700);
}

.btn-secondary:hover {
    background: var(--gray-300);
    color: var(--gray-700);
}

.btn-danger {
    background: var(--danger);
    color: white;
}

.btn-danger:hover {
    background: #dc2626;
    color: white;
}

.btn-outline-light {
    background: transparent;
    color: white;
    border: 1px solid white;
}

.btn-outline-light:hover {
    background: white;
    color: var(--primary);
}

.btn-sm {
    padding: 0.25rem 0.75rem;
    font-size: 0.875rem;
}

/* Override Bootstrap Nav Tabs */
.nav-tabs {
    border-bottom: 1px solid var(--gray-200);
}

.nav-tabs .nav-link {
    color: var(--gray-600);
    border: none;
    border-bottom: 2px solid transparent;
    padding: 0.5rem 1rem;
    font-weight: 500;
}

.nav-tabs .nav-link:hover {
    color: var(--primary);
    border-color: transparent;
}

.nav-tabs .nav-link.active {
    color: var(--primary);
    background: none;
    border-color: transparent;
    border-bottom-color: var(--primary);
}

/* Override Bootstrap Alerts */
.alert {
    border: none;
    border-radius: 4px;
    padding: 1rem;
}

.alert-danger {
    background: #fee2e2;
    color: var(--danger);
}

/* Override Bootstrap Modals */
.modal-content {
    border: none;
    border-radius: 8px;
}

.modal-header {
    border-bottom: 1px solid var(--gray-200);
    padding: 1.5rem;
}

.modal-body {
    padding: 1.5rem;
}

.modal-footer {
    border-top: 1px solid var(--gray-200);
    padding: 1rem 1.5rem;
}

/* Auth View Specific */
#authView .card {
    max-width: 450px;
    margin: 0 auto;
}

/* Dashboard Components */
h2 {
    color: var(--gray-900);
    font-size: 1.875rem;
    margin-bottom: 1.5rem;
}

/* Tutor Search Results */
.tutor-card {
    display: flex;
    gap: 1rem;
    align-items: start;
}

.tutor-info h5 {
    color: var(--gray-900);
    margin-bottom: 0.25rem;
}

.tutor-meta {
    display: flex;
    gap: 1rem;
    margin: 0.5rem 0;
    font-size: 0.875rem;
    color: var(--gray-600);
}

/* Booking Cards */
.booking-status {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 500;
}

.booking-status.PENDING {
    background: #fef3c7;
    color: #d97706;
}

.booking-status.CONFIRMED {
    background: #d1fae5;
    color: #065f46;
}

.booking-status.COMPLETED {
    background: #ddd6fe;
    color: #5b21b6;
}

.booking-status.CANCELLED {
    background: #fee2e2;
    color: var(--danger);
}

/* Subject Tags */
.subject-tag {
    background: var(--gray-100);
    color: var(--gray-700);
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    display: inline-block;
    margin-right: 0.5rem;
    margin-bottom: 0.5rem;
}

/* Availability Management */
.availability-slot {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: var(--gray-100);
    border-radius: 4px;
    margin-bottom: 0.5rem;
}

/* Stats Display */
.stat-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--primary);
}

/* Review Display */
.review-card {
    border-left: 4px solid var(--primary);
    padding-left: 1rem;
    margin-bottom: 1rem;
}

.review-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
}

.review-date {
    color: var(--gray-500);
    font-size: 0.875rem;
}

/* Empty States */
.empty-state {
    text-align: center;
    padding: 3rem;
    color: var(--gray-500);
}

/* Rating Stars */
.rating {
    color: var(--warning);
    font-size: 1.2rem;
}

.star {
    color: var(--warning);
    font-size: 1.2rem;
}

.star.empty {
    color: var(--gray-300);
}

.star.half::after {
    content: '★';
    color: var(--warning);
    position: absolute;
    overflow: hidden;
    width: 50%;
}

.not-rated {
    color: var(--gray-500);
    font-style: italic;
}

/* Cost Display */
#bookingTotalCost {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--primary);
}

/* Loading States */
.spinner {
    border: 3px solid var(--gray-200);
    border-top: 3px solid var(--primary);
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 2rem auto;
}

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .container {
        padding: 0 1rem;
    }

    .card-body {
        padding: 1rem;
    }

    .btn {
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
    }

    h2 {
        font-size: 1.5rem;
    }

    .modal-content {
        margin: 1rem;
    }
}

/* Utility Classes to Override Bootstrap */
.text-muted {
    color: var(--gray-500) !important;
}

.text-center {
    text-align: center;
}

.text-end {
    text-align: right;
}

.d-flex {
    display: flex;
}

.justify-content-between {
    justify-content: space-between;
}

.align-items-center {
    align-items: center;
}

.mb-0 {
    margin-bottom: 0;
}

.mb-1 {
    margin-bottom: 0.25rem;
}

.mb-2 {
    margin-bottom: 0.5rem;
}

.mb-3 {
    margin-bottom: 1rem;
}

.mb-4 {
    margin-bottom: 1.5rem;
}

.mt-2 {
    margin-top: 0.5rem;
}

.mt-3 {
    margin-top: 1rem;
}

.mt-4 {
    margin-top: 1.5rem;
}

.mt-5 {
    margin-top: 3rem;
}

/* Fix Bootstrap's default link colors */
a {
    color: var(--primary);
    text-decoration: none;
}

a:hover {
    color: var(--primary-dark);
}

/* Profile Picture Placeholder */
.profile-picture {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background: var(--gray-200);
    object-fit: cover;
}

/* Session Time Display */
.session-time {
    font-size: 0.875rem;
    color: var(--gray-600);
}

/* Price Display */
.price-display {
    color: var(--secondary);
    font-weight: 600;
}

/* Search Form Specific */
#searchForm .row {
    align-items: end;
}

#searchForm .btn {
    margin-top: 0.5rem;
}

/* Subject List Items */
.subject-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    border-bottom: 1px solid var(--gray-100);
}

.subject-item:last-child {
    border-bottom: none;
}

/* Upcoming Sessions List */
.session-item {
    padding: 0.75rem;
    border-left: 3px solid var(--primary);
    background: var(--gray-50);
    margin-bottom: 0.5rem;
    border-radius: 0 4px 4px 0;
}

/* Fix spacing in booking details */
.booking-details p {
    margin-bottom: 0.5rem;
}

.booking-details p:last-child {
    margin-bottom: 0;
}

.toast-success {
    border-left: 4px solid var(--secondary);
}

.toast-danger {
    border-left: 4px solid var(--danger);
}

.toast-info {
    border-left: 4px solid var(--primary);
}

.empty-state {
    text-align: center;
    padding: 4rem 2rem;
    color: var(--gray-500);
}

.empty-state i {
    font-size: 4rem;
    color: var(--gray-300);
    display: block;
    margin-bottom: 1rem;
}

.empty-state h5 {
    color: var(--gray-700);
    margin-bottom: 0.5rem;
}

.empty-state p {
    margin-bottom: 1.5rem;
}

#loadingOverlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.9);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

.loading-message {
    color: var(--gray-700);
    font-weight: 500;
}

/* Notification Dropdown Styles */
.notification-item {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid var(--gray-100);
    cursor: pointer;
    transition: background-color 0.2s;
}

.notification-item:hover {
    background-color: var(--gray-50);
}

.notification-item.unread {
    background-color: var(--primary-light);
    background-color: rgba(99, 102, 241, 0.05);
}

.notification-item:last-child {
    border-bottom: none;
}

#notificationBell {
    position: relative;
    background: transparent;
    border: 1px solid rgba(255, 255, 255, 0.5);
    color: var(--gray-700);
    padding: 0.5rem 0.75rem;
}

#notificationBell:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.8);
}

.badge {
    font-size: 0.7rem;
    padding: 0.2rem 0.4rem;
}

#notificationDropdown {
    box-shadow: var(--shadow-lg);
    border: none;
    border-radius: 8px;
    margin-top: 0.5rem;
}

.dropdown-header {
    background: var(--gray-50);
    padding: 0.75rem 1rem;
    font-weight: 600;
    color: var(--gray-900);
}

/* File Upload Styles */
input[type="file"] {
    font-size: 0.9rem;
}

input[type="file"]::-webkit-file-upload-button {
    background: var(--primary);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.875rem;
    margin-right: 1rem;
}

input[type="file"]::-webkit-file-upload-button:hover {
    background: var(--primary-dark);
}

/* Profile Picture Preview */
.profile-picture-preview {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    object-fit: cover;
    border: 3px solid var(--gray-200);
    margin-bottom: 1rem;
}



======================================================================
// FILE: src\main\resources\static\js\app.js
======================================================================

// Global state management
const state = {
  currentUser: null,
  currentView: "auth",
};

// API Base URL
const API_BASE_URL = "/api";

// Bootstrap modal instances
let profileEditModal;
let addFundsModal;
let createBookingModal;
let reviewModal;
let tutorDetailsModal;

// Loading state management
const loadingState = {
  isLoading: false,
  loadingMessage: ''
};

// Notification polling interval
let notificationInterval;

// Initialize the application
document.addEventListener("DOMContentLoaded", () => {
  initializeModals();
  initializeEventListeners();
  initializeTimezoneSelects();
  checkAuthState();
});

// Initialize Bootstrap modals
function initializeModals() {
  profileEditModal = new bootstrap.Modal(
    document.getElementById("profileEditModal")
  );
  addFundsModal = new bootstrap.Modal(document.getElementById("addFundsModal"));
  createBookingModal = new bootstrap.Modal(
    document.getElementById("createBookingModal")
  );
  reviewModal = new bootstrap.Modal(document.getElementById("reviewModal"));
  tutorDetailsModal = new bootstrap.Modal(
    document.getElementById("tutorDetailsModal")
  );
}

// Initialize all event listeners
function initializeEventListeners() {
  // Auth listeners
  document.getElementById("loginTab").addEventListener("click", showLoginForm);
  document
    .getElementById("signupTab")
    .addEventListener("click", showSignupForm);
  document.getElementById("loginForm").addEventListener("submit", handleLogin);
  document
    .getElementById("signupForm")
    .addEventListener("submit", handleSignup);
  document
    .getElementById("signupUserType")
    .addEventListener("change", toggleTutorFields);
  document.getElementById("logoutBtn").addEventListener("click", handleLogout);

  // Logo click to go to dashboard
  document.querySelector(".navbar-brand").addEventListener("click", () => {
    if (state.currentUser) {
      showDashboard();
    }
  });

  // Student dashboard listeners
  document
    .getElementById("addFundsBtn")
    .addEventListener("click", showAddFundsModal);
  document
    .getElementById("editStudentProfileBtn")
    .addEventListener("click", showEditProfileModal);
  document
    .getElementById("findTutorBtn")
    .addEventListener("click", showSearchTutors);
  document
    .getElementById("viewStudentBookingsBtn")
    .addEventListener("click", showStudentBookings);
  document
    .getElementById("confirmAddFundsBtn")
    .addEventListener("click", handleAddFunds);

  // Tutor dashboard listeners
  document
    .getElementById("editTutorProfileBtn")
    .addEventListener("click", showEditProfileModal);
  document
    .getElementById("manageSubjectsBtn")
    .addEventListener("click", showSubjectManagement);
  document
    .getElementById("manageAvailabilityBtn")
    .addEventListener("click", showAvailabilityManagement);
  document
    .getElementById("viewTutorBookingsBtn")
    .addEventListener("click", showTutorBookings);

  // Search listeners
  document
    .getElementById("backFromSearchBtn")
    .addEventListener("click", backToDashboard);
  document
    .getElementById("searchForm")
    .addEventListener("submit", handleSearch);

  // Booking management listeners
  document
    .getElementById("backFromBookingsBtn")
    .addEventListener("click", backToDashboard);
  document
    .getElementById("upcomingTab")
    .addEventListener("click", () => showBookingTab("upcoming"));
  document
    .getElementById("pastTab")
    .addEventListener("click", () => showBookingTab("past"));
  document
    .getElementById("cancelledTab")
    .addEventListener("click", () => showBookingTab("cancelled"));

  // Subject management listeners
  document
    .getElementById("backFromSubjectsBtn")
    .addEventListener("click", backToDashboard);

  // Availability management listeners
  document
    .getElementById("backFromAvailabilityBtn")
    .addEventListener("click", backToDashboard);
  document
    .getElementById("availabilityForm")
    .addEventListener("submit", handleAddAvailability);

  // Modal listeners
  document
    .getElementById("saveProfileBtn")
    .addEventListener("click", handleUpdateProfile);
  document
    .getElementById("confirmBookingBtn")
    .addEventListener("click", handleCreateBooking);
  document
    .getElementById("submitReviewBtn")
    .addEventListener("click", handleSubmitReview);
  document
    .getElementById("bookingDuration")
    .addEventListener("input", updateBookingCost);

  // Notification listeners
  document.getElementById('markAllReadBtn').addEventListener('click', markAllNotificationsRead);

  // Event delegation for dynamically created content

  // Search results event delegation
  document.getElementById("searchResults").addEventListener("click", (e) => {
    if (e.target.classList.contains("book-tutor-btn")) {
      const tutorId = e.target.dataset.tutorId;
      const tutorName = e.target.dataset.tutorName;
      const hourlyRate = parseFloat(e.target.dataset.hourlyRate);
      bookTutor(tutorId, tutorName, hourlyRate);
    } else if (e.target.classList.contains("view-tutor-btn")) {
      const tutorId = e.target.dataset.tutorId;
      viewTutorDetails(tutorId);
    }
  });

  // Bookings list event delegation
  document.getElementById("bookingsList").addEventListener("click", (e) => {
    if (e.target.classList.contains("confirm-booking-btn")) {
      const bookingId = e.target.dataset.bookingId;
      confirmBooking(bookingId);
    } else if (e.target.classList.contains("cancel-booking-btn")) {
      const bookingId = e.target.dataset.bookingId;
      cancelBooking(bookingId);
    } else if (e.target.classList.contains("complete-booking-btn")) {
      const bookingId = e.target.dataset.bookingId;
      completeBooking(bookingId);
    } else if (e.target.classList.contains("review-tutor-btn")) {
      const tutorId = e.target.dataset.tutorId;
      showReviewModal(tutorId);
    }
  });

  // Subject management event delegation
  document.getElementById("mySubjectsList").addEventListener("click", (e) => {
    if (e.target.classList.contains("remove-subject-btn")) {
      const subjectId = e.target.dataset.subjectId;
      removeSubject(subjectId);
    }
  });

  document
    .getElementById("availableSubjectsList")
    .addEventListener("click", (e) => {
      if (e.target.classList.contains("add-subject-btn")) {
        const subjectId = e.target.dataset.subjectId;
        addSubject(subjectId);
      }
    });

  // Availability management event delegation
  document.getElementById("availabilityList").addEventListener("click", (e) => {
    if (e.target.classList.contains("remove-availability-btn")) {
      const dayOfWeek = e.target.dataset.dayOfWeek;
      const startTime = e.target.dataset.startTime;
      const endTime = e.target.dataset.endTime;
      removeAvailability(dayOfWeek, startTime, endTime);
    }
  });

  // Form validation listeners
  addFormValidationListeners();

  // Keyboard shortcuts
  addKeyboardShortcuts();

  // Auto-save listeners
  addAutoSaveListeners();
}

// Initialize timezone selects
function initializeTimezoneSelects() {
  // This function is called but not implemented in the original code
  // You can leave it empty if timezones are hardcoded in HTML
}

// Loading overlay functions
function showLoading(message = 'Loading...') {
  loadingState.isLoading = true;
  loadingState.loadingMessage = message;
  
  const overlay = document.getElementById('loadingOverlay');
  if (overlay) {
    overlay.querySelector('.loading-message').textContent = message;
    overlay.style.display = 'flex';
  }
}

function hideLoading() {
  loadingState.isLoading = false;
  const overlay = document.getElementById('loadingOverlay');
  if (overlay) {
    overlay.style.display = 'none';
  }
}

// Notification functions
function startNotificationPolling() {
  // Initial load
  loadNotifications();
  
  // Poll every 30 seconds
  notificationInterval = setInterval(loadNotifications, 30000);
}

function stopNotificationPolling() {
  if (notificationInterval) {
    clearInterval(notificationInterval);
    notificationInterval = null;
  }
}

async function loadNotifications() {
  if (!state.currentUser) return;
  
  try {
    const response = await fetch(`${API_BASE_URL}/notifications/user/${state.currentUser.id}/unread`);
    if (response.ok) {
      const data = await response.json();
      updateNotificationUI(data);
    }
  } catch (error) {
    console.error("Error loading notifications:", error);
  }
}

function updateNotificationUI(data) {
  const countBadge = document.getElementById('notificationCount');
  const notificationList = document.getElementById('notificationList');
  
  // Update count
  if (data.unreadCount > 0) {
    countBadge.textContent = data.unreadCount > 9 ? '9+' : data.unreadCount;
    countBadge.style.display = 'inline-block';
  } else {
    countBadge.style.display = 'none';
  }
  
  // Update notification list
  notificationList.innerHTML = '';
  
  if (data.notifications.length === 0) {
    notificationList.innerHTML = '<div class="dropdown-item text-muted">No new notifications</div>';
    return;
  }
  
  data.notifications.forEach(notification => {
    const notifElement = document.createElement('div');
    notifElement.className = `dropdown-item notification-item ${!notification.read ? 'unread' : ''}`;
    notifElement.innerHTML = `
      <div class="d-flex justify-content-between align-items-start">
        <div>
          <h6 class="mb-1">${notification.title}</h6>
          <p class="mb-0 small">${notification.message}</p>
          <small class="text-muted">${formatTimeAgo(notification.createdAt)}</small>
        </div>
        ${notification.actionUrl ? `<i class="bi bi-chevron-right"></i>` : ''}
      </div>
    `;
    
    notifElement.addEventListener('click', () => handleNotificationClick(notification));
    notificationList.appendChild(notifElement);
  });
}

async function handleNotificationClick(notification) {
  // Mark as read
  try {
    await fetch(`${API_BASE_URL}/notifications/${notification.id}/read`, {
      method: 'PUT'
    });
    
    // Reload notifications
    loadNotifications();
    
    // Navigate if action URL exists
    if (notification.actionUrl) {
      // Handle navigation based on URL
      if (notification.actionUrl.includes('/bookings/')) {
        showBookingManagement();
      }
    }
  } catch (error) {
    console.error("Error marking notification as read:", error);
  }
}

async function markAllNotificationsRead() {
  try {
    await fetch(`${API_BASE_URL}/notifications/user/${state.currentUser.id}/read-all`, {
      method: 'PUT'
    });
    loadNotifications();
  } catch (error) {
    console.error("Error marking all notifications as read:", error);
  }
}

// Validation utilities
const validators = {
  email: (email) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  },
  
  password: (password) => {
    return password.length >= 8;
  },
  
  hourlyRate: (rate) => {
    return rate > 0 && rate <= 1000;
  },
  
  description: (desc) => {
    return desc && desc.trim().length >= 50 && desc.length <= 1000;
  }
};

function addFormValidationListeners() {
  // Add real-time validation
  document.getElementById('signupEmail').addEventListener('blur', function() {
    const email = this.value;
    const isValid = validators.email(email);
    this.classList.toggle('is-invalid', !isValid && email.length > 0);
  });

  document.getElementById('signupPassword').addEventListener('input', function() {
    const password = this.value;
    const isValid = validators.password(password);
    this.classList.toggle('is-invalid', !isValid && password.length > 0);
    
    // Show password strength
    const strengthIndicator = document.getElementById('passwordStrength');
    if (strengthIndicator) {
      const strength = calculatePasswordStrength(password);
      strengthIndicator.textContent = strength.message;
      strengthIndicator.className = `form-text ${strength.class}`;
    }
  });
}

function calculatePasswordStrength(password) {
  if (password.length < 8) return { message: 'Too short', class: 'text-danger' };
  
  let strength = 0;
  if (password.match(/[a-z]+/)) strength++;
  if (password.match(/[A-Z]+/)) strength++;
  if (password.match(/[0-9]+/)) strength++;
  if (password.match(/[$@#&!]+/)) strength++;
  
  if (strength < 2) return { message: 'Weak password', class: 'text-warning' };
  if (strength < 3) return { message: 'Good password', class: 'text-info' };
  return { message: 'Strong password', class: 'text-success' };
}

// Empty state component
function createEmptyState(type) {
  const emptyStates = {
    bookings: {
      icon: 'calendar-x',
      title: 'No bookings yet',
      message: 'Start by finding a tutor and booking your first session!',
      action: state.currentUser?.userType === 'Student' ? 
        '<button class="btn btn-primary" onclick="showSearchTutors()">Find a Tutor</button>' : ''
    },
    subjects: {
      icon: 'book',
      title: 'No subjects added',
      message: 'Add subjects you want to teach to start receiving bookings.',
      action: ''
    },
    notifications: {
      icon: 'bell-slash',
      title: 'No notifications',
      message: 'You\'re all caught up!',
      action: ''
    },
    search: {
      icon: 'search',
      title: 'No tutors found',
      message: 'Try adjusting your search filters or browse all tutors.',
      action: '<button class="btn btn-secondary" onclick="clearSearchFilters()">Clear Filters</button>'
    }
  };
  
  const stateConfig = emptyStates[type];
  return `
    <div class="empty-state">
      <i class="bi bi-${stateConfig.icon}"></i>
      <h5>${stateConfig.title}</h5>
      <p>${stateConfig.message}</p>
      ${stateConfig.action}
    </div>
  `;
}

// Toast notification utility
function showToast(title, message, type = 'info') {
  const toastEl = document.getElementById('toast');
  const toastTitle = document.getElementById('toastTitle');
  const toastMessage = document.getElementById('toastMessage');
  
  // Set content
  toastTitle.textContent = title;
  toastMessage.textContent = message;
  
  // Set color based on type
  toastEl.className = `toast toast-${type}`;
  
  // Show toast
  const toast = new bootstrap.Toast(toastEl);
  toast.show();
}

// Time formatting functions
function formatTimeAgo(dateString) {
  const date = new Date(dateString);
  const now = new Date();
  const seconds = Math.floor((now - date) / 1000);
  
  if (seconds < 60) return 'just now';
  const minutes = Math.floor(seconds / 60);
  if (minutes < 60) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
  const hours = Math.floor(minutes / 60);
  if (hours < 24) return `${hours} hour${hours > 1 ? 's' : ''} ago`;
  const days = Math.floor(hours / 24);
  if (days < 7) return `${days} day${days > 1 ? 's' : ''} ago`;
  const weeks = Math.floor(days / 7);
  return `${weeks} week${weeks > 1 ? 's' : ''} ago`;
}

// Rating display function
function displayRating(rating) {
  if (rating === 0) return '<span class="not-rated">Not rated yet</span>';

  const fullStars = Math.floor(rating);
  const hasHalfStar = rating % 1 >= 0.5;
  let stars = "";

  for (let i = 0; i < fullStars; i++) {
    stars += '<i class="bi bi-star-fill"></i>';
  }
  if (hasHalfStar) {
    stars += '<i class="bi bi-star-half"></i>';
  }

  // Add empty stars to complete 5
  const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
  for (let i = 0; i < emptyStars; i++) {
    stars += '<i class="bi bi-star"></i>';
  }

  return `${stars} <span class="rating-number">${rating.toFixed(1)}</span>`;
}

// Session countdown timer
function startSessionCountdown() {
  const updateCountdowns = () => {
    document.querySelectorAll('.session-countdown').forEach(el => {
      const sessionTime = new Date(el.dataset.sessionTime);
      const now = new Date();
      const diff = sessionTime - now;
      
      if (diff > 0) {
        const hours = Math.floor(diff / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        
        if (hours < 24) {
          el.textContent = `Starts in ${hours}h ${minutes}m`;
          el.classList.add('text-warning');
        } else {
          const days = Math.floor(hours / 24);
          el.textContent = `In ${days} day${days > 1 ? 's' : ''}`;
        }
      } else {
        el.textContent = 'Session started';
        el.classList.add('text-danger');
      }
    });
  };
  
  updateCountdowns();
  setInterval(updateCountdowns, 60000); // Update every minute
}

// Keyboard shortcuts
function addKeyboardShortcuts() {
  document.addEventListener('keydown', (e) => {
    if (!state.currentUser) return;
    
    // Ctrl/Cmd + K - Quick search
    if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
      e.preventDefault();
      if (state.currentUser.userType === 'Student') {
        showSearchTutors();
      }
    }
    
    // Escape - Close modals
    if (e.key === 'Escape') {
      const modals = document.querySelectorAll('.modal.show');
      modals.forEach(modal => {
        const modalInstance = bootstrap.Modal.getInstance(modal);
        if (modalInstance) modalInstance.hide();
      });
    }
  });
}

// Auto-save functionality
let autoSaveTimeout;

function addAutoSaveListeners() {
  document.getElementById('editDescription')?.addEventListener('input', function() {
    clearTimeout(autoSaveTimeout);
    const value = this.value;
    
    // Show saving indicator
    const indicator = document.getElementById('autoSaveIndicator');
    if (indicator) {
      indicator.textContent = 'Typing...';
      indicator.className = 'text-muted small';
    }
    
    autoSaveTimeout = setTimeout(() => {
      // Save to localStorage
      localStorage.setItem('draft_description', value);
      if (indicator) {
        indicator.textContent = 'Draft saved';
        indicator.className = 'text-success small';
      }
    }, 1000);
  });
}

// Confirmation dialog
function showConfirmDialog(title, message, confirmText = 'Confirm', type = 'warning') {
  return new Promise((resolve) => {
    const modal = new bootstrap.Modal(document.getElementById('confirmModal'));
    
    document.getElementById('confirmTitle').textContent = title;
    document.getElementById('confirmMessage').textContent = message;
    const confirmBtn = document.getElementById('confirmActionBtn');
    confirmBtn.textContent = confirmText;
    confirmBtn.className = `btn btn-${type}`;
    
    confirmBtn.onclick = () => {
      modal.hide();
      resolve(true);
    };
    
    document.getElementById('confirmCancelBtn').onclick = () => {
      modal.hide();
      resolve(false);
    };
    
    modal.show();
  });
}

// Check if user is already authenticated
function checkAuthState() {
  const savedUser = localStorage.getItem("currentUser");
  if (savedUser) {
    state.currentUser = JSON.parse(savedUser);
    showDashboard();
  } else {
    showAuthView();
  }
}

// View switching functions
function showAuthView() {
  hideAllViews();
  document.getElementById("authView").style.display = "block";
  document.getElementById("mainNav").style.display = "none";
}

function showDashboard() {
  hideAllViews();
  document.getElementById("mainNav").style.display = "block";
  document.getElementById("userNameDisplay").textContent =
    state.currentUser.name;

  // Start notification polling
  startNotificationPolling();

  if (state.currentUser.userType === "Student") {
    document.getElementById(
      "balanceDisplay"
    ).textContent = `Balance: ${state.currentUser.balance}`;
    showStudentDashboard();
  } else {
    document.getElementById(
      "balanceDisplay"
    ).textContent = `Rate: ${state.currentUser.hourlyRate}/hr`;
    showTutorDashboard();
  }
}

function showStudentDashboard() {
  document.getElementById("studentDashboard").style.display = "block";
  loadStudentDashboard();
}

function showTutorDashboard() {
  document.getElementById("tutorDashboard").style.display = "block";
  loadTutorDashboard();
}

function showSearchTutors() {
  hideAllViews();
  document.getElementById("searchTutorsView").style.display = "block";
  loadSubjectsForSearch();
}

function showStudentBookings() {
  state.currentView = "studentBookings";
  showBookingManagement();
}

function showTutorBookings() {
  state.currentView = "tutorBookings";
  showBookingManagement();
}

function showBookingManagement() {
  hideAllViews();
  document.getElementById("bookingManagementView").style.display = "block";
  document.getElementById("bookingViewTitle").textContent =
    state.currentView === "studentBookings" ? "My Bookings" : "My Sessions";
  showBookingTab("upcoming");
}

function showSubjectManagement() {
  hideAllViews();
  document.getElementById("subjectManagementView").style.display = "block";
  loadTutorSubjects();
}

function showAvailabilityManagement() {
  hideAllViews();
  document.getElementById("availabilityManagementView").style.display = "block";
  loadTutorAvailability();
}

function hideAllViews() {
  const views = [
    "authView",
    "studentDashboard",
    "tutorDashboard",
    "searchTutorsView",
    "bookingManagementView",
    "subjectManagementView",
    "availabilityManagementView",
  ];
  views.forEach(
    (view) => (document.getElementById(view).style.display = "none")
  );
}

function backToDashboard() {
  showDashboard();
}

// Auth form switching
function showLoginForm(e) {
  e.preventDefault();
  document.getElementById("loginForm").style.display = "block";
  document.getElementById("signupForm").style.display = "none";
  document.getElementById("loginTab").classList.add("active");
  document.getElementById("signupTab").classList.remove("active");
}

function showSignupForm(e) {
  e.preventDefault();
  document.getElementById("loginForm").style.display = "none";
  document.getElementById("signupForm").style.display = "block";
  document.getElementById("signupTab").classList.add("active");
  document.getElementById("loginTab").classList.remove("active");
}

function toggleTutorFields() {
  const userType = document.getElementById("signupUserType").value;
  document.getElementById("tutorFields").style.display =
    userType === "TUTOR" ? "block" : "none";
}

// Authentication handlers
async function handleLogin(e) {
  e.preventDefault();
  showLoading('Logging in...');
  
  const loginData = {
    email: document.getElementById("loginEmail").value,
    password: document.getElementById("loginPassword").value,
  };

  try {
    const response = await fetch(`${API_BASE_URL}/auth/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(loginData),
    });

    if (response.ok) {
      const userData = await response.json();
      state.currentUser = userData;
      localStorage.setItem("currentUser", JSON.stringify(userData));
      showDashboard();
    } else {
      const error = await response.text();
      document.getElementById("loginError").textContent = error;
      document.getElementById("loginError").style.display = "block";
    }
  } catch (error) {
    console.error("Login error:", error);
    document.getElementById("loginError").textContent = "Connection error";
    document.getElementById("loginError").style.display = "block";
  } finally {
    hideLoading();
  }
}

async function handleSignup(e) {
  e.preventDefault();
  showLoading('Creating account...');
  
  const signupData = {
    userType: document.getElementById("signupUserType").value,
    name: document.getElementById("signupName").value,
    email: document.getElementById("signupEmail").value,
    password: document.getElementById("signupPassword").value,
    timeZoneId: document.getElementById("signupTimeZone").value,
    hourlyRate:
      parseFloat(document.getElementById("signupHourlyRate").value) || 0,
    description: document.getElementById("signupDescription").value || "",
  };

  try {
    const response = await fetch(`${API_BASE_URL}/auth/signup`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(signupData),
    });

    if (response.ok) {
      const userData = await response.json();
      state.currentUser = userData;
      localStorage.setItem("currentUser", JSON.stringify(userData));
      showDashboard();
    } else {
      const error = await response.text();
      document.getElementById("signupError").textContent = error;
      document.getElementById("signupError").style.display = "block";
    }
  } catch (error) {
    console.error("Signup error:", error);
    document.getElementById("signupError").textContent = "Connection error";
    document.getElementById("signupError").style.display = "block";
  } finally {
    hideLoading();
  }
}

function handleLogout() {
  state.currentUser = null;
  localStorage.removeItem("currentUser");
  stopNotificationPolling();
  showAuthView();
}

// Dashboard loading functions
async function loadStudentDashboard() {
  try {
    const response = await fetch(
      `${API_BASE_URL}/dashboard/student/${state.currentUser.id}`
    );
    if (response.ok) {
      const dashboard = await response.json();

      // Update profile
      document.getElementById("studentName").textContent =
        dashboard.profile.name;
      document.getElementById("studentBalance").textContent =
        dashboard.profile.balance.toFixed(2);
      
      // Update profile picture
      if (dashboard.profile.profilePictureUrl) {
        document.getElementById("studentProfilePic").src = dashboard.profile.profilePictureUrl;
      }

      // Update stats
      document.getElementById("totalSessions").textContent =
        dashboard.stats.totalSessions;
      document.getElementById("completedSessions").textContent =
        dashboard.stats.completedSessions;
      document.getElementById("upcomingSessions").textContent =
        dashboard.stats.upcomingSessions;

      // Update upcoming bookings
      renderUpcomingBookings(
        dashboard.upcomingBookings,
        "upcomingBookingsList"
      );
    }
  } catch (error) {
    console.error("Error loading student dashboard:", error);
  }
}

async function loadTutorDashboard() {
  try {
    const response = await fetch(
      `${API_BASE_URL}/dashboard/tutor/${state.currentUser.id}`
    );
    if (response.ok) {
      const dashboard = await response.json();

      // Update profile
      document.getElementById("tutorName").textContent = dashboard.profile.name;
      document.getElementById("tutorRate").textContent =
        dashboard.profile.hourlyRate.toFixed(2);
      
      // Update profile picture
      if (dashboard.profile.profilePictureUrl) {
        document.getElementById("tutorProfilePic").src = dashboard.profile.profilePictureUrl;
      }

      // Update stats
      document.getElementById("tutorTotalSessions").textContent =
        dashboard.stats.totalSessions;
      document.getElementById("tutorCompletedSessions").textContent =
        dashboard.stats.completedSessions;
      document.getElementById("tutorRating").innerHTML = displayRating(
        dashboard.stats.averageRating
      );
      document.getElementById("tutorEarnings").textContent =
        dashboard.stats.totalEarnings.toFixed(2);
      document.getElementById("thisMonthEarnings").textContent =
        dashboard.stats.thisMonthEarnings.toFixed(2);
      document.getElementById("totalReviews").textContent =
        dashboard.stats.totalReviews;

      // Update today's schedule
      renderUpcomingBookings(dashboard.todaysSchedule, "todaysScheduleList");
    }
  } catch (error) {
    console.error("Error loading tutor dashboard:", error);
  }
}

// Search functionality
async function loadSubjectsForSearch() {
  try {
    const response = await fetch(`${API_BASE_URL}/subjects`);
    if (response.ok) {
      const data = await response.json();
      const select = document.getElementById("searchSubject");
      select.innerHTML = '<option value="">All Subjects</option>';

      data.subjects.forEach((category) => {
        category.subjects.forEach((subject) => {
          const option = document.createElement("option");
          option.value = subject.id;
          option.textContent = `${subject.name} (${category.category})`;
          select.appendChild(option);
        });
      });
    }
  } catch (error) {
    console.error("Error loading subjects:", error);
  }
}

async function handleSearch(e) {
  e.preventDefault();
  showLoading("Searching...");

  const searchData = {
    subjectId: document.getElementById("searchSubject").value || null,
    minPrice: parseFloat(document.getElementById("minPrice").value) || 0,
    maxPrice: parseFloat(document.getElementById("maxPrice").value) || 0,
    minRating: parseFloat(document.getElementById("minRating").value) || 0,
    sortBy: document.getElementById("sortBy").value,
    page: 0,
    pageSize: 20,
  };

  try {
    const response = await fetch(`${API_BASE_URL}/search/tutors`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(searchData),
    });

    if (response.ok) {
      const results = await response.json();
      renderSearchResults(results.results);
    }
  } catch (error) {
    console.error("Search error:", error);
  } finally {
    hideLoading();
  }
}

function renderSearchResults(tutors) {
  const container = document.getElementById("searchResults");
  container.innerHTML = "";

  if (tutors.length === 0) {
    container.innerHTML = createEmptyState("search");
    return;
  }

  tutors.forEach((tutor) => {
    const card = document.createElement("div");
    card.className = "card mb-3";
    card.innerHTML = `
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <h5 class="card-title">${tutor.name}</h5>
                        <p class="card-text">${tutor.shortDescription}</p>
                        <p>Rate: $${
                          tutor.hourlyRate
                            }/hr | Rating: ${tutor.rating.toFixed(1)} (${
      tutor.reviewCount
    } reviews)</p>
                        <p>Subjects: ${tutor.subjects
                          .map((s) => s.name)
                          .join(", ")}</p>
                    </div>
                    <div class="col-md-4 text-end">
                        <button class="btn btn-primary book-tutor-btn" 
                                data-tutor-id="${tutor.id}" 
                                data-tutor-name="${tutor.name}" 
                                data-hourly-rate="${
                                  tutor.hourlyRate
                                }">Book Session</button>
                        <button class="btn btn-secondary view-tutor-btn" 
                                data-tutor-id="${
                                  tutor.id
                                }">View Profile</button>
                    </div>
                </div>
            </div>
        `;
    container.appendChild(card);
  });
}

// Clear search filters
function clearSearchFilters() {
  document.getElementById("searchForm").reset();
  handleSearch(new Event("submit"));
}

// Booking management
async function showBookingTab(tab) {
  const userId = state.currentUser.id;
  const endpoint =
    state.currentView === "studentBookings"
      ? `${API_BASE_URL}/bookings/student/${userId}`
      : `${API_BASE_URL}/bookings/tutor/${userId}`;

  try {
    const response = await fetch(endpoint);
    if (response.ok) {
      const data = await response.json();
      const bookings =
        tab === "upcoming"
          ? data.upcomingBookings
          : tab === "past"
          ? data.pastBookings
          : data.cancelledBookings;

      renderBookings(bookings, tab);

      // Update tab active states
      document
        .querySelectorAll("#bookingManagementView .nav-link")
        .forEach((link) => {
          link.classList.remove("active");
        });
      document.getElementById(`${tab}Tab`).classList.add("active");
    }
  } catch (error) {
    console.error("Error loading bookings:", error);
  }
}

function renderBookings(bookings, tab) {
  const container = document.getElementById("bookingsList");
  container.innerHTML = "";

  if (bookings.length === 0) {
    container.innerHTML = createEmptyState("bookings");
    return;
  }

  bookings.forEach((booking) => {
    const card = document.createElement("div");
    card.className = "card mb-3";
    const dateTime = new Date(booking.dateTime).toLocaleString();

    card.innerHTML = `
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <h5 class="card-title">${booking.subject.name}</h5>
                        <p>With: ${
                          state.currentView === "studentBookings"
                            ? booking.tutor.name
                            : booking.student.name
                        }</p>
                        <p>Date: ${dateTime} | Duration: ${
      booking.durationHours
    } hour(s)</p>
                        <p>Total Cost: ${booking.totalCost} | Status: ${
      booking.status
    }</p>
                    </div>
                    <div class="col-md-4 text-end">
                        ${getBookingActions(booking, tab)}
                    </div>
                </div>
            </div>
        `;
    container.appendChild(card);
  });
}

function getBookingActions(booking, tab) {
  if (tab === "upcoming" && booking.status === "PENDING") {
    return `
            <button class="btn btn-success btn-sm confirm-booking-btn" data-booking-id="${booking.id}">Confirm & Pay</button>
            <button class="btn btn-danger btn-sm cancel-booking-btn" data-booking-id="${booking.id}">Cancel</button>
        `;
  } else if (tab === "upcoming" && booking.status === "CONFIRMED") {
    // Add complete button for tutors
    const completeButton =
      state.currentView === "tutorBookings" &&
      new Date(booking.dateTime) < new Date()
        ? `<button class="btn btn-primary btn-sm complete-booking-btn" data-booking-id="${booking.id}">Mark Complete</button>`
        : "";
    return `
      ${completeButton}
      <button class="btn btn-danger btn-sm cancel-booking-btn" data-booking-id="${booking.id}">Cancel</button>
    `;
  } else if (
    tab === "past" &&
    booking.status === "COMPLETED" &&
    state.currentView === "studentBookings"
  ) {
    return `<button class="btn btn-primary btn-sm review-tutor-btn" data-tutor-id="${booking.tutor.id}">Leave Review</button>`;
  }
  return "";
}

function renderUpcomingBookings(bookings, containerId) {
  const container = document.getElementById(containerId);
  container.innerHTML = "";

  if (bookings.length === 0) {
    container.innerHTML = '<p class="text-muted">No upcoming sessions.</p>';
    return;
  }

  bookings.forEach((booking) => {
    const dateTime = new Date(booking.dateTime);
    const div = document.createElement("div");
    div.className = "session-item";
    div.innerHTML = `
      <div class="d-flex justify-content-between align-items-start">
        <div>
          <strong>${booking.subject.name}</strong><br>
          With: ${
            state.currentUser.userType === "Student"
              ? booking.tutor.name
              : booking.student.name
          }<br>
          ${dateTime.toLocaleString()}
        </div>
        <small class="session-countdown" data-session-time="${
          booking.dateTime
        }"></small>
      </div>
    `;
    container.appendChild(div);
  });

  startSessionCountdown();
}

// Subject management
async function loadTutorSubjects() {
  try {
    // Load tutor's current subjects
    const tutorResponse = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}`
    );
    if (tutorResponse.ok) {
      const tutorData = await tutorResponse.json();
      renderMySubjects(tutorData.subjects);
    }

    // Load available subjects
    const availableResponse = await fetch(
      `${API_BASE_URL}/subjects/available/tutor/${state.currentUser.id}`
    );
    if (availableResponse.ok) {
      const availableSubjects = await availableResponse.json();
      renderAvailableSubjects(availableSubjects);
    }
  } catch (error) {
    console.error("Error loading subjects:", error);
  }
}

function renderMySubjects(subjects) {
  const container = document.getElementById("mySubjectsList");
  container.innerHTML = "";

  if (subjects.length === 0) {
    container.innerHTML = createEmptyState("subjects");
    return;
  }

  subjects.forEach((subject) => {
    const div = document.createElement("div");
    div.className = "d-flex justify-content-between align-items-center mb-2";
    div.innerHTML = `
            <span>${subject.name} (${subject.category})</span>
            <button class="btn btn-sm btn-danger remove-subject-btn" data-subject-id="${subject.id}">Remove</button>
        `;
    container.appendChild(div);
  });
}

function renderAvailableSubjects(subjects) {
  const container = document.getElementById("availableSubjectsList");
  container.innerHTML = "";

  if (subjects.length === 0) {
    container.innerHTML =
      '<p class="text-muted">All subjects already added.</p>';
    return;
  }

  subjects.forEach((subject) => {
    const div = document.createElement("div");
    div.className = "d-flex justify-content-between align-items-center mb-2";
    div.innerHTML = `
            <span>${subject.name} (${subject.category})</span>
            <button class="btn btn-sm btn-success add-subject-btn" data-subject-id="${subject.id}">Add</button>
        `;
    container.appendChild(div);
  });
}

async function addSubject(subjectId) {
  try {
    const response = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}/subjects`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ subjectId }),
      }
    );

    if (response.ok) {
      loadTutorSubjects();
      showToast("Success", "Subject added successfully", "success");
    }
  } catch (error) {
    console.error("Error adding subject:", error);
    showToast("Error", "Failed to add subject", "danger");
  }
}

async function removeSubject(subjectId) {
  try {
    const response = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}/subjects/${subjectId}`,
      {
        method: "DELETE",
      }
    );

    if (response.ok) {
      loadTutorSubjects();
      showToast("Success", "Subject removed successfully", "success");
    }
  } catch (error) {
    console.error("Error removing subject:", error);
    showToast("Error", "Failed to remove subject", "danger");
  }
}

// Availability management
async function loadTutorAvailability() {
  try {
    const response = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}/availability`
    );
    if (response.ok) {
      const availability = await response.json();
      renderAvailability(availability.regularSchedule);
    }
  } catch (error) {
    console.error("Error loading availability:", error);
  }
}

function renderAvailability(slots) {
  const container = document.getElementById("availabilityList");
  container.innerHTML = "";

  if (slots.length === 0) {
    container.innerHTML = '<p class="text-muted">No availability set.</p>';
    return;
  }

  const dayOrder = [
    "MONDAY",
    "TUESDAY",
    "WEDNESDAY",
    "THURSDAY",
    "FRIDAY",
    "SATURDAY",
    "SUNDAY",
  ];
  slots.sort(
    (a, b) => dayOrder.indexOf(a.dayOfWeek) - dayOrder.indexOf(b.dayOfWeek)
  );

  slots.forEach((slot) => {
    const div = document.createElement("div");
    div.className = "d-flex justify-content-between align-items-center mb-2";
    div.innerHTML = `
            <span>${slot.dayOfWeek}: ${slot.startTime} - ${slot.endTime}</span>
            <button class="btn btn-sm btn-danger remove-availability-btn" 
                    data-day-of-week="${slot.dayOfWeek}" 
                    data-start-time="${slot.startTime}" 
                    data-end-time="${slot.endTime}">Remove</button>
        `;
    container.appendChild(div);
  });
}

async function handleAddAvailability(e) {
  e.preventDefault();

  const data = {
    action: "ADD",
    dayOfWeek: document.getElementById("dayOfWeek").value,
    startTime: document.getElementById("startTime").value,
    endTime: document.getElementById("endTime").value,
  };

  try {
    const response = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}/availability`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      }
    );

    if (response.ok) {
      document.getElementById("availabilityForm").reset();
      loadTutorAvailability();
      showToast("Success", "Availability added successfully", "success");
    }
  } catch (error) {
    console.error("Error adding availability:", error);
    showToast("Error", "Failed to add availability", "danger");
  }
}

async function removeAvailability(dayOfWeek, startTime, endTime) {
  const data = {
    action: "REMOVE",
    dayOfWeek,
    startTime,
    endTime,
  };

  try {
    const response = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}/availability`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      }
    );

    if (response.ok) {
      loadTutorAvailability();
      showToast("Success", "Availability removed successfully", "success");
    }
  } catch (error) {
    console.error("Error removing availability:", error);
    showToast("Error", "Failed to remove availability", "danger");
  }
}

// Profile management
function showEditProfileModal() {
  if (state.currentUser.userType === "Student") {
    document.getElementById("tutorEditFields").style.display = "none";
  } else {
    document.getElementById("tutorEditFields").style.display = "block";

    // Restore draft for tutors
    const savedDescription = localStorage.getItem("draft_description");
    if (savedDescription) {
      document.getElementById("editDescription").value = savedDescription;
    }
  }
  profileEditModal.show();
}

async function handleUpdateProfile() {
  const updateData = {
    name: document.getElementById("editName").value || null,
    email: document.getElementById("editEmail").value || null,
    currentPassword:
      document.getElementById("editCurrentPassword").value || null,
    password: document.getElementById("editNewPassword").value || null,
    timeZoneId: document.getElementById("editTimeZone").value || null,
  };

  if (state.currentUser.userType === "Tutor") {
    updateData.hourlyRate =
      parseFloat(document.getElementById("editHourlyRate").value) || null;
    updateData.description =
      document.getElementById("editDescription").value || null;
  }

  const endpoint =
    state.currentUser.userType === "Student"
      ? `${API_BASE_URL}/students/${state.currentUser.id}`
      : `${API_BASE_URL}/tutors/${state.currentUser.id}`;

  try {
    const response = await fetch(endpoint, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updateData),
    });

    if (response.ok) {
      const updatedProfile = await response.json();

      // Handle profile picture upload if file selected
      const fileInput = document.getElementById("profilePictureUpload");
      if (fileInput.files.length > 0) {
        await uploadProfilePicture(fileInput.files[0]);
      }

      // Update current user data
      Object.assign(state.currentUser, updatedProfile);
      localStorage.setItem("currentUser", JSON.stringify(state.currentUser));
      profileEditModal.hide();
      showDashboard();
      showToast("Success", "Profile updated successfully", "success");
    }
  } catch (error) {
    console.error("Error updating profile:", error);
    showToast("Error", "Failed to update profile", "danger");
  }
}

// Profile picture upload
async function uploadProfilePicture(file) {
  const formData = new FormData();
  formData.append("file", file);
  formData.append("type", "profile");

  const endpoint =
    state.currentUser.userType === "Student"
      ? `${API_BASE_URL}/students/${state.currentUser.id}/profile-picture`
      : `${API_BASE_URL}/tutors/${state.currentUser.id}/profile-picture`;

  try {
    const response = await fetch(endpoint, {
      method: "POST",
      body: formData,
    });

    if (response.ok) {
      const result = await response.json();
      state.currentUser.profilePictureUrl = result.profilePictureUrl;
    }
  } catch (error) {
    console.error("Error uploading profile picture:", error);
  }
}

// Funds management
function showAddFundsModal() {
  addFundsModal.show();
}

async function handleAddFunds() {
  const amount = parseFloat(document.getElementById("fundAmount").value);

  try {
    const response = await fetch(
      `${API_BASE_URL}/students/${state.currentUser.id}/add-funds`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ amount }),
      }
    );

    if (response.ok) {
      const result = await response.json();
      state.currentUser.balance = result.value;
      localStorage.setItem("currentUser", JSON.stringify(state.currentUser));
      addFundsModal.hide();
      document.getElementById("addFundsForm").reset();
      loadStudentDashboard();
      showToast(
        "Success",
        `$${amount.toFixed(2)} added to your balance`,
        "success"
      );
    }
  } catch (error) {
    console.error("Error adding funds:", error);
    showToast("Error", "Failed to add funds", "danger");
  }
}

// Booking functions
async function bookTutor(tutorId, tutorName, hourlyRate) {
  document.getElementById("bookingTutorName").textContent = tutorName;
  document.getElementById("bookingTutorId").value = tutorId;

  // Set minimum date to today
  const today = new Date().toISOString().split("T")[0];
  document.getElementById("bookingDate").setAttribute("min", today);

  // Load tutor's subjects
  try {
    const response = await fetch(`${API_BASE_URL}/tutors/${tutorId}`);
    if (response.ok) {
      const tutorData = await response.json();
      const select = document.getElementById("bookingSubject");
      select.innerHTML = '<option value="">Select subject...</option>';

      tutorData.subjects.forEach((subject) => {
        const option = document.createElement("option");
        option.value = subject.id;
        option.textContent = subject.name;
        select.appendChild(option);
      });

      // Store hourly rate for cost calculation
      select.dataset.hourlyRate = hourlyRate;
      updateBookingCost();
    }
  } catch (error) {
    console.error("Error loading tutor subjects:", error);
  }

  createBookingModal.show();
}

function updateBookingCost() {
  const duration =
    parseInt(document.getElementById("bookingDuration").value) || 1;
  const hourlyRate =
    parseFloat(document.getElementById("bookingSubject").dataset.hourlyRate) ||
    0;
  const totalCost = duration * hourlyRate;
  document.getElementById("bookingTotalCost").textContent =
    totalCost.toFixed(2);
}

async function handleCreateBooking() {
  const bookingData = {
    studentId: state.currentUser.id,
    tutorId: document.getElementById("bookingTutorId").value,
    subjectId: document.getElementById("bookingSubject").value,
    dateTime: `${document.getElementById("bookingDate").value}T${
      document.getElementById("bookingTime").value
    }:00`,
    durationHours: parseInt(document.getElementById("bookingDuration").value),
  };

  try {
    const response = await fetch(`${API_BASE_URL}/bookings`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(bookingData),
    });

    if (response.ok) {
      createBookingModal.hide();
      document.getElementById("createBookingForm").reset();
      showToast(
        "Success",
        "Booking created! Please confirm and pay to secure your session.",
        "success"
      );
      showStudentBookings();
    } else {
      const error = await response.text();
      const errorDiv = document.querySelector(
        "#createBookingModal .modal-error"
      );
      if (errorDiv) {
        errorDiv.textContent = `Error: ${error}`;
        errorDiv.style.display = "block";
      }
    }
  } catch (error) {
    console.error("Error creating booking:", error);
    showToast("Error", "Failed to create booking", "danger");
  }
}

async function confirmBooking(bookingId) {
  try {
    const response = await fetch(
      `${API_BASE_URL}/bookings/${bookingId}/confirm`,
      {
        method: "POST",
      }
    );

    if (response.ok) {
      showToast(
        "Success",
        "Booking confirmed and payment processed!",
        "success"
      );
      showBookingTab("upcoming");
      loadStudentDashboard();
    } else {
      const error = await response.text();
      showToast("Error", `Failed to confirm booking: ${error}`, "danger");
    }
  } catch (error) {
    console.error("Error confirming booking:", error);
    showToast("Error", "Connection error. Please try again.", "danger");
  }
}

async function cancelBooking(bookingId) {
  const confirmed = await showConfirmDialog(
    "Cancel Booking",
    "Are you sure you want to cancel this booking? If you've already paid, you will receive a full refund.",
    "Yes, Cancel",
    "danger"
  );

  if (!confirmed) return;

  try {
    const response = await fetch(
      `${API_BASE_URL}/bookings/${bookingId}/cancel`,
      {
        method: "POST",
      }
    );

    if (response.ok) {
      showToast("Success", "Booking cancelled successfully!", "success");
      showBookingTab("upcoming");
    } else {
      const error = await response.text();
      showToast("Error", `Failed to cancel booking: ${error}`, "danger");
    }
  } catch (error) {
    console.error("Error cancelling booking:", error);
    showToast("Error", "Connection error. Please try again.", "danger");
  }
}

async function completeBooking(bookingId) {
  const confirmed = await showConfirmDialog(
    "Complete Session",
    "Mark this session as completed? This will release payment to you.",
    "Mark Complete",
    "success"
  );

  if (!confirmed) return;

  try {
    const response = await fetch(
      `${API_BASE_URL}/bookings/${bookingId}/complete`,
      {
        method: "POST",
      }
    );

    if (response.ok) {
      showToast("Success", "Session marked as completed!", "success");
      showBookingTab("upcoming");
      loadTutorDashboard(); // Refresh to update earnings
    } else {
      const error = await response.text();
      showToast("Error", `Failed to complete booking: ${error}`, "danger");
    }
  } catch (error) {
    console.error("Error completing booking:", error);
    showToast("Error", "Connection error. Please try again.", "danger");
  }
}

// Review functions
function showReviewModal(tutorId) {
  document.getElementById("reviewTutorId").value = tutorId;
  reviewModal.show();
}

async function handleSubmitReview() {
  const reviewData = {
    studentId: state.currentUser.id,
    tutorId: document.getElementById("reviewTutorId").value,
    rating: parseInt(document.getElementById("reviewRating").value),
    comment: document.getElementById("reviewComment").value,
  };

  try {
    const response = await fetch(`${API_BASE_URL}/reviews`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(reviewData),
    });

    if (response.ok) {
      reviewModal.hide();
      document.getElementById("reviewForm").reset();
      showToast("Success", "Review submitted successfully!", "success");
    } else {
      const error = await response.text();
      showToast("Error", `Failed to submit review: ${error}`, "danger");
    }
  } catch (error) {
    console.error("Error submitting review:", error);
    showToast("Error", "Connection error. Please try again.", "danger");
  }
}

// Tutor details
async function viewTutorDetails(tutorId) {
  try {
    const response = await fetch(`${API_BASE_URL}/tutors/${tutorId}`);
    if (response.ok) {
      const tutor = await response.json();

      const content = document.getElementById("tutorDetailsContent");
      content.innerHTML = `
                <h4>${tutor.name}</h4>
                <p><strong>Rate:</strong> ${tutor.hourlyRate}/hr</p>
                <p><strong>Rating:</strong> ${tutor.rating.toFixed(1)}⭐ (${
        tutor.totalReviews
      } reviews)</p>
                <p><strong>Description:</strong> ${tutor.description}</p>
                <p><strong>Subjects:</strong> ${tutor.subjects
                  .map((s) => s.name)
                  .join(", ")}</p>
                <p><strong>Completed Sessions:</strong> ${
                  tutor.completedSessions
                }</p>
                <p><strong>Member Since:</strong> ${new Date(
                  tutor.joinedDate
                ).toLocaleDateString()}</p>
                <hr>
                <h5>Reviews</h5>
                <div id="tutorReviews"></div>
            `;

      // Load and display reviews
      loadTutorReviews(tutorId);
      tutorDetailsModal.show();
    }
  } catch (error) {
    console.error("Error loading tutor details:", error);
  }
}

async function loadTutorReviews(tutorId) {
  try {
    const response = await fetch(`${API_BASE_URL}/reviews/tutor/${tutorId}`);
    if (response.ok) {
      const reviews = await response.json();
      const container = document.getElementById("tutorReviews");

      if (reviews.length === 0) {
        container.innerHTML = '<p class="text-muted">No reviews yet.</p>';
        return;
      }

      container.innerHTML = reviews
        .map(
          (review) => `
                <div class="border-bottom pb-2 mb-2">
                    <strong>${review.studentInfo.name}</strong> - ${
            review.rating
          }⭐
                    <p class="mb-0">${review.comment}</p>
                    <small class="text-muted">${new Date(
                      review.createdAt
                    ).toLocaleDateString()}</small>
                </div>
            `
        )
        .join("");
    }
  } catch (error) {
    console.error("Error loading reviews:", error);
  }
}



======================================================================
// FILE: target\classes\static\index.html
======================================================================

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tutoring Platform</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="css/styles.css">
</head>

<body>
    <div id="app">
        <!-- Navigation -->
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark" id="mainNav" style="display: none;">
            <div class="container">
                <a class="navbar-brand" href="#">Tutoring Platform</a>
                <div class="navbar-nav ms-auto">
                    <span class="navbar-text me-3" id="userNameDisplay"></span>
                    <span class="navbar-text me-3" id="balanceDisplay"></span>
                    <!-- Notification bell -->
                    <div class="dropdown me-3">
                        <button class="btn btn-outline-light position-relative" id="notificationBell"
                            data-bs-toggle="dropdown">
                            <i class="bi bi-bell"></i>
                            <span
                                class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                                id="notificationCount" style="display: none;">
                                0
                            </span>
                        </button>
                        <div class="dropdown-menu dropdown-menu-end" id="notificationDropdown" style="width: 350px;">
                            <h6 class="dropdown-header">Notifications</h6>
                            <div id="notificationList" style="max-height: 400px; overflow-y: auto;">
                                <!-- Notifications will be populated here -->
                            </div>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item text-center" href="#" id="markAllReadBtn">Mark all as read</a>
                        </div>
                    </div>
                    <button class="btn btn-outline-light" id="logoutBtn">Logout</button>
                </div>
            </div>
        </nav>

        <!-- Login/Signup View -->
        <div id="authView" class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <ul class="nav nav-tabs mb-3">
                                <li class="nav-item">
                                    <a class="nav-link active" id="loginTab" href="#">Login</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="signupTab" href="#">Sign Up</a>
                                </li>
                            </ul>

                            <!-- Login Form -->
                            <form id="loginForm">
                                <div class="mb-3">
                                    <label for="loginEmail" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="loginEmail" required>
                                </div>
                                <div class="mb-3">
                                    <label for="loginPassword" class="form-label">Password</label>
                                    <input type="password" class="form-control" id="loginPassword" required>
                                </div>
                                <button type="submit" class="btn btn-primary">Login</button>
                                <div class="alert alert-danger mt-3" id="loginError" style="display: none;"></div>
                            </form>

                            <!-- Signup Form -->
                            <form id="signupForm" style="display: none;">
                                <div class="mb-3">
                                    <label for="signupUserType" class="form-label">I am a</label>
                                    <select class="form-control" id="signupUserType" required>
                                        <option value="">Select...</option>
                                        <option value="STUDENT">Student</option>
                                        <option value="TUTOR">Tutor</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="signupName" class="form-label">Name</label>
                                    <input type="text" class="form-control" id="signupName" required>
                                </div>
                                <div class="mb-3">
                                    <label for="signupEmail" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="signupEmail" required>
                                    <div class="invalid-feedback">Please enter a valid email address</div>
                                </div>
                                <div class="mb-3">
                                    <label for="signupPassword" class="form-label">Password</label>
                                    <input type="password" class="form-control" id="signupPassword" required>
                                    <div class="invalid-feedback">Password must be at least 8 characters</div>
                                    <small id="passwordStrength" class="form-text"></small>
                                </div>
                                <div class="mb-3">
                                    <label for="signupTimeZone" class="form-label">Time Zone</label>
                                    <select class="form-control" id="signupTimeZone" required>
                                        <option value="">Select timezone...</option>
                                        <option value="America/New_York">Eastern Time</option>
                                        <option value="America/Chicago">Central Time</option>
                                        <option value="America/Denver">Mountain Time</option>
                                        <option value="America/Los_Angeles">Pacific Time</option>
                                        <option value="Europe/London">London</option>
                                        <option value="Europe/Paris">Paris</option>
                                        <option value="Asia/Tokyo">Tokyo</option>
                                    </select>
                                </div>
                                <div id="tutorFields" style="display: none;">
                                    <div class="mb-3">
                                        <label for="signupHourlyRate" class="form-label">Hourly Rate ($)</label>
                                        <input type="number" class="form-control" id="signupHourlyRate" min="1"
                                            step="0.01">
                                    </div>
                                    <div class="mb-3">
                                        <label for="signupDescription" class="form-label">Description</label>
                                        <textarea class="form-control" id="signupDescription" rows="3"></textarea>
                                    </div>
                                </div>
                                <button type="submit" class="btn btn-primary">Sign Up</button>
                                <div class="alert alert-danger mt-3" id="signupError" style="display: none;"></div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Student Dashboard View -->
        <div id="studentDashboard" class="container mt-5" style="display: none;">
            <h2>Your Dashboard</h2>
            <div class="row mt-4">
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Profile</h5>
                            <div class="text-center mb-3">
                                <img id="studentProfilePic" src="/api/files/default-avatar" alt="Profile"
                                    class="profile-picture-preview">
                            </div>
                            <p>Name: <span id="studentName"></span></p>
                            <p>Balance: $<span id="studentBalance"></span></p>
                            <button class="btn btn-sm btn-primary" id="addFundsBtn">Add Funds</button>
                            <button class="btn btn-sm btn-secondary" id="editStudentProfileBtn">Edit Profile</button>
                        </div>
                    </div>
                    <div class="card mt-3">
                        <div class="card-body">
                            <h5 class="card-title">Statistics</h5>
                            <p>Total Sessions: <span id="totalSessions"></span></p>
                            <p>Completed: <span id="completedSessions"></span></p>
                            <p>Upcoming: <span id="upcomingSessions"></span></p>
                        </div>
                    </div>
                </div>
                <div class="col-md-9">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Actions</h5>
                            <button class="btn btn-primary" id="findTutorBtn">Find a Tutor</button>
                            <button class="btn btn-secondary" id="viewStudentBookingsBtn">My Bookings</button>
                        </div>
                    </div>
                    <div class="card mt-3">
                        <div class="card-body">
                            <h5 class="card-title">Upcoming Sessions</h5>
                            <div id="upcomingBookingsList"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tutor Dashboard View -->
        <div id="tutorDashboard" class="container mt-5" style="display: none;">
            <h2>Your Dashboard</h2>
            <div class="row mt-4">
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Profile</h5>
                            <div class="text-center mb-3">
                                <img id="tutorProfilePic" src="/api/files/default-avatar" alt="Profile"
                                    class="profile-picture-preview">
                            </div>
                            <p>Name: <span id="tutorName"></span></p>
                            <p>Rate: $<span id="tutorRate"></span>/hr</p>
                            <p>Rating: <span id="tutorRating"></span></p>
                            <p>Earnings: $<span id="tutorEarnings"></span></p>
                            <button class="btn btn-sm btn-secondary" id="editTutorProfileBtn">Edit Profile</button>
                        </div>
                    </div>
                    <div class="card mt-3">
                        <div class="card-body">
                            <h5 class="card-title">Statistics</h5>
                            <p>Total Sessions: <span id="tutorTotalSessions"></span></p>
                            <p>Completed: <span id="tutorCompletedSessions"></span></p>
                            <p>This Month: $<span id="thisMonthEarnings"></span></p>
                            <p>Reviews: <span id="totalReviews"></span></p>
                        </div>
                    </div>
                </div>
                <div class="col-md-9">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Actions</h5>
                            <button class="btn btn-primary" id="manageSubjectsBtn">Manage Subjects</button>
                            <button class="btn btn-secondary" id="manageAvailabilityBtn">Manage Availability</button>
                            <button class="btn btn-info" id="viewTutorBookingsBtn">My Sessions</button>
                        </div>
                    </div>
                    <div class="card mt-3">
                        <div class="card-body">
                            <h5 class="card-title">Today's Schedule</h5>
                            <div id="todaysScheduleList"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search Tutors View -->
        <div id="searchTutorsView" class="container mt-5" style="display: none;">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Find a Tutor</h2>
                <button class="btn btn-secondary" id="backFromSearchBtn">Back to Dashboard</button>
            </div>
            <div class="card mb-4">
                <div class="card-body">
                    <form id="searchForm">
                        <div class="row">
                            <div class="col-md-4">
                                <label for="searchSubject" class="form-label">Subject</label>
                                <select class="form-control" id="searchSubject">
                                    <option value="">All Subjects</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label for="minPrice" class="form-label">Min Price</label>
                                <input type="number" class="form-control" id="minPrice" min="0">
                            </div>
                            <div class="col-md-2">
                                <label for="maxPrice" class="form-label">Max Price</label>
                                <input type="number" class="form-control" id="maxPrice" min="0">
                            </div>
                            <div class="col-md-2">
                                <label for="minRating" class="form-label">Min Rating</label>
                                <input type="number" class="form-control" id="minRating" min="0" max="5" step="0.1">
                            </div>
                            <div class="col-md-2">
                                <label for="sortBy" class="form-label">Sort By</label>
                                <select class="form-control" id="sortBy">
                                    <option value="RATING">Rating</option>
                                    <option value="PRICE_LOW">Price: Low to High</option>
                                    <option value="PRICE_HIGH">Price: High to Low</option>
                                    <option value="REVIEWS">Most Reviews</option>
                                </select>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary mt-3">Search</button>
                    </form>
                </div>
            </div>
            <div id="searchResults"></div>
        </div>

        <!-- Booking Management View -->
        <div id="bookingManagementView" class="container mt-5" style="display: none;">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 id="bookingViewTitle">My Bookings</h2>
                <button class="btn btn-secondary" id="backFromBookingsBtn">Back to Dashboard</button>
            </div>
            <ul class="nav nav-tabs mb-3">
                <li class="nav-item">
                    <a class="nav-link active" id="upcomingTab" href="#">Upcoming</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="pastTab" href="#">Past</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="cancelledTab" href="#">Cancelled</a>
                </li>
            </ul>
            <div id="bookingsList"></div>
        </div>

        <!-- Subject Management View (Tutors) -->
        <div id="subjectManagementView" class="container mt-5" style="display: none;">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Manage Subjects</h2>
                <button class="btn btn-secondary" id="backFromSubjectsBtn">Back to Dashboard</button>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">My Subjects</h5>
                            <div id="mySubjectsList"></div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Available Subjects</h5>
                            <div id="availableSubjectsList"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Availability Management View (Tutors) -->
        <div id="availabilityManagementView" class="container mt-5" style="display: none;">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Manage Availability</h2>
                <button class="btn btn-secondary" id="backFromAvailabilityBtn">Back to Dashboard</button>
            </div>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Add Availability Slot</h5>
                    <form id="availabilityForm">
                        <div class="row">
                            <div class="col-md-3">
                                <label for="dayOfWeek" class="form-label">Day of Week</label>
                                <select class="form-control" id="dayOfWeek" required>
                                    <option value="MONDAY">Monday</option>
                                    <option value="TUESDAY">Tuesday</option>
                                    <option value="WEDNESDAY">Wednesday</option>
                                    <option value="THURSDAY">Thursday</option>
                                    <option value="FRIDAY">Friday</option>
                                    <option value="SATURDAY">Saturday</option>
                                    <option value="SUNDAY">Sunday</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="startTime" class="form-label">Start Time</label>
                                <input type="time" class="form-control" id="startTime" required>
                            </div>
                            <div class="col-md-3">
                                <label for="endTime" class="form-label">End Time</label>
                                <input type="time" class="form-control" id="endTime" required>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">&nbsp;</label>
                                <button type="submit" class="btn btn-primary d-block">Add Slot</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="card mt-3">
                <div class="card-body">
                    <h5 class="card-title">Current Availability</h5>
                    <div id="availabilityList"></div>
                </div>
            </div>
        </div>

        <!-- Profile Edit Modal -->
        <div class="modal fade" id="profileEditModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Profile</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger modal-error" style="display: none;"></div>
                        <form id="profileEditForm">
                            <div class="mb-3">
                                <label for="editName" class="form-label">Name</label>
                                <input type="text" class="form-control" id="editName">
                            </div>
                            <div class="mb-3">
                                <label for="editEmail" class="form-label">Email</label>
                                <input type="email" class="form-control" id="editEmail">
                            </div>
                            <div class="mb-3">
                                <label for="editCurrentPassword" class="form-label">Current Password (required for
                                    password change)</label>
                                <input type="password" class="form-control" id="editCurrentPassword">
                            </div>
                            <div class="mb-3">
                                <label for="editNewPassword" class="form-label">New Password</label>
                                <input type="password" class="form-control" id="editNewPassword">
                            </div>
                            <div class="mb-3">
                                <label for="editTimeZone" class="form-label">Time Zone</label>
                                <select class="form-control" id="editTimeZone">
                                    <option value="America/New_York">Eastern Time (UTC-5)</option>
                                    <option value="America/Chicago">Central Time (UTC-6)</option>
                                    <option value="America/Denver">Mountain Time (UTC-7)</option>
                                    <option value="America/Los_Angeles">Pacific Time (UTC-8)</option>
                                    <option value="Europe/London">London (UTC+0)</option>
                                    <option value="Europe/Paris">Paris (UTC+1)</option>
                                    <option value="Asia/Tokyo">Tokyo (UTC+9)</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="profilePictureUpload" class="form-label">Profile Picture</label>
                                <input type="file" class="form-control" id="profilePictureUpload" accept="image/*">
                                <small class="text-muted">Accepted formats: JPG, PNG (Max 5MB)</small>
                            </div>
                            <div id="tutorEditFields" style="display: none;">
                                <div class="mb-3">
                                    <label for="editHourlyRate" class="form-label">Hourly Rate ($)</label>
                                    <input type="number" class="form-control" id="editHourlyRate" min="1" step="0.01">
                                </div>
                                <div class="mb-3">
                                    <label for="editDescription" class="form-label">Description</label>
                                    <textarea class="form-control" id="editDescription" rows="3"></textarea>
                                    <small id="autoSaveIndicator" class="text-muted"></small>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="saveProfileBtn">Save Changes</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Add Funds Modal -->
        <div class="modal fade" id="addFundsModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add Funds</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger modal-error" style="display: none;"></div>
                        <form id="addFundsForm">
                            <div class="mb-3">
                                <label for="fundAmount" class="form-label">Amount ($)</label>
                                <input type="number" class="form-control" id="fundAmount" min="1" step="0.01" required>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="confirmAddFundsBtn">Add Funds</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Create Booking Modal -->
        <div class="modal fade" id="createBookingModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Book Session with <span id="bookingTutorName"></span></h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger modal-error" style="display: none;"></div>
                        <form id="createBookingForm">
                            <input type="hidden" id="bookingTutorId">
                            <div class="mb-3">
                                <label for="bookingSubject" class="form-label">Subject</label>
                                <select class="form-control" id="bookingSubject" required>
                                    <option value="">Select subject...</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="bookingDate" class="form-label">Date</label>
                                <input type="date" class="form-control" id="bookingDate" required min="">
                            </div>
                            <div class="mb-3">
                                <label for="bookingTime" class="form-label">Time</label>
                                <input type="time" class="form-control" id="bookingTime" required>
                            </div>
                            <div class="mb-3">
                                <label for="bookingDuration" class="form-label">Duration (hours)</label>
                                <input type="number" class="form-control" id="bookingDuration" min="1" max="4" value="1"
                                    required>
                            </div>
                            <p>Total Cost: $<span id="bookingTotalCost">0</span></p>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="confirmBookingBtn">Create Booking</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Review Modal -->
        <div class="modal fade" id="reviewModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Leave a Review</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger modal-error" style="display: none;"></div>
                        <form id="reviewForm">
                            <input type="hidden" id="reviewTutorId">
                            <div class="mb-3">
                                <label for="reviewRating" class="form-label">Rating</label>
                                <select class="form-control" id="reviewRating" required>
                                    <option value="">Select rating...</option>
                                    <option value="5">5 - Excellent</option>
                                    <option value="4">4 - Very Good</option>
                                    <option value="3">3 - Good</option>
                                    <option value="2">2 - Fair</option>
                                    <option value="1">1 - Poor</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="reviewComment" class="form-label">Comment</label>
                                <textarea class="form-control" id="reviewComment" rows="3" required></textarea>
                                <small class="text-muted">Minimum 50 characters required</small>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="submitReviewBtn">Submit Review</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tutor Details Modal -->
        <div class="modal fade" id="tutorDetailsModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Tutor Details</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div id="tutorDetailsContent"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Generic Confirmation Modal -->
        <div class="modal fade" id="confirmModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="confirmTitle">Confirm Action</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <p id="confirmMessage"></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" id="confirmCancelBtn">Cancel</button>
                        <button type="button" class="btn btn-warning" id="confirmActionBtn">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="loading-message mt-3">Loading...</p>
    </div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="toast" class="toast" role="alert">
            <div class="toast-header">
                <strong class="me-auto" id="toastTitle">Notification</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body" id="toastMessage"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="js/app.js"></script>
</body>

</html>



======================================================================
// FILE: target\classes\static\css\styles.css
======================================================================

/* CSS Variables for theming */
:root {
    --primary: #4f46e5;
    --primary-dark: #4338ca;
    --primary-light: #6366f1;
    --secondary: #10b981;
    --danger: #ef4444;
    --warning: #f59e0b;
    --gray-50: #f9fafb;
    --gray-100: #f3f4f6;
    --gray-200: #e5e7eb;
    --gray-300: #d1d5db;
    --gray-400: #9ca3af;
    --gray-500: #6b7280;
    --gray-600: #4b5563;
    --gray-700: #374151;
    --gray-800: #1f2937;
    --gray-900: #111827;
    --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    line-height: 1.6;
    color: var(--gray-900);
    background: var(--gray-50);
}

/* Override Bootstrap Navbar */
.navbar {
    background: white !important;
    box-shadow: var(--shadow);
    padding: 1rem 0;
}

.navbar-brand {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primary) !important;
    cursor: pointer;
    text-decoration: none;
}

.navbar-brand:hover {
    color: var(--primary-dark) !important;
}

.navbar-text,
#userNameDisplay {
    color: var(--gray-700) !important;
    font-weight: 500;
}

/* Remove balance/rate display */
#balanceDisplay {
    display: none;
}

/* Fix logout button visibility */
#logoutBtn {
    background: var(--primary);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
}

#logoutBtn:hover {
    background: var(--primary-dark);
    color: white;
}

/* Override Bootstrap Cards */
.card {
    background: white;
    border: none;
    border-radius: 8px;
    box-shadow: var(--shadow);
    margin-bottom: 1rem;
    transition: box-shadow 0.2s;
}

.card:hover {
    box-shadow: var(--shadow-lg);
}

.card-body {
    padding: 1.5rem;
}

.card-title {
    color: var(--gray-900);
    margin-bottom: 0.5rem;
}

/* Override Bootstrap Forms */
.form-label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--gray-700);
}

.form-control,
.form-select {
    width: 100%;
    padding: 0.5rem 0.75rem;
    border: 1px solid var(--gray-300);
    border-radius: 4px;
    font-size: 1rem;
    transition: border-color 0.2s, box-shadow 0.2s;
    background: white;
}

.form-control:focus,
.form-select:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
}

.form-control[type="date"],
.form-control[type="time"] {
    padding: 0.5rem 0.75rem;
}

textarea.form-control {
    resize: vertical;
    min-height: 100px;
}

/* Override Bootstrap Buttons */
.btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
    text-decoration: none;
    display: inline-block;
    text-align: center;
}

.btn:hover {
    transform: translateY(-1px);
    box-shadow: var(--shadow);
}

.btn:active {
    transform: translateY(0);
}

/* Unified button styling - primary for main actions */
.btn-primary,
.btn-success,
.btn-info {
    background: var(--primary);
    color: white;
}

.btn-primary:hover,
.btn-success:hover,
.btn-info:hover {
    background: var(--primary-dark);
    color: white;
}

.btn-secondary {
    background: var(--gray-200);
    color: var(--gray-700);
}

.btn-secondary:hover {
    background: var(--gray-300);
    color: var(--gray-700);
}

.btn-danger {
    background: var(--danger);
    color: white;
}

.btn-danger:hover {
    background: #dc2626;
    color: white;
}

.btn-outline-light {
    background: transparent;
    color: white;
    border: 1px solid white;
}

.btn-outline-light:hover {
    background: white;
    color: var(--primary);
}

.btn-sm {
    padding: 0.25rem 0.75rem;
    font-size: 0.875rem;
}

/* Override Bootstrap Nav Tabs */
.nav-tabs {
    border-bottom: 1px solid var(--gray-200);
}

.nav-tabs .nav-link {
    color: var(--gray-600);
    border: none;
    border-bottom: 2px solid transparent;
    padding: 0.5rem 1rem;
    font-weight: 500;
}

.nav-tabs .nav-link:hover {
    color: var(--primary);
    border-color: transparent;
}

.nav-tabs .nav-link.active {
    color: var(--primary);
    background: none;
    border-color: transparent;
    border-bottom-color: var(--primary);
}

/* Override Bootstrap Alerts */
.alert {
    border: none;
    border-radius: 4px;
    padding: 1rem;
}

.alert-danger {
    background: #fee2e2;
    color: var(--danger);
}

/* Override Bootstrap Modals */
.modal-content {
    border: none;
    border-radius: 8px;
}

.modal-header {
    border-bottom: 1px solid var(--gray-200);
    padding: 1.5rem;
}

.modal-body {
    padding: 1.5rem;
}

.modal-footer {
    border-top: 1px solid var(--gray-200);
    padding: 1rem 1.5rem;
}

/* Auth View Specific */
#authView .card {
    max-width: 450px;
    margin: 0 auto;
}

/* Dashboard Components */
h2 {
    color: var(--gray-900);
    font-size: 1.875rem;
    margin-bottom: 1.5rem;
}

/* Tutor Search Results */
.tutor-card {
    display: flex;
    gap: 1rem;
    align-items: start;
}

.tutor-info h5 {
    color: var(--gray-900);
    margin-bottom: 0.25rem;
}

.tutor-meta {
    display: flex;
    gap: 1rem;
    margin: 0.5rem 0;
    font-size: 0.875rem;
    color: var(--gray-600);
}

/* Booking Cards */
.booking-status {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 500;
}

.booking-status.PENDING {
    background: #fef3c7;
    color: #d97706;
}

.booking-status.CONFIRMED {
    background: #d1fae5;
    color: #065f46;
}

.booking-status.COMPLETED {
    background: #ddd6fe;
    color: #5b21b6;
}

.booking-status.CANCELLED {
    background: #fee2e2;
    color: var(--danger);
}

/* Subject Tags */
.subject-tag {
    background: var(--gray-100);
    color: var(--gray-700);
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    display: inline-block;
    margin-right: 0.5rem;
    margin-bottom: 0.5rem;
}

/* Availability Management */
.availability-slot {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: var(--gray-100);
    border-radius: 4px;
    margin-bottom: 0.5rem;
}

/* Stats Display */
.stat-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--primary);
}

/* Review Display */
.review-card {
    border-left: 4px solid var(--primary);
    padding-left: 1rem;
    margin-bottom: 1rem;
}

.review-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
}

.review-date {
    color: var(--gray-500);
    font-size: 0.875rem;
}

/* Empty States */
.empty-state {
    text-align: center;
    padding: 3rem;
    color: var(--gray-500);
}

/* Rating Stars */
.rating {
    color: var(--warning);
    font-size: 1.2rem;
}

.star {
    color: var(--warning);
    font-size: 1.2rem;
}

.star.empty {
    color: var(--gray-300);
}

.star.half::after {
    content: '★';
    color: var(--warning);
    position: absolute;
    overflow: hidden;
    width: 50%;
}

.not-rated {
    color: var(--gray-500);
    font-style: italic;
}

/* Cost Display */
#bookingTotalCost {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--primary);
}

/* Loading States */
.spinner {
    border: 3px solid var(--gray-200);
    border-top: 3px solid var(--primary);
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 2rem auto;
}

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .container {
        padding: 0 1rem;
    }

    .card-body {
        padding: 1rem;
    }

    .btn {
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
    }

    h2 {
        font-size: 1.5rem;
    }

    .modal-content {
        margin: 1rem;
    }
}

/* Utility Classes to Override Bootstrap */
.text-muted {
    color: var(--gray-500) !important;
}

.text-center {
    text-align: center;
}

.text-end {
    text-align: right;
}

.d-flex {
    display: flex;
}

.justify-content-between {
    justify-content: space-between;
}

.align-items-center {
    align-items: center;
}

.mb-0 {
    margin-bottom: 0;
}

.mb-1 {
    margin-bottom: 0.25rem;
}

.mb-2 {
    margin-bottom: 0.5rem;
}

.mb-3 {
    margin-bottom: 1rem;
}

.mb-4 {
    margin-bottom: 1.5rem;
}

.mt-2 {
    margin-top: 0.5rem;
}

.mt-3 {
    margin-top: 1rem;
}

.mt-4 {
    margin-top: 1.5rem;
}

.mt-5 {
    margin-top: 3rem;
}

/* Fix Bootstrap's default link colors */
a {
    color: var(--primary);
    text-decoration: none;
}

a:hover {
    color: var(--primary-dark);
}

/* Profile Picture Placeholder */
.profile-picture {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background: var(--gray-200);
    object-fit: cover;
}

/* Session Time Display */
.session-time {
    font-size: 0.875rem;
    color: var(--gray-600);
}

/* Price Display */
.price-display {
    color: var(--secondary);
    font-weight: 600;
}

/* Search Form Specific */
#searchForm .row {
    align-items: end;
}

#searchForm .btn {
    margin-top: 0.5rem;
}

/* Subject List Items */
.subject-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    border-bottom: 1px solid var(--gray-100);
}

.subject-item:last-child {
    border-bottom: none;
}

/* Upcoming Sessions List */
.session-item {
    padding: 0.75rem;
    border-left: 3px solid var(--primary);
    background: var(--gray-50);
    margin-bottom: 0.5rem;
    border-radius: 0 4px 4px 0;
}

/* Fix spacing in booking details */
.booking-details p {
    margin-bottom: 0.5rem;
}

.booking-details p:last-child {
    margin-bottom: 0;
}

.toast-success {
    border-left: 4px solid var(--secondary);
}

.toast-danger {
    border-left: 4px solid var(--danger);
}

.toast-info {
    border-left: 4px solid var(--primary);
}

.empty-state {
    text-align: center;
    padding: 4rem 2rem;
    color: var(--gray-500);
}

.empty-state i {
    font-size: 4rem;
    color: var(--gray-300);
    display: block;
    margin-bottom: 1rem;
}

.empty-state h5 {
    color: var(--gray-700);
    margin-bottom: 0.5rem;
}

.empty-state p {
    margin-bottom: 1.5rem;
}

#loadingOverlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.9);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

.loading-message {
    color: var(--gray-700);
    font-weight: 500;
}

/* Notification Dropdown Styles */
.notification-item {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid var(--gray-100);
    cursor: pointer;
    transition: background-color 0.2s;
}

.notification-item:hover {
    background-color: var(--gray-50);
}

.notification-item.unread {
    background-color: var(--primary-light);
    background-color: rgba(99, 102, 241, 0.05);
}

.notification-item:last-child {
    border-bottom: none;
}

#notificationBell {
    position: relative;
    background: transparent;
    border: 1px solid rgba(255, 255, 255, 0.5);
    color: var(--gray-700);
    padding: 0.5rem 0.75rem;
}

#notificationBell:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.8);
}

.badge {
    font-size: 0.7rem;
    padding: 0.2rem 0.4rem;
}

#notificationDropdown {
    box-shadow: var(--shadow-lg);
    border: none;
    border-radius: 8px;
    margin-top: 0.5rem;
}

.dropdown-header {
    background: var(--gray-50);
    padding: 0.75rem 1rem;
    font-weight: 600;
    color: var(--gray-900);
}

/* File Upload Styles */
input[type="file"] {
    font-size: 0.9rem;
}

input[type="file"]::-webkit-file-upload-button {
    background: var(--primary);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.875rem;
    margin-right: 1rem;
}

input[type="file"]::-webkit-file-upload-button:hover {
    background: var(--primary-dark);
}

/* Profile Picture Preview */
.profile-picture-preview {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    object-fit: cover;
    border: 3px solid var(--gray-200);
    margin-bottom: 1rem;
}



======================================================================
// FILE: target\classes\static\js\app.js
======================================================================

// Global state management
const state = {
  currentUser: null,
  currentView: "auth",
};

// API Base URL
const API_BASE_URL = "/api";

// Bootstrap modal instances
let profileEditModal;
let addFundsModal;
let createBookingModal;
let reviewModal;
let tutorDetailsModal;

// Loading state management
const loadingState = {
  isLoading: false,
  loadingMessage: ''
};

// Notification polling interval
let notificationInterval;

// Initialize the application
document.addEventListener("DOMContentLoaded", () => {
  initializeModals();
  initializeEventListeners();
  initializeTimezoneSelects();
  checkAuthState();
});

// Initialize Bootstrap modals
function initializeModals() {
  profileEditModal = new bootstrap.Modal(
    document.getElementById("profileEditModal")
  );
  addFundsModal = new bootstrap.Modal(document.getElementById("addFundsModal"));
  createBookingModal = new bootstrap.Modal(
    document.getElementById("createBookingModal")
  );
  reviewModal = new bootstrap.Modal(document.getElementById("reviewModal"));
  tutorDetailsModal = new bootstrap.Modal(
    document.getElementById("tutorDetailsModal")
  );
}

// Initialize all event listeners
function initializeEventListeners() {
  // Auth listeners
  document.getElementById("loginTab").addEventListener("click", showLoginForm);
  document
    .getElementById("signupTab")
    .addEventListener("click", showSignupForm);
  document.getElementById("loginForm").addEventListener("submit", handleLogin);
  document
    .getElementById("signupForm")
    .addEventListener("submit", handleSignup);
  document
    .getElementById("signupUserType")
    .addEventListener("change", toggleTutorFields);
  document.getElementById("logoutBtn").addEventListener("click", handleLogout);

  // Logo click to go to dashboard
  document.querySelector(".navbar-brand").addEventListener("click", () => {
    if (state.currentUser) {
      showDashboard();
    }
  });

  // Student dashboard listeners
  document
    .getElementById("addFundsBtn")
    .addEventListener("click", showAddFundsModal);
  document
    .getElementById("editStudentProfileBtn")
    .addEventListener("click", showEditProfileModal);
  document
    .getElementById("findTutorBtn")
    .addEventListener("click", showSearchTutors);
  document
    .getElementById("viewStudentBookingsBtn")
    .addEventListener("click", showStudentBookings);
  document
    .getElementById("confirmAddFundsBtn")
    .addEventListener("click", handleAddFunds);

  // Tutor dashboard listeners
  document
    .getElementById("editTutorProfileBtn")
    .addEventListener("click", showEditProfileModal);
  document
    .getElementById("manageSubjectsBtn")
    .addEventListener("click", showSubjectManagement);
  document
    .getElementById("manageAvailabilityBtn")
    .addEventListener("click", showAvailabilityManagement);
  document
    .getElementById("viewTutorBookingsBtn")
    .addEventListener("click", showTutorBookings);

  // Search listeners
  document
    .getElementById("backFromSearchBtn")
    .addEventListener("click", backToDashboard);
  document
    .getElementById("searchForm")
    .addEventListener("submit", handleSearch);

  // Booking management listeners
  document
    .getElementById("backFromBookingsBtn")
    .addEventListener("click", backToDashboard);
  document
    .getElementById("upcomingTab")
    .addEventListener("click", () => showBookingTab("upcoming"));
  document
    .getElementById("pastTab")
    .addEventListener("click", () => showBookingTab("past"));
  document
    .getElementById("cancelledTab")
    .addEventListener("click", () => showBookingTab("cancelled"));

  // Subject management listeners
  document
    .getElementById("backFromSubjectsBtn")
    .addEventListener("click", backToDashboard);

  // Availability management listeners
  document
    .getElementById("backFromAvailabilityBtn")
    .addEventListener("click", backToDashboard);
  document
    .getElementById("availabilityForm")
    .addEventListener("submit", handleAddAvailability);

  // Modal listeners
  document
    .getElementById("saveProfileBtn")
    .addEventListener("click", handleUpdateProfile);
  document
    .getElementById("confirmBookingBtn")
    .addEventListener("click", handleCreateBooking);
  document
    .getElementById("submitReviewBtn")
    .addEventListener("click", handleSubmitReview);
  document
    .getElementById("bookingDuration")
    .addEventListener("input", updateBookingCost);

  // Notification listeners
  document.getElementById('markAllReadBtn').addEventListener('click', markAllNotificationsRead);

  // Event delegation for dynamically created content

  // Search results event delegation
  document.getElementById("searchResults").addEventListener("click", (e) => {
    if (e.target.classList.contains("book-tutor-btn")) {
      const tutorId = e.target.dataset.tutorId;
      const tutorName = e.target.dataset.tutorName;
      const hourlyRate = parseFloat(e.target.dataset.hourlyRate);
      bookTutor(tutorId, tutorName, hourlyRate);
    } else if (e.target.classList.contains("view-tutor-btn")) {
      const tutorId = e.target.dataset.tutorId;
      viewTutorDetails(tutorId);
    }
  });

  // Bookings list event delegation
  document.getElementById("bookingsList").addEventListener("click", (e) => {
    if (e.target.classList.contains("confirm-booking-btn")) {
      const bookingId = e.target.dataset.bookingId;
      confirmBooking(bookingId);
    } else if (e.target.classList.contains("cancel-booking-btn")) {
      const bookingId = e.target.dataset.bookingId;
      cancelBooking(bookingId);
    } else if (e.target.classList.contains("complete-booking-btn")) {
      const bookingId = e.target.dataset.bookingId;
      completeBooking(bookingId);
    } else if (e.target.classList.contains("review-tutor-btn")) {
      const tutorId = e.target.dataset.tutorId;
      showReviewModal(tutorId);
    }
  });

  // Subject management event delegation
  document.getElementById("mySubjectsList").addEventListener("click", (e) => {
    if (e.target.classList.contains("remove-subject-btn")) {
      const subjectId = e.target.dataset.subjectId;
      removeSubject(subjectId);
    }
  });

  document
    .getElementById("availableSubjectsList")
    .addEventListener("click", (e) => {
      if (e.target.classList.contains("add-subject-btn")) {
        const subjectId = e.target.dataset.subjectId;
        addSubject(subjectId);
      }
    });

  // Availability management event delegation
  document.getElementById("availabilityList").addEventListener("click", (e) => {
    if (e.target.classList.contains("remove-availability-btn")) {
      const dayOfWeek = e.target.dataset.dayOfWeek;
      const startTime = e.target.dataset.startTime;
      const endTime = e.target.dataset.endTime;
      removeAvailability(dayOfWeek, startTime, endTime);
    }
  });

  // Form validation listeners
  addFormValidationListeners();

  // Keyboard shortcuts
  addKeyboardShortcuts();

  // Auto-save listeners
  addAutoSaveListeners();
}

// Initialize timezone selects
function initializeTimezoneSelects() {
  // This function is called but not implemented in the original code
  // You can leave it empty if timezones are hardcoded in HTML
}

// Loading overlay functions
function showLoading(message = 'Loading...') {
  loadingState.isLoading = true;
  loadingState.loadingMessage = message;
  
  const overlay = document.getElementById('loadingOverlay');
  if (overlay) {
    overlay.querySelector('.loading-message').textContent = message;
    overlay.style.display = 'flex';
  }
}

function hideLoading() {
  loadingState.isLoading = false;
  const overlay = document.getElementById('loadingOverlay');
  if (overlay) {
    overlay.style.display = 'none';
  }
}

// Notification functions
function startNotificationPolling() {
  // Initial load
  loadNotifications();
  
  // Poll every 30 seconds
  notificationInterval = setInterval(loadNotifications, 30000);
}

function stopNotificationPolling() {
  if (notificationInterval) {
    clearInterval(notificationInterval);
    notificationInterval = null;
  }
}

async function loadNotifications() {
  if (!state.currentUser) return;
  
  try {
    const response = await fetch(`${API_BASE_URL}/notifications/user/${state.currentUser.id}/unread`);
    if (response.ok) {
      const data = await response.json();
      updateNotificationUI(data);
    }
  } catch (error) {
    console.error("Error loading notifications:", error);
  }
}

function updateNotificationUI(data) {
  const countBadge = document.getElementById('notificationCount');
  const notificationList = document.getElementById('notificationList');
  
  // Update count
  if (data.unreadCount > 0) {
    countBadge.textContent = data.unreadCount > 9 ? '9+' : data.unreadCount;
    countBadge.style.display = 'inline-block';
  } else {
    countBadge.style.display = 'none';
  }
  
  // Update notification list
  notificationList.innerHTML = '';
  
  if (data.notifications.length === 0) {
    notificationList.innerHTML = '<div class="dropdown-item text-muted">No new notifications</div>';
    return;
  }
  
  data.notifications.forEach(notification => {
    const notifElement = document.createElement('div');
    notifElement.className = `dropdown-item notification-item ${!notification.read ? 'unread' : ''}`;
    notifElement.innerHTML = `
      <div class="d-flex justify-content-between align-items-start">
        <div>
          <h6 class="mb-1">${notification.title}</h6>
          <p class="mb-0 small">${notification.message}</p>
          <small class="text-muted">${formatTimeAgo(notification.createdAt)}</small>
        </div>
        ${notification.actionUrl ? `<i class="bi bi-chevron-right"></i>` : ''}
      </div>
    `;
    
    notifElement.addEventListener('click', () => handleNotificationClick(notification));
    notificationList.appendChild(notifElement);
  });
}

async function handleNotificationClick(notification) {
  // Mark as read
  try {
    await fetch(`${API_BASE_URL}/notifications/${notification.id}/read`, {
      method: 'PUT'
    });
    
    // Reload notifications
    loadNotifications();
    
    // Navigate if action URL exists
    if (notification.actionUrl) {
      // Handle navigation based on URL
      if (notification.actionUrl.includes('/bookings/')) {
        showBookingManagement();
      }
    }
  } catch (error) {
    console.error("Error marking notification as read:", error);
  }
}

async function markAllNotificationsRead() {
  try {
    await fetch(`${API_BASE_URL}/notifications/user/${state.currentUser.id}/read-all`, {
      method: 'PUT'
    });
    loadNotifications();
  } catch (error) {
    console.error("Error marking all notifications as read:", error);
  }
}

// Validation utilities
const validators = {
  email: (email) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  },
  
  password: (password) => {
    return password.length >= 8;
  },
  
  hourlyRate: (rate) => {
    return rate > 0 && rate <= 1000;
  },
  
  description: (desc) => {
    return desc && desc.trim().length >= 50 && desc.length <= 1000;
  }
};

function addFormValidationListeners() {
  // Add real-time validation
  document.getElementById('signupEmail').addEventListener('blur', function() {
    const email = this.value;
    const isValid = validators.email(email);
    this.classList.toggle('is-invalid', !isValid && email.length > 0);
  });

  document.getElementById('signupPassword').addEventListener('input', function() {
    const password = this.value;
    const isValid = validators.password(password);
    this.classList.toggle('is-invalid', !isValid && password.length > 0);
    
    // Show password strength
    const strengthIndicator = document.getElementById('passwordStrength');
    if (strengthIndicator) {
      const strength = calculatePasswordStrength(password);
      strengthIndicator.textContent = strength.message;
      strengthIndicator.className = `form-text ${strength.class}`;
    }
  });
}

function calculatePasswordStrength(password) {
  if (password.length < 8) return { message: 'Too short', class: 'text-danger' };
  
  let strength = 0;
  if (password.match(/[a-z]+/)) strength++;
  if (password.match(/[A-Z]+/)) strength++;
  if (password.match(/[0-9]+/)) strength++;
  if (password.match(/[$@#&!]+/)) strength++;
  
  if (strength < 2) return { message: 'Weak password', class: 'text-warning' };
  if (strength < 3) return { message: 'Good password', class: 'text-info' };
  return { message: 'Strong password', class: 'text-success' };
}

// Empty state component
function createEmptyState(type) {
  const emptyStates = {
    bookings: {
      icon: 'calendar-x',
      title: 'No bookings yet',
      message: 'Start by finding a tutor and booking your first session!',
      action: state.currentUser?.userType === 'Student' ? 
        '<button class="btn btn-primary" onclick="showSearchTutors()">Find a Tutor</button>' : ''
    },
    subjects: {
      icon: 'book',
      title: 'No subjects added',
      message: 'Add subjects you want to teach to start receiving bookings.',
      action: ''
    },
    notifications: {
      icon: 'bell-slash',
      title: 'No notifications',
      message: 'You\'re all caught up!',
      action: ''
    },
    search: {
      icon: 'search',
      title: 'No tutors found',
      message: 'Try adjusting your search filters or browse all tutors.',
      action: '<button class="btn btn-secondary" onclick="clearSearchFilters()">Clear Filters</button>'
    }
  };
  
  const stateConfig = emptyStates[type];
  return `
    <div class="empty-state">
      <i class="bi bi-${stateConfig.icon}"></i>
      <h5>${stateConfig.title}</h5>
      <p>${stateConfig.message}</p>
      ${stateConfig.action}
    </div>
  `;
}

// Toast notification utility
function showToast(title, message, type = 'info') {
  const toastEl = document.getElementById('toast');
  const toastTitle = document.getElementById('toastTitle');
  const toastMessage = document.getElementById('toastMessage');
  
  // Set content
  toastTitle.textContent = title;
  toastMessage.textContent = message;
  
  // Set color based on type
  toastEl.className = `toast toast-${type}`;
  
  // Show toast
  const toast = new bootstrap.Toast(toastEl);
  toast.show();
}

// Time formatting functions
function formatTimeAgo(dateString) {
  const date = new Date(dateString);
  const now = new Date();
  const seconds = Math.floor((now - date) / 1000);
  
  if (seconds < 60) return 'just now';
  const minutes = Math.floor(seconds / 60);
  if (minutes < 60) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
  const hours = Math.floor(minutes / 60);
  if (hours < 24) return `${hours} hour${hours > 1 ? 's' : ''} ago`;
  const days = Math.floor(hours / 24);
  if (days < 7) return `${days} day${days > 1 ? 's' : ''} ago`;
  const weeks = Math.floor(days / 7);
  return `${weeks} week${weeks > 1 ? 's' : ''} ago`;
}

// Rating display function
function displayRating(rating) {
  if (rating === 0) return '<span class="not-rated">Not rated yet</span>';

  const fullStars = Math.floor(rating);
  const hasHalfStar = rating % 1 >= 0.5;
  let stars = "";

  for (let i = 0; i < fullStars; i++) {
    stars += '<i class="bi bi-star-fill"></i>';
  }
  if (hasHalfStar) {
    stars += '<i class="bi bi-star-half"></i>';
  }

  // Add empty stars to complete 5
  const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
  for (let i = 0; i < emptyStars; i++) {
    stars += '<i class="bi bi-star"></i>';
  }

  return `${stars} <span class="rating-number">${rating.toFixed(1)}</span>`;
}

// Session countdown timer
function startSessionCountdown() {
  const updateCountdowns = () => {
    document.querySelectorAll('.session-countdown').forEach(el => {
      const sessionTime = new Date(el.dataset.sessionTime);
      const now = new Date();
      const diff = sessionTime - now;
      
      if (diff > 0) {
        const hours = Math.floor(diff / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        
        if (hours < 24) {
          el.textContent = `Starts in ${hours}h ${minutes}m`;
          el.classList.add('text-warning');
        } else {
          const days = Math.floor(hours / 24);
          el.textContent = `In ${days} day${days > 1 ? 's' : ''}`;
        }
      } else {
        el.textContent = 'Session started';
        el.classList.add('text-danger');
      }
    });
  };
  
  updateCountdowns();
  setInterval(updateCountdowns, 60000); // Update every minute
}

// Keyboard shortcuts
function addKeyboardShortcuts() {
  document.addEventListener('keydown', (e) => {
    if (!state.currentUser) return;
    
    // Ctrl/Cmd + K - Quick search
    if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
      e.preventDefault();
      if (state.currentUser.userType === 'Student') {
        showSearchTutors();
      }
    }
    
    // Escape - Close modals
    if (e.key === 'Escape') {
      const modals = document.querySelectorAll('.modal.show');
      modals.forEach(modal => {
        const modalInstance = bootstrap.Modal.getInstance(modal);
        if (modalInstance) modalInstance.hide();
      });
    }
  });
}

// Auto-save functionality
let autoSaveTimeout;

function addAutoSaveListeners() {
  document.getElementById('editDescription')?.addEventListener('input', function() {
    clearTimeout(autoSaveTimeout);
    const value = this.value;
    
    // Show saving indicator
    const indicator = document.getElementById('autoSaveIndicator');
    if (indicator) {
      indicator.textContent = 'Typing...';
      indicator.className = 'text-muted small';
    }
    
    autoSaveTimeout = setTimeout(() => {
      // Save to localStorage
      localStorage.setItem('draft_description', value);
      if (indicator) {
        indicator.textContent = 'Draft saved';
        indicator.className = 'text-success small';
      }
    }, 1000);
  });
}

// Confirmation dialog
function showConfirmDialog(title, message, confirmText = 'Confirm', type = 'warning') {
  return new Promise((resolve) => {
    const modal = new bootstrap.Modal(document.getElementById('confirmModal'));
    
    document.getElementById('confirmTitle').textContent = title;
    document.getElementById('confirmMessage').textContent = message;
    const confirmBtn = document.getElementById('confirmActionBtn');
    confirmBtn.textContent = confirmText;
    confirmBtn.className = `btn btn-${type}`;
    
    confirmBtn.onclick = () => {
      modal.hide();
      resolve(true);
    };
    
    document.getElementById('confirmCancelBtn').onclick = () => {
      modal.hide();
      resolve(false);
    };
    
    modal.show();
  });
}

// Check if user is already authenticated
function checkAuthState() {
  const savedUser = localStorage.getItem("currentUser");
  if (savedUser) {
    state.currentUser = JSON.parse(savedUser);
    showDashboard();
  } else {
    showAuthView();
  }
}

// View switching functions
function showAuthView() {
  hideAllViews();
  document.getElementById("authView").style.display = "block";
  document.getElementById("mainNav").style.display = "none";
}

function showDashboard() {
  hideAllViews();
  document.getElementById("mainNav").style.display = "block";
  document.getElementById("userNameDisplay").textContent =
    state.currentUser.name;

  // Start notification polling
  startNotificationPolling();

  if (state.currentUser.userType === "Student") {
    document.getElementById(
      "balanceDisplay"
    ).textContent = `Balance: ${state.currentUser.balance}`;
    showStudentDashboard();
  } else {
    document.getElementById(
      "balanceDisplay"
    ).textContent = `Rate: ${state.currentUser.hourlyRate}/hr`;
    showTutorDashboard();
  }
}

function showStudentDashboard() {
  document.getElementById("studentDashboard").style.display = "block";
  loadStudentDashboard();
}

function showTutorDashboard() {
  document.getElementById("tutorDashboard").style.display = "block";
  loadTutorDashboard();
}

function showSearchTutors() {
  hideAllViews();
  document.getElementById("searchTutorsView").style.display = "block";
  loadSubjectsForSearch();
}

function showStudentBookings() {
  state.currentView = "studentBookings";
  showBookingManagement();
}

function showTutorBookings() {
  state.currentView = "tutorBookings";
  showBookingManagement();
}

function showBookingManagement() {
  hideAllViews();
  document.getElementById("bookingManagementView").style.display = "block";
  document.getElementById("bookingViewTitle").textContent =
    state.currentView === "studentBookings" ? "My Bookings" : "My Sessions";
  showBookingTab("upcoming");
}

function showSubjectManagement() {
  hideAllViews();
  document.getElementById("subjectManagementView").style.display = "block";
  loadTutorSubjects();
}

function showAvailabilityManagement() {
  hideAllViews();
  document.getElementById("availabilityManagementView").style.display = "block";
  loadTutorAvailability();
}

function hideAllViews() {
  const views = [
    "authView",
    "studentDashboard",
    "tutorDashboard",
    "searchTutorsView",
    "bookingManagementView",
    "subjectManagementView",
    "availabilityManagementView",
  ];
  views.forEach(
    (view) => (document.getElementById(view).style.display = "none")
  );
}

function backToDashboard() {
  showDashboard();
}

// Auth form switching
function showLoginForm(e) {
  e.preventDefault();
  document.getElementById("loginForm").style.display = "block";
  document.getElementById("signupForm").style.display = "none";
  document.getElementById("loginTab").classList.add("active");
  document.getElementById("signupTab").classList.remove("active");
}

function showSignupForm(e) {
  e.preventDefault();
  document.getElementById("loginForm").style.display = "none";
  document.getElementById("signupForm").style.display = "block";
  document.getElementById("signupTab").classList.add("active");
  document.getElementById("loginTab").classList.remove("active");
}

function toggleTutorFields() {
  const userType = document.getElementById("signupUserType").value;
  document.getElementById("tutorFields").style.display =
    userType === "TUTOR" ? "block" : "none";
}

// Authentication handlers
async function handleLogin(e) {
  e.preventDefault();
  showLoading('Logging in...');
  
  const loginData = {
    email: document.getElementById("loginEmail").value,
    password: document.getElementById("loginPassword").value,
  };

  try {
    const response = await fetch(`${API_BASE_URL}/auth/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(loginData),
    });

    if (response.ok) {
      const userData = await response.json();
      state.currentUser = userData;
      localStorage.setItem("currentUser", JSON.stringify(userData));
      showDashboard();
    } else {
      const error = await response.text();
      document.getElementById("loginError").textContent = error;
      document.getElementById("loginError").style.display = "block";
    }
  } catch (error) {
    console.error("Login error:", error);
    document.getElementById("loginError").textContent = "Connection error";
    document.getElementById("loginError").style.display = "block";
  } finally {
    hideLoading();
  }
}

async function handleSignup(e) {
  e.preventDefault();
  showLoading('Creating account...');
  
  const signupData = {
    userType: document.getElementById("signupUserType").value,
    name: document.getElementById("signupName").value,
    email: document.getElementById("signupEmail").value,
    password: document.getElementById("signupPassword").value,
    timeZoneId: document.getElementById("signupTimeZone").value,
    hourlyRate:
      parseFloat(document.getElementById("signupHourlyRate").value) || 0,
    description: document.getElementById("signupDescription").value || "",
  };

  try {
    const response = await fetch(`${API_BASE_URL}/auth/signup`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(signupData),
    });

    if (response.ok) {
      const userData = await response.json();
      state.currentUser = userData;
      localStorage.setItem("currentUser", JSON.stringify(userData));
      showDashboard();
    } else {
      const error = await response.text();
      document.getElementById("signupError").textContent = error;
      document.getElementById("signupError").style.display = "block";
    }
  } catch (error) {
    console.error("Signup error:", error);
    document.getElementById("signupError").textContent = "Connection error";
    document.getElementById("signupError").style.display = "block";
  } finally {
    hideLoading();
  }
}

function handleLogout() {
  state.currentUser = null;
  localStorage.removeItem("currentUser");
  stopNotificationPolling();
  showAuthView();
}

// Dashboard loading functions
async function loadStudentDashboard() {
  try {
    const response = await fetch(
      `${API_BASE_URL}/dashboard/student/${state.currentUser.id}`
    );
    if (response.ok) {
      const dashboard = await response.json();

      // Update profile
      document.getElementById("studentName").textContent =
        dashboard.profile.name;
      document.getElementById("studentBalance").textContent =
        dashboard.profile.balance.toFixed(2);
      
      // Update profile picture
      if (dashboard.profile.profilePictureUrl) {
        document.getElementById("studentProfilePic").src = dashboard.profile.profilePictureUrl;
      }

      // Update stats
      document.getElementById("totalSessions").textContent =
        dashboard.stats.totalSessions;
      document.getElementById("completedSessions").textContent =
        dashboard.stats.completedSessions;
      document.getElementById("upcomingSessions").textContent =
        dashboard.stats.upcomingSessions;

      // Update upcoming bookings
      renderUpcomingBookings(
        dashboard.upcomingBookings,
        "upcomingBookingsList"
      );
    }
  } catch (error) {
    console.error("Error loading student dashboard:", error);
  }
}

async function loadTutorDashboard() {
  try {
    const response = await fetch(
      `${API_BASE_URL}/dashboard/tutor/${state.currentUser.id}`
    );
    if (response.ok) {
      const dashboard = await response.json();

      // Update profile
      document.getElementById("tutorName").textContent = dashboard.profile.name;
      document.getElementById("tutorRate").textContent =
        dashboard.profile.hourlyRate.toFixed(2);
      
      // Update profile picture
      if (dashboard.profile.profilePictureUrl) {
        document.getElementById("tutorProfilePic").src = dashboard.profile.profilePictureUrl;
      }

      // Update stats
      document.getElementById("tutorTotalSessions").textContent =
        dashboard.stats.totalSessions;
      document.getElementById("tutorCompletedSessions").textContent =
        dashboard.stats.completedSessions;
      document.getElementById("tutorRating").innerHTML = displayRating(
        dashboard.stats.averageRating
      );
      document.getElementById("tutorEarnings").textContent =
        dashboard.stats.totalEarnings.toFixed(2);
      document.getElementById("thisMonthEarnings").textContent =
        dashboard.stats.thisMonthEarnings.toFixed(2);
      document.getElementById("totalReviews").textContent =
        dashboard.stats.totalReviews;

      // Update today's schedule
      renderUpcomingBookings(dashboard.todaysSchedule, "todaysScheduleList");
    }
  } catch (error) {
    console.error("Error loading tutor dashboard:", error);
  }
}

// Search functionality
async function loadSubjectsForSearch() {
  try {
    const response = await fetch(`${API_BASE_URL}/subjects`);
    if (response.ok) {
      const data = await response.json();
      const select = document.getElementById("searchSubject");
      select.innerHTML = '<option value="">All Subjects</option>';

      data.subjects.forEach((category) => {
        category.subjects.forEach((subject) => {
          const option = document.createElement("option");
          option.value = subject.id;
          option.textContent = `${subject.name} (${category.category})`;
          select.appendChild(option);
        });
      });
    }
  } catch (error) {
    console.error("Error loading subjects:", error);
  }
}

async function handleSearch(e) {
  e.preventDefault();
  showLoading("Searching...");

  const searchData = {
    subjectId: document.getElementById("searchSubject").value || null,
    minPrice: parseFloat(document.getElementById("minPrice").value) || 0,
    maxPrice: parseFloat(document.getElementById("maxPrice").value) || 0,
    minRating: parseFloat(document.getElementById("minRating").value) || 0,
    sortBy: document.getElementById("sortBy").value,
    page: 0,
    pageSize: 20,
  };

  try {
    const response = await fetch(`${API_BASE_URL}/search/tutors`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(searchData),
    });

    if (response.ok) {
      const results = await response.json();
      renderSearchResults(results.results);
    }
  } catch (error) {
    console.error("Search error:", error);
  } finally {
    hideLoading();
  }
}

function renderSearchResults(tutors) {
  const container = document.getElementById("searchResults");
  container.innerHTML = "";

  if (tutors.length === 0) {
    container.innerHTML = createEmptyState("search");
    return;
  }

  tutors.forEach((tutor) => {
    const card = document.createElement("div");
    card.className = "card mb-3";
    card.innerHTML = `
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <h5 class="card-title">${tutor.name}</h5>
                        <p class="card-text">${tutor.shortDescription}</p>
                        <p>Rate: $${
                          tutor.hourlyRate
                            }/hr | Rating: ${tutor.rating.toFixed(1)} (${
      tutor.reviewCount
    } reviews)</p>
                        <p>Subjects: ${tutor.subjects
                          .map((s) => s.name)
                          .join(", ")}</p>
                    </div>
                    <div class="col-md-4 text-end">
                        <button class="btn btn-primary book-tutor-btn" 
                                data-tutor-id="${tutor.id}" 
                                data-tutor-name="${tutor.name}" 
                                data-hourly-rate="${
                                  tutor.hourlyRate
                                }">Book Session</button>
                        <button class="btn btn-secondary view-tutor-btn" 
                                data-tutor-id="${
                                  tutor.id
                                }">View Profile</button>
                    </div>
                </div>
            </div>
        `;
    container.appendChild(card);
  });
}

// Clear search filters
function clearSearchFilters() {
  document.getElementById("searchForm").reset();
  handleSearch(new Event("submit"));
}

// Booking management
async function showBookingTab(tab) {
  const userId = state.currentUser.id;
  const endpoint =
    state.currentView === "studentBookings"
      ? `${API_BASE_URL}/bookings/student/${userId}`
      : `${API_BASE_URL}/bookings/tutor/${userId}`;

  try {
    const response = await fetch(endpoint);
    if (response.ok) {
      const data = await response.json();
      const bookings =
        tab === "upcoming"
          ? data.upcomingBookings
          : tab === "past"
          ? data.pastBookings
          : data.cancelledBookings;

      renderBookings(bookings, tab);

      // Update tab active states
      document
        .querySelectorAll("#bookingManagementView .nav-link")
        .forEach((link) => {
          link.classList.remove("active");
        });
      document.getElementById(`${tab}Tab`).classList.add("active");
    }
  } catch (error) {
    console.error("Error loading bookings:", error);
  }
}

function renderBookings(bookings, tab) {
  const container = document.getElementById("bookingsList");
  container.innerHTML = "";

  if (bookings.length === 0) {
    container.innerHTML = createEmptyState("bookings");
    return;
  }

  bookings.forEach((booking) => {
    const card = document.createElement("div");
    card.className = "card mb-3";
    const dateTime = new Date(booking.dateTime).toLocaleString();

    card.innerHTML = `
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <h5 class="card-title">${booking.subject.name}</h5>
                        <p>With: ${
                          state.currentView === "studentBookings"
                            ? booking.tutor.name
                            : booking.student.name
                        }</p>
                        <p>Date: ${dateTime} | Duration: ${
      booking.durationHours
    } hour(s)</p>
                        <p>Total Cost: ${booking.totalCost} | Status: ${
      booking.status
    }</p>
                    </div>
                    <div class="col-md-4 text-end">
                        ${getBookingActions(booking, tab)}
                    </div>
                </div>
            </div>
        `;
    container.appendChild(card);
  });
}

function getBookingActions(booking, tab) {
  if (tab === "upcoming" && booking.status === "PENDING") {
    return `
            <button class="btn btn-success btn-sm confirm-booking-btn" data-booking-id="${booking.id}">Confirm & Pay</button>
            <button class="btn btn-danger btn-sm cancel-booking-btn" data-booking-id="${booking.id}">Cancel</button>
        `;
  } else if (tab === "upcoming" && booking.status === "CONFIRMED") {
    // Add complete button for tutors
    const completeButton =
      state.currentView === "tutorBookings" &&
      new Date(booking.dateTime) < new Date()
        ? `<button class="btn btn-primary btn-sm complete-booking-btn" data-booking-id="${booking.id}">Mark Complete</button>`
        : "";
    return `
      ${completeButton}
      <button class="btn btn-danger btn-sm cancel-booking-btn" data-booking-id="${booking.id}">Cancel</button>
    `;
  } else if (
    tab === "past" &&
    booking.status === "COMPLETED" &&
    state.currentView === "studentBookings"
  ) {
    return `<button class="btn btn-primary btn-sm review-tutor-btn" data-tutor-id="${booking.tutor.id}">Leave Review</button>`;
  }
  return "";
}

function renderUpcomingBookings(bookings, containerId) {
  const container = document.getElementById(containerId);
  container.innerHTML = "";

  if (bookings.length === 0) {
    container.innerHTML = '<p class="text-muted">No upcoming sessions.</p>';
    return;
  }

  bookings.forEach((booking) => {
    const dateTime = new Date(booking.dateTime);
    const div = document.createElement("div");
    div.className = "session-item";
    div.innerHTML = `
      <div class="d-flex justify-content-between align-items-start">
        <div>
          <strong>${booking.subject.name}</strong><br>
          With: ${
            state.currentUser.userType === "Student"
              ? booking.tutor.name
              : booking.student.name
          }<br>
          ${dateTime.toLocaleString()}
        </div>
        <small class="session-countdown" data-session-time="${
          booking.dateTime
        }"></small>
      </div>
    `;
    container.appendChild(div);
  });

  startSessionCountdown();
}

// Subject management
async function loadTutorSubjects() {
  try {
    // Load tutor's current subjects
    const tutorResponse = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}`
    );
    if (tutorResponse.ok) {
      const tutorData = await tutorResponse.json();
      renderMySubjects(tutorData.subjects);
    }

    // Load available subjects
    const availableResponse = await fetch(
      `${API_BASE_URL}/subjects/available/tutor/${state.currentUser.id}`
    );
    if (availableResponse.ok) {
      const availableSubjects = await availableResponse.json();
      renderAvailableSubjects(availableSubjects);
    }
  } catch (error) {
    console.error("Error loading subjects:", error);
  }
}

function renderMySubjects(subjects) {
  const container = document.getElementById("mySubjectsList");
  container.innerHTML = "";

  if (subjects.length === 0) {
    container.innerHTML = createEmptyState("subjects");
    return;
  }

  subjects.forEach((subject) => {
    const div = document.createElement("div");
    div.className = "d-flex justify-content-between align-items-center mb-2";
    div.innerHTML = `
            <span>${subject.name} (${subject.category})</span>
            <button class="btn btn-sm btn-danger remove-subject-btn" data-subject-id="${subject.id}">Remove</button>
        `;
    container.appendChild(div);
  });
}

function renderAvailableSubjects(subjects) {
  const container = document.getElementById("availableSubjectsList");
  container.innerHTML = "";

  if (subjects.length === 0) {
    container.innerHTML =
      '<p class="text-muted">All subjects already added.</p>';
    return;
  }

  subjects.forEach((subject) => {
    const div = document.createElement("div");
    div.className = "d-flex justify-content-between align-items-center mb-2";
    div.innerHTML = `
            <span>${subject.name} (${subject.category})</span>
            <button class="btn btn-sm btn-success add-subject-btn" data-subject-id="${subject.id}">Add</button>
        `;
    container.appendChild(div);
  });
}

async function addSubject(subjectId) {
  try {
    const response = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}/subjects`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ subjectId }),
      }
    );

    if (response.ok) {
      loadTutorSubjects();
      showToast("Success", "Subject added successfully", "success");
    }
  } catch (error) {
    console.error("Error adding subject:", error);
    showToast("Error", "Failed to add subject", "danger");
  }
}

async function removeSubject(subjectId) {
  try {
    const response = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}/subjects/${subjectId}`,
      {
        method: "DELETE",
      }
    );

    if (response.ok) {
      loadTutorSubjects();
      showToast("Success", "Subject removed successfully", "success");
    }
  } catch (error) {
    console.error("Error removing subject:", error);
    showToast("Error", "Failed to remove subject", "danger");
  }
}

// Availability management
async function loadTutorAvailability() {
  try {
    const response = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}/availability`
    );
    if (response.ok) {
      const availability = await response.json();
      renderAvailability(availability.regularSchedule);
    }
  } catch (error) {
    console.error("Error loading availability:", error);
  }
}

function renderAvailability(slots) {
  const container = document.getElementById("availabilityList");
  container.innerHTML = "";

  if (slots.length === 0) {
    container.innerHTML = '<p class="text-muted">No availability set.</p>';
    return;
  }

  const dayOrder = [
    "MONDAY",
    "TUESDAY",
    "WEDNESDAY",
    "THURSDAY",
    "FRIDAY",
    "SATURDAY",
    "SUNDAY",
  ];
  slots.sort(
    (a, b) => dayOrder.indexOf(a.dayOfWeek) - dayOrder.indexOf(b.dayOfWeek)
  );

  slots.forEach((slot) => {
    const div = document.createElement("div");
    div.className = "d-flex justify-content-between align-items-center mb-2";
    div.innerHTML = `
            <span>${slot.dayOfWeek}: ${slot.startTime} - ${slot.endTime}</span>
            <button class="btn btn-sm btn-danger remove-availability-btn" 
                    data-day-of-week="${slot.dayOfWeek}" 
                    data-start-time="${slot.startTime}" 
                    data-end-time="${slot.endTime}">Remove</button>
        `;
    container.appendChild(div);
  });
}

async function handleAddAvailability(e) {
  e.preventDefault();

  const data = {
    action: "ADD",
    dayOfWeek: document.getElementById("dayOfWeek").value,
    startTime: document.getElementById("startTime").value,
    endTime: document.getElementById("endTime").value,
  };

  try {
    const response = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}/availability`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      }
    );

    if (response.ok) {
      document.getElementById("availabilityForm").reset();
      loadTutorAvailability();
      showToast("Success", "Availability added successfully", "success");
    }
  } catch (error) {
    console.error("Error adding availability:", error);
    showToast("Error", "Failed to add availability", "danger");
  }
}

async function removeAvailability(dayOfWeek, startTime, endTime) {
  const data = {
    action: "REMOVE",
    dayOfWeek,
    startTime,
    endTime,
  };

  try {
    const response = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}/availability`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      }
    );

    if (response.ok) {
      loadTutorAvailability();
      showToast("Success", "Availability removed successfully", "success");
    }
  } catch (error) {
    console.error("Error removing availability:", error);
    showToast("Error", "Failed to remove availability", "danger");
  }
}

// Profile management
function showEditProfileModal() {
  if (state.currentUser.userType === "Student") {
    document.getElementById("tutorEditFields").style.display = "none";
  } else {
    document.getElementById("tutorEditFields").style.display = "block";

    // Restore draft for tutors
    const savedDescription = localStorage.getItem("draft_description");
    if (savedDescription) {
      document.getElementById("editDescription").value = savedDescription;
    }
  }
  profileEditModal.show();
}

async function handleUpdateProfile() {
  const updateData = {
    name: document.getElementById("editName").value || null,
    email: document.getElementById("editEmail").value || null,
    currentPassword:
      document.getElementById("editCurrentPassword").value || null,
    password: document.getElementById("editNewPassword").value || null,
    timeZoneId: document.getElementById("editTimeZone").value || null,
  };

  if (state.currentUser.userType === "Tutor") {
    updateData.hourlyRate =
      parseFloat(document.getElementById("editHourlyRate").value) || null;
    updateData.description =
      document.getElementById("editDescription").value || null;
  }

  const endpoint =
    state.currentUser.userType === "Student"
      ? `${API_BASE_URL}/students/${state.currentUser.id}`
      : `${API_BASE_URL}/tutors/${state.currentUser.id}`;

  try {
    const response = await fetch(endpoint, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updateData),
    });

    if (response.ok) {
      const updatedProfile = await response.json();

      // Handle profile picture upload if file selected
      const fileInput = document.getElementById("profilePictureUpload");
      if (fileInput.files.length > 0) {
        await uploadProfilePicture(fileInput.files[0]);
      }

      // Update current user data
      Object.assign(state.currentUser, updatedProfile);
      localStorage.setItem("currentUser", JSON.stringify(state.currentUser));
      profileEditModal.hide();
      showDashboard();
      showToast("Success", "Profile updated successfully", "success");
    }
  } catch (error) {
    console.error("Error updating profile:", error);
    showToast("Error", "Failed to update profile", "danger");
  }
}

// Profile picture upload
async function uploadProfilePicture(file) {
  const formData = new FormData();
  formData.append("file", file);
  formData.append("type", "profile");

  const endpoint =
    state.currentUser.userType === "Student"
      ? `${API_BASE_URL}/students/${state.currentUser.id}/profile-picture`
      : `${API_BASE_URL}/tutors/${state.currentUser.id}/profile-picture`;

  try {
    const response = await fetch(endpoint, {
      method: "POST",
      body: formData,
    });

    if (response.ok) {
      const result = await response.json();
      state.currentUser.profilePictureUrl = result.profilePictureUrl;
    }
  } catch (error) {
    console.error("Error uploading profile picture:", error);
  }
}

// Funds management
function showAddFundsModal() {
  addFundsModal.show();
}

async function handleAddFunds() {
  const amount = parseFloat(document.getElementById("fundAmount").value);

  try {
    const response = await fetch(
      `${API_BASE_URL}/students/${state.currentUser.id}/add-funds`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ amount }),
      }
    );

    if (response.ok) {
      const result = await response.json();
      state.currentUser.balance = result.value;
      localStorage.setItem("currentUser", JSON.stringify(state.currentUser));
      addFundsModal.hide();
      document.getElementById("addFundsForm").reset();
      loadStudentDashboard();
      showToast(
        "Success",
        `$${amount.toFixed(2)} added to your balance`,
        "success"
      );
    }
  } catch (error) {
    console.error("Error adding funds:", error);
    showToast("Error", "Failed to add funds", "danger");
  }
}

// Booking functions
async function bookTutor(tutorId, tutorName, hourlyRate) {
  document.getElementById("bookingTutorName").textContent = tutorName;
  document.getElementById("bookingTutorId").value = tutorId;

  // Set minimum date to today
  const today = new Date().toISOString().split("T")[0];
  document.getElementById("bookingDate").setAttribute("min", today);

  // Load tutor's subjects
  try {
    const response = await fetch(`${API_BASE_URL}/tutors/${tutorId}`);
    if (response.ok) {
      const tutorData = await response.json();
      const select = document.getElementById("bookingSubject");
      select.innerHTML = '<option value="">Select subject...</option>';

      tutorData.subjects.forEach((subject) => {
        const option = document.createElement("option");
        option.value = subject.id;
        option.textContent = subject.name;
        select.appendChild(option);
      });

      // Store hourly rate for cost calculation
      select.dataset.hourlyRate = hourlyRate;
      updateBookingCost();
    }
  } catch (error) {
    console.error("Error loading tutor subjects:", error);
  }

  createBookingModal.show();
}

function updateBookingCost() {
  const duration =
    parseInt(document.getElementById("bookingDuration").value) || 1;
  const hourlyRate =
    parseFloat(document.getElementById("bookingSubject").dataset.hourlyRate) ||
    0;
  const totalCost = duration * hourlyRate;
  document.getElementById("bookingTotalCost").textContent =
    totalCost.toFixed(2);
}

async function handleCreateBooking() {
  const bookingData = {
    studentId: state.currentUser.id,
    tutorId: document.getElementById("bookingTutorId").value,
    subjectId: document.getElementById("bookingSubject").value,
    dateTime: `${document.getElementById("bookingDate").value}T${
      document.getElementById("bookingTime").value
    }:00`,
    durationHours: parseInt(document.getElementById("bookingDuration").value),
  };

  try {
    const response = await fetch(`${API_BASE_URL}/bookings`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(bookingData),
    });

    if (response.ok) {
      createBookingModal.hide();
      document.getElementById("createBookingForm").reset();
      showToast(
        "Success",
        "Booking created! Please confirm and pay to secure your session.",
        "success"
      );
      showStudentBookings();
    } else {
      const error = await response.text();
      const errorDiv = document.querySelector(
        "#createBookingModal .modal-error"
      );
      if (errorDiv) {
        errorDiv.textContent = `Error: ${error}`;
        errorDiv.style.display = "block";
      }
    }
  } catch (error) {
    console.error("Error creating booking:", error);
    showToast("Error", "Failed to create booking", "danger");
  }
}

async function confirmBooking(bookingId) {
  try {
    const response = await fetch(
      `${API_BASE_URL}/bookings/${bookingId}/confirm`,
      {
        method: "POST",
      }
    );

    if (response.ok) {
      showToast(
        "Success",
        "Booking confirmed and payment processed!",
        "success"
      );
      showBookingTab("upcoming");
      loadStudentDashboard();
    } else {
      const error = await response.text();
      showToast("Error", `Failed to confirm booking: ${error}`, "danger");
    }
  } catch (error) {
    console.error("Error confirming booking:", error);
    showToast("Error", "Connection error. Please try again.", "danger");
  }
}

async function cancelBooking(bookingId) {
  const confirmed = await showConfirmDialog(
    "Cancel Booking",
    "Are you sure you want to cancel this booking? If you've already paid, you will receive a full refund.",
    "Yes, Cancel",
    "danger"
  );

  if (!confirmed) return;

  try {
    const response = await fetch(
      `${API_BASE_URL}/bookings/${bookingId}/cancel`,
      {
        method: "POST",
      }
    );

    if (response.ok) {
      showToast("Success", "Booking cancelled successfully!", "success");
      showBookingTab("upcoming");
    } else {
      const error = await response.text();
      showToast("Error", `Failed to cancel booking: ${error}`, "danger");
    }
  } catch (error) {
    console.error("Error cancelling booking:", error);
    showToast("Error", "Connection error. Please try again.", "danger");
  }
}

async function completeBooking(bookingId) {
  const confirmed = await showConfirmDialog(
    "Complete Session",
    "Mark this session as completed? This will release payment to you.",
    "Mark Complete",
    "success"
  );

  if (!confirmed) return;

  try {
    const response = await fetch(
      `${API_BASE_URL}/bookings/${bookingId}/complete`,
      {
        method: "POST",
      }
    );

    if (response.ok) {
      showToast("Success", "Session marked as completed!", "success");
      showBookingTab("upcoming");
      loadTutorDashboard(); // Refresh to update earnings
    } else {
      const error = await response.text();
      showToast("Error", `Failed to complete booking: ${error}`, "danger");
    }
  } catch (error) {
    console.error("Error completing booking:", error);
    showToast("Error", "Connection error. Please try again.", "danger");
  }
}

// Review functions
function showReviewModal(tutorId) {
  document.getElementById("reviewTutorId").value = tutorId;
  reviewModal.show();
}

async function handleSubmitReview() {
  const reviewData = {
    studentId: state.currentUser.id,
    tutorId: document.getElementById("reviewTutorId").value,
    rating: parseInt(document.getElementById("reviewRating").value),
    comment: document.getElementById("reviewComment").value,
  };

  try {
    const response = await fetch(`${API_BASE_URL}/reviews`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(reviewData),
    });

    if (response.ok) {
      reviewModal.hide();
      document.getElementById("reviewForm").reset();
      showToast("Success", "Review submitted successfully!", "success");
    } else {
      const error = await response.text();
      showToast("Error", `Failed to submit review: ${error}`, "danger");
    }
  } catch (error) {
    console.error("Error submitting review:", error);
    showToast("Error", "Connection error. Please try again.", "danger");
  }
}

// Tutor details
async function viewTutorDetails(tutorId) {
  try {
    const response = await fetch(`${API_BASE_URL}/tutors/${tutorId}`);
    if (response.ok) {
      const tutor = await response.json();

      const content = document.getElementById("tutorDetailsContent");
      content.innerHTML = `
                <h4>${tutor.name}</h4>
                <p><strong>Rate:</strong> ${tutor.hourlyRate}/hr</p>
                <p><strong>Rating:</strong> ${tutor.rating.toFixed(1)}⭐ (${
        tutor.totalReviews
      } reviews)</p>
                <p><strong>Description:</strong> ${tutor.description}</p>
                <p><strong>Subjects:</strong> ${tutor.subjects
                  .map((s) => s.name)
                  .join(", ")}</p>
                <p><strong>Completed Sessions:</strong> ${
                  tutor.completedSessions
                }</p>
                <p><strong>Member Since:</strong> ${new Date(
                  tutor.joinedDate
                ).toLocaleDateString()}</p>
                <hr>
                <h5>Reviews</h5>
                <div id="tutorReviews"></div>
            `;

      // Load and display reviews
      loadTutorReviews(tutorId);
      tutorDetailsModal.show();
    }
  } catch (error) {
    console.error("Error loading tutor details:", error);
  }
}

async function loadTutorReviews(tutorId) {
  try {
    const response = await fetch(`${API_BASE_URL}/reviews/tutor/${tutorId}`);
    if (response.ok) {
      const reviews = await response.json();
      const container = document.getElementById("tutorReviews");

      if (reviews.length === 0) {
        container.innerHTML = '<p class="text-muted">No reviews yet.</p>';
        return;
      }

      container.innerHTML = reviews
        .map(
          (review) => `
                <div class="border-bottom pb-2 mb-2">
                    <strong>${review.studentInfo.name}</strong> - ${
            review.rating
          }⭐
                    <p class="mb-0">${review.comment}</p>
                    <small class="text-muted">${new Date(
                      review.createdAt
                    ).toLocaleDateString()}</small>
                </div>
            `
        )
        .join("");
    }
  } catch (error) {
    console.error("Error loading reviews:", error);
  }
}



