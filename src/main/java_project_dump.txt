======================================================================
// FILE: java\com\tutoringplatform\TutoringPlatformApplication.java
======================================================================

package com.tutoringplatform;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;


@SpringBootApplication(exclude = {
        DataSourceAutoConfiguration.class,
        HibernateJpaAutoConfiguration.class
})
public class TutoringPlatformApplication {

    public static void main(String[] args) {
        SpringApplication.run(TutoringPlatformApplication.class, args);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\authentication\AuthenticationController.java
======================================================================

package com.tutoringplatform.authentication;

import com.tutoringplatform.authentication.exceptions.*;
import com.tutoringplatform.shared.dto.request.LoginRequest;
import com.tutoringplatform.shared.dto.request.SignupRequest;
import com.tutoringplatform.shared.dto.response.AuthResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/auth")
public class AuthenticationController {

    private final Logger logger = LoggerFactory.getLogger(AuthenticationController.class);
    private final AuthenticationService authenticationService;

    @Autowired
    public AuthenticationController(AuthenticationService authenticationService) {
        this.authenticationService = authenticationService;
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody @Valid LoginRequest request) throws InvalidCredentialsException {
        logger.debug("Login request received for email: {}", request.getEmail());
        AuthResponse response = authenticationService.login(request.getEmail(), request.getPassword());
        return ResponseEntity.ok(response);
    }

    @PostMapping("/signup")
    public ResponseEntity<?> signup(@RequestBody @Valid SignupRequest request) throws EmailAlreadyExistsException, InvalidTutorRegistrationException, InvalidTimezoneException {
        logger.debug("Signup request received for type {} email: {}", request.getUserType(), request.getEmail());
        AuthResponse response = authenticationService.signup(request);
        return ResponseEntity.ok(response);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\authentication\AuthenticationRepository.java
======================================================================

package com.tutoringplatform.authentication;

import com.tutoringplatform.user.student.Student;
import com.tutoringplatform.user.tutor.Tutor;
import com.tutoringplatform.user.User;
import com.tutoringplatform.user.student.IStudentRepository;
import com.tutoringplatform.user.tutor.ITutorRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class AuthenticationRepository implements IAuthenticationRepository {

    @Autowired
    private IStudentRepository studentRepository;

    @Autowired
    private ITutorRepository tutorRepository;

    @Override
    public User findByEmail(String email) {
        Student student = studentRepository.findByEmail(email);
        if (student != null)
            return student;

        return tutorRepository.findByEmail(email);
    }

    @Override
    public void saveUser(User user) {
        if (user instanceof Student) {
            studentRepository.save((Student) user);
        } else if (user instanceof Tutor) {
            tutorRepository.save((Tutor) user);
        } else {
            throw new IllegalArgumentException("Unknown user type");
        }
    }

    @Override
    public boolean emailExists(String email) {
        return findByEmail(email) != null;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\authentication\AuthenticationService.java
======================================================================

package com.tutoringplatform.authentication;

import com.tutoringplatform.authentication.exceptions.*;
import com.tutoringplatform.shared.dto.request.SignupRequest;
import com.tutoringplatform.shared.dto.response.AuthResponse;
import com.tutoringplatform.user.User;
import com.tutoringplatform.user.student.Student;
import com.tutoringplatform.user.tutor.Tutor;
import com.tutoringplatform.user.student.IStudentRepository;
import com.tutoringplatform.user.tutor.ITutorRepository;
import com.tutoringplatform.shared.factory.UserFactory;
import com.tutoringplatform.shared.util.DTOMapper;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.ZoneId;
import java.time.DateTimeException;

@Service
public class AuthenticationService {

    private final Logger logger = LoggerFactory.getLogger(AuthenticationService.class);

    private final IAuthenticationRepository authenticationRepository;
    private final IStudentRepository studentRepository;
    private final ITutorRepository tutorRepository;
    private final UserFactory userFactory;
    private final PasswordEncoder passwordEncoder;
    private final DTOMapper dtoMapper;

    @Autowired
    public AuthenticationService(
            IAuthenticationRepository authenticationRepository,
            IStudentRepository studentRepository,
            ITutorRepository tutorRepository,
            UserFactory userFactory,
            PasswordEncoder passwordEncoder,
            DTOMapper dtoMapper) {
        this.authenticationRepository = authenticationRepository;
        this.studentRepository = studentRepository;
        this.tutorRepository = tutorRepository;
        this.userFactory = userFactory;
        this.passwordEncoder = passwordEncoder;
        this.dtoMapper = dtoMapper;
    }

    public AuthResponse login(String email, String password) throws InvalidCredentialsException {
        logger.info("Logging in user with email: {}", email);

        if (email == null || email.trim().isEmpty()) {
            throw new IllegalArgumentException("Email cannot be empty");
        }

        if (password == null || password.trim().isEmpty()) {
            throw new IllegalArgumentException("Password cannot be empty");
        }

        // Find user by email
        User user = authenticationRepository.findByEmail(email.toLowerCase().trim());
        if (user == null) {
            logger.warn("Invalid credentials: user not found for email: {}", email);
            throw new InvalidCredentialsException();
        }

        // Verify password
        if (!passwordEncoder.matches(password, user.getPassword())) {
            logger.warn("Invalid credentials: password does not match for email: {}", email);
            throw new InvalidCredentialsException();
        }

        logger.info("Login successful for user: {} ", email);

        // Build response based on user type
        double balance = 0;
        double hourlyRate = 0;

        if (user instanceof Student) {
            balance = ((Student) user).getBalance();
        } else if (user instanceof Tutor) {
            hourlyRate = ((Tutor) user).getHourlyRate();
        }

        return dtoMapper.toAuthResponse(user, balance, hourlyRate);
    }

    @Transactional
    public AuthResponse signup(SignupRequest request) throws EmailAlreadyExistsException, InvalidTutorRegistrationException, InvalidTimezoneException {
        logger.info("Signing up user with email: {}", request.getEmail());

        validateSignupRequest(request);

        String normalizedEmail = request.getEmail().toLowerCase().trim();

        // Validate email doesn't exist
        if (authenticationRepository.emailExists(normalizedEmail)) {
            logger.warn("Email already exists: {}", normalizedEmail);
            throw new EmailAlreadyExistsException(normalizedEmail);
        }

        // Validate timezone
        ZoneId timeZone = parseTimezone(request.getTimeZoneId());

        User user;
        double balance = 0;
        double hourlyRate = 0;

        if ("STUDENT".equalsIgnoreCase(request.getUserType())) {
            user = createStudent(request, normalizedEmail, timeZone);
            balance = ((Student) user).getBalance();
            logger.info("Student created successfully: {}", user.getId());

        } else if ("TUTOR".equalsIgnoreCase(request.getUserType())) {
            validateTutorRegistration(request);
            user = createTutor(request, normalizedEmail, timeZone);
            hourlyRate = ((Tutor) user).getHourlyRate();
            logger.info("Tutor created successfully: {}", user.getId());
        } else {
            logger.warn("Invalid user type: {}", request.getUserType());
            throw new IllegalStateException("Invalid user type passed validation: " + request.getUserType());
        }

        return dtoMapper.toAuthResponse(user, balance, hourlyRate);
    }


    private void validateSignupRequest(SignupRequest request) {
    
        if (request == null) {
            throw new IllegalArgumentException("Signup request cannot be null");
        }
        if (request.getName() == null || request.getName().trim().isEmpty()) {
            throw new IllegalArgumentException("Name cannot be null or empty");
        }
        if (request.getEmail() == null || request.getEmail().trim().isEmpty()) {
            throw new IllegalArgumentException("Email cannot be null or empty");
        }
        if (request.getPassword() == null || request.getPassword().isEmpty()) {
            throw new IllegalArgumentException("Password cannot be null or empty");
        }
        if (request.getUserType() == null ||
                (!request.getUserType().equalsIgnoreCase("STUDENT") &&
                        !request.getUserType().equalsIgnoreCase("TUTOR"))) {
            throw new IllegalArgumentException("User type must be STUDENT or TUTOR");
        }

        // Basic email format check
        if (!request.getEmail().contains("@")) {
            throw new IllegalArgumentException("Invalid email format");
        }

        // Password strength check
        if (request.getPassword().length() < 8) {
            throw new IllegalArgumentException("Password must be at least 8 characters");
        }
    }

    private void validateTutorRegistration(SignupRequest request) throws InvalidTutorRegistrationException {
        if (request.getHourlyRate() <= 0) {
            throw new InvalidTutorRegistrationException("Hourly rate must be positive");
        }

        if (request.getHourlyRate() > 1000) {
            throw new InvalidTutorRegistrationException("Hourly rate cannot exceed $1000");
        }

        if (request.getDescription() == null || request.getDescription().trim().isEmpty()) {
            throw new InvalidTutorRegistrationException("Description is required for tutors");
        }

        if (request.getDescription().trim().length() < 50) {
            throw new InvalidTutorRegistrationException("Description must be at least 50 characters");
        }

        if (request.getDescription().length() > 1000) {
            throw new InvalidTutorRegistrationException("Description cannot exceed 1000 characters");
        }
    }

    private User createStudent(SignupRequest request, String normalizedEmail, ZoneId timeZone) {
        Student student = userFactory.createStudent(
            request.getName(),
            normalizedEmail,
            passwordEncoder.encode(request.getPassword()));
        student.setTimeZone(timeZone);
        studentRepository.save(student);

        logger.debug("Student created successfully: {}", student.getId());
        return student;
    }

    private User createTutor(SignupRequest request, String normalizedEmail, ZoneId timeZone) {
        Tutor tutor = userFactory.createTutor(
            request.getName(),
            normalizedEmail,
            passwordEncoder.encode(request.getPassword()),
            request.getHourlyRate(),
            request.getDescription());
        tutor.setTimeZone(timeZone);
        tutorRepository.save(tutor);

        logger.debug("Tutor created successfully: {}", tutor.getId());
        return tutor;
    }

    private ZoneId parseTimezone(String timezoneId) throws InvalidTimezoneException {
        if (timezoneId == null || timezoneId.trim().isEmpty()) {
            logger.debug("No timezone provided, using system default");
            return ZoneId.systemDefault();
        }

        try {
            return ZoneId.of(timezoneId);
        } catch (DateTimeException e) {
            logger.warn("Invalid timezone: {}", timezoneId);
            throw new InvalidTimezoneException(timezoneId);
        }
    }   
}



======================================================================
// FILE: java\com\tutoringplatform\authentication\IAuthenticationRepository.java
======================================================================

package com.tutoringplatform.authentication;

import com.tutoringplatform.user.User;

public interface IAuthenticationRepository {
    User findByEmail(String email);

    void saveUser(User user);

    boolean emailExists(String email);
}



======================================================================
// FILE: java\com\tutoringplatform\authentication\exceptions\AuthenticationException.java
======================================================================

package com.tutoringplatform.authentication.exceptions;

import com.tutoringplatform.shared.exceptions.TutoringPlatformException;

public abstract class AuthenticationException extends TutoringPlatformException {
    protected AuthenticationException(String errorCode, String message) {
        super(errorCode, message);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\authentication\exceptions\EmailAlreadyExistsException.java
======================================================================

package com.tutoringplatform.authentication.exceptions;

public class EmailAlreadyExistsException extends AuthenticationException {
    private final String email;

    public EmailAlreadyExistsException(String email) {
        super("EMAIL_EXISTS", String.format("Email %s already exists", email));
        this.email = email;
    }

    public String getEmail() {
        return email;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\authentication\exceptions\InvalidCredentialsException.java
======================================================================

package com.tutoringplatform.authentication.exceptions;

public class InvalidCredentialsException extends AuthenticationException {
    public InvalidCredentialsException() {
        super("INVALID_CREDENTIALS", "Invalid email or password");
    }
}



======================================================================
// FILE: java\com\tutoringplatform\authentication\exceptions\InvalidTimezoneException.java
======================================================================

package com.tutoringplatform.authentication.exceptions;

public class InvalidTimezoneException extends AuthenticationException {
    private final String timezone;

    public InvalidTimezoneException(String timezone) {
        super("INVALID_TIME_ZONE", String.format("Invalid time zone: %s", timezone));
        this.timezone = timezone;
    }

    public String getTimezone() {
        return timezone;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\authentication\exceptions\InvalidTutorRegistrationException.java
======================================================================

package com.tutoringplatform.authentication.exceptions;

public class InvalidTutorRegistrationException extends AuthenticationException {
    private final String message;

    public InvalidTutorRegistrationException(String message) {
        super("INVALID_TUTOR_REGISTRATION", String.format("Invalid tutor registration: %s", message));
        this.message = message;
    }

    public String getMessage() {
        return message;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\booking\Booking.java
======================================================================

package com.tutoringplatform.booking;

import com.tutoringplatform.payment.Payment;
import com.tutoringplatform.subject.Subject;

import java.time.LocalDateTime;
import java.util.UUID;

public class Booking {
    private String id;
    private String studentId;
    private String tutorId;
    private Subject subject;
    private LocalDateTime dateTime;
    private int durationHours;
    private double totalCost;
    private BookingStatus status;
    private Payment payment;

    public enum BookingStatus {
        PENDING, CONFIRMED, COMPLETED, CANCELLED
    }

    public Booking(String studentId, String tutorId, Subject subject, LocalDateTime dateTime, int durationHours, double hourlyRate) {
        this.id = UUID.randomUUID().toString();
        this.studentId = studentId;
        this.tutorId = tutorId;
        this.subject = subject;
        this.dateTime = dateTime;
        this.durationHours = durationHours;
        this.totalCost = hourlyRate * durationHours;
        this.status = BookingStatus.PENDING;
    }

    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public String getStudentId() { return studentId; }
    public void setStudentId(String studentId) { this.studentId = studentId; }

    public String getTutorId() { return tutorId; }
    public void setTutorId(String tutorId) { this.tutorId = tutorId; }

    public Subject getSubject() { return subject; }
    public void setSubject(Subject subject) { this.subject = subject; }

    public LocalDateTime getDateTime() { return dateTime; }
    public void setDateTime(LocalDateTime dateTime) { this.dateTime = dateTime; }

    public int getDurationHours() { return durationHours; }
    public void setDurationHours(int durationHours) { this.durationHours = durationHours; }

    public double getTotalCost() { return totalCost; }
    public void setTotalCost(double totalCost) { this.totalCost = totalCost; }

    public BookingStatus getStatus() { return status; }
    public void setStatus(BookingStatus status) { this.status = status; }

    public Payment getPayment() { return payment; }
    public void setPayment(Payment payment) { this.payment = payment; }
}



======================================================================
// FILE: java\com\tutoringplatform\booking\BookingController.java
======================================================================

package com.tutoringplatform.booking;

import com.tutoringplatform.shared.dto.request.CreateBookingRequest;
import com.tutoringplatform.shared.dto.request.UpdateBookingRequest;
import com.tutoringplatform.shared.dto.response.BookingDetailResponse;
import com.tutoringplatform.shared.dto.response.BookingListResponse;
import com.tutoringplatform.booking.exceptions.BookingNotFoundException;
import com.tutoringplatform.booking.exceptions.BookedTimeSlotException;
import com.tutoringplatform.payment.exceptions.PaymentNotFoundException;
import com.tutoringplatform.subject.exceptions.SubjectNotFoundException;
import com.tutoringplatform.user.student.exceptions.InsufficientBalanceException;
import com.tutoringplatform.user.tutor.exceptions.TutorNotTeachingSubjectException;
import com.tutoringplatform.booking.exceptions.TutorNotAvailableException;
import com.tutoringplatform.user.exceptions.UserNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RestController
@RequestMapping("/api/bookings")
public class BookingController {

    private final Logger logger = LoggerFactory.getLogger(BookingController.class);
    private final BookingService bookingService;

    @Autowired
    public BookingController(BookingService bookingService) {
        this.bookingService = bookingService;
    }

    @PostMapping
    public ResponseEntity<?> createBooking(@RequestBody CreateBookingRequest request)
        throws UserNotFoundException, InsufficientBalanceException,
        SubjectNotFoundException, TutorNotTeachingSubjectException, TutorNotAvailableException,
        BookedTimeSlotException {
        logger.debug("Creating booking: {}", request.getTutorId());
        BookingDetailResponse booking = bookingService.createBooking(request);
        return ResponseEntity.status(HttpStatus.CREATED).body(booking);
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getBooking(@PathVariable String id) throws BookingNotFoundException, UserNotFoundException, PaymentNotFoundException {
        logger.debug("Getting booking: {}", id);
        BookingDetailResponse booking = bookingService.getBookingDetails(id);
        return ResponseEntity.ok(booking);
    }

    @GetMapping("/student/{studentId}")
    public ResponseEntity<?> getStudentBookings(@PathVariable String studentId) throws UserNotFoundException, PaymentNotFoundException {
        logger.debug("Getting bookings for student: {}", studentId);
        BookingListResponse bookings = bookingService.getStudentBookingListResponse(studentId);
        return ResponseEntity.ok(bookings);
    }

    @GetMapping("/tutor/{tutorId}")
    public ResponseEntity<?> getTutorBookings(@PathVariable String tutorId) throws UserNotFoundException, PaymentNotFoundException {
        logger.debug("Getting bookings for tutor: {}", tutorId);
        BookingListResponse bookings = bookingService.getTutorBookingListResponse(tutorId);
        return ResponseEntity.ok(bookings);
    }

    @PutMapping("/{id}")
    public ResponseEntity<?> updateBooking(@PathVariable String id, @RequestBody UpdateBookingRequest request)
        throws BookingNotFoundException, TutorNotAvailableException, UserNotFoundException {
        logger.debug("Updating booking: {}", id);
        BookingDetailResponse booking = bookingService.updateBooking(id, request);
        return ResponseEntity.ok(booking);
    }

    @PostMapping("/{id}/confirm")
    public ResponseEntity<BookingDetailResponse> confirmBooking(@PathVariable String id)
        throws BookingNotFoundException, InsufficientBalanceException, UserNotFoundException {
        logger.info("API call: confirm booking {}", id);
        BookingDetailResponse response = bookingService.confirmBooking(id);
        return ResponseEntity.ok(response);
    }

    @PostMapping("/{id}/cancel")
    public ResponseEntity<?> cancelBooking(@PathVariable String id)
        throws BookingNotFoundException, PaymentNotFoundException, UserNotFoundException {
        logger.debug("Cancelling booking: {}", id);
        bookingService.cancelBooking(id);
        return ResponseEntity.ok("Booking cancelled successfully");
    }

    @PostMapping("/{id}/complete")
    public ResponseEntity<?> completeBooking(@PathVariable String id)
        throws BookingNotFoundException, UserNotFoundException {
        logger.debug("Completing booking: {}", id);
        bookingService.completeBooking(id);
        return ResponseEntity.ok("Booking completed successfully");
    }
}



======================================================================
// FILE: java\com\tutoringplatform\booking\BookingRepository.java
======================================================================

package com.tutoringplatform.booking;

import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Repository
public class BookingRepository implements IBookingRepository {
    private Map<String, Booking> bookings = new HashMap<>();

    @Override
    public Booking findById(String id) {
        return bookings.get(id);
    }

    @Override
    public List<Booking> findAll() {
        return new ArrayList<>(bookings.values());
    }

    @Override
    public List<Booking> findByStudentId(String studentId) {
        return bookings.values().stream()
                .filter(b -> b.getStudentId().equals(studentId))
                .collect(Collectors.toList());
    }

    @Override
    public List<Booking> findByTutorId(String tutorId) {
        return bookings.values().stream()
                .filter(b -> b.getTutorId().equals(tutorId))
                .collect(Collectors.toList());
    }

    @Override
    public List<Booking> findByStatus(Booking.BookingStatus status) {
        return bookings.values().stream()
                .filter(b -> b.getStatus() == status)
                .collect(Collectors.toList());
    }

    @Override
    public boolean hasCompletedBooking(String studentId, String tutorId) {
        for (Booking booking : bookings.values()) {
            if (booking.getStudentId().equals(studentId) &&
                    booking.getTutorId().equals(tutorId) &&
                    booking.getStatus() == Booking.BookingStatus.COMPLETED) {
                return true;
            }
        }
        return false;
    }

    @Override
    public List<Booking> findByTutorIdAndDateTimeRange(String tutorId, LocalDateTime startTime, LocalDateTime endTime) {
        return bookings.values().stream()
                .filter(b -> b.getTutorId().equals(tutorId) &&
                        b.getDateTime().isAfter(startTime) &&
                        b.getDateTime().isBefore(endTime))
                .collect(Collectors.toList());
    }

    @Override
    public List<Booking> findByTutorIdAndSubjectId(String tutorId, String subjectId) {
        return bookings.values().stream()
                .filter(b -> b.getTutorId().equals(tutorId) &&
                        b.getSubject().getId().equals(subjectId))
                .collect(Collectors.toList());
    }

    @Override
    public List<Booking> findByStudentIdAndTutorIdAndStatus(String studentId, String tutorId, Booking.BookingStatus status) {
        return bookings.values().stream()
                .filter(b -> b.getStudentId().equals(studentId) &&
                        b.getTutorId().equals(tutorId) &&
                        b.getStatus() == status)
                .collect(Collectors.toList());
    }


    @Override
    public void save(Booking booking) {
        bookings.put(booking.getId(), booking);
    }

    @Override
    public void update(Booking booking) {
        bookings.put(booking.getId(), booking);
    }

    @Override
    public void delete(String id) {
        bookings.remove(id);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\booking\BookingService.java
======================================================================

package com.tutoringplatform.booking;

import com.tutoringplatform.booking.exceptions.BookingNotFoundException;
import com.tutoringplatform.booking.observer.BookingEvent;
import com.tutoringplatform.payment.Payment;
import com.tutoringplatform.payment.PaymentService;
import com.tutoringplatform.shared.dto.request.CreateBookingRequest;
import com.tutoringplatform.shared.dto.request.UpdateBookingRequest;
import com.tutoringplatform.shared.dto.response.BookingDetailResponse;
import com.tutoringplatform.shared.dto.response.BookingListResponse;
import com.tutoringplatform.shared.util.DTOMapper;
import com.tutoringplatform.subject.SubjectService;
import com.tutoringplatform.subject.Subject;
import com.tutoringplatform.user.availability.AvailabilityService;
import com.tutoringplatform.user.student.Student;
import com.tutoringplatform.user.tutor.Tutor;
import com.tutoringplatform.payment.exceptions.PaymentNotFoundException;
import com.tutoringplatform.user.student.exceptions.InsufficientBalanceException;   
import com.tutoringplatform.subject.exceptions.SubjectNotFoundException;
import com.tutoringplatform.user.tutor.exceptions.TutorNotTeachingSubjectException;
import com.tutoringplatform.booking.exceptions.*;
import com.tutoringplatform.user.exceptions.UserNotFoundException;
import com.tutoringplatform.user.student.IStudentRepository;
import com.tutoringplatform.user.tutor.ITutorRepository;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.context.ApplicationEventPublisher;

import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.ArrayList;

@Service
public class BookingService {

    private final Logger logger = LoggerFactory.getLogger(BookingService.class);
    private final IBookingRepository bookingRepository;
    private final AvailabilityService availabilityService;
    private final PaymentService paymentService;
    private final DTOMapper dtoMapper;
    private final ApplicationEventPublisher eventPublisher;
    private final IStudentRepository studentRepository;
    private final ITutorRepository tutorRepository;
    private final SubjectService subjectService;

    @Autowired
    public BookingService(
            IBookingRepository bookingRepository,
            SubjectService subjectService,
            AvailabilityService availabilityService,
            PaymentService paymentService,
            DTOMapper dtoMapper,
            ApplicationEventPublisher eventPublisher,
            IStudentRepository studentRepository,
            ITutorRepository tutorRepository) {
        this.bookingRepository = bookingRepository;
        this.subjectService = subjectService;
        this.availabilityService = availabilityService;
        this.paymentService = paymentService;
        this.dtoMapper = dtoMapper;
        this.eventPublisher = eventPublisher;
        this.studentRepository = studentRepository;
        this.tutorRepository = tutorRepository;
    }

    @Transactional
    public BookingDetailResponse createBooking(CreateBookingRequest request)
        throws UserNotFoundException, InsufficientBalanceException,
        SubjectNotFoundException, TutorNotTeachingSubjectException, TutorNotAvailableException,
        BookedTimeSlotException {

        logger.debug("Creating booking for student {} and tutor {}", request.getStudentId(), request.getTutorId());
        // Fetch entities
        Student student = studentRepository.findById(request.getStudentId());
        Tutor tutor = tutorRepository.findById(request.getTutorId());

        if (student.getBalance() < request.getDurationHours() * tutor.getHourlyRate()) {
            logger.warn("Student {} does not have enough money to book this tutor", student.getId());
            throw new InsufficientBalanceException(student.getId(), request.getDurationHours() * tutor.getHourlyRate(), student.getBalance());
        }

        Subject subject = subjectService.findById(request.getSubjectId());

        // Validate tutor teaches this subject
        if (!tutor.getSubjects().contains(subject)) {
            logger.warn("Tutor {} does not teach this subject", tutor.getId());
            throw new TutorNotTeachingSubjectException(tutor.getId(), subject.getId());
        }

        // Check availability
        ZonedDateTime startTime = request.getDateTime().atZone(student.getTimeZone());
        ZonedDateTime endTime = startTime.plusHours(request.getDurationHours());

        if (!availabilityService.isAvailable(tutor.getId(), startTime, endTime, student.getTimeZone())) {
            logger.warn("Tutor {} is not available from {} to {}", tutor.getId(), startTime, endTime);
            throw new TutorNotAvailableException(tutor.getId(), startTime, endTime);
        }

        // Check for conflicts
        List<Booking> existingBookings = bookingRepository.findByTutorIdAndDateTimeRange(
                tutor.getId(),
                request.getDateTime(),
                request.getDateTime().plusHours(request.getDurationHours()));

        if (!existingBookings.isEmpty()) {
            logger.warn("Time slot already booked for tutor {} from {} to {}", tutor.getId(), startTime, endTime);
            throw new BookedTimeSlotException(tutor.getId(), startTime, endTime);
        }

        // Create booking
        Booking booking = new Booking(
                student.getId(),
                tutor.getId(),
                subject,
                request.getDateTime(),
                request.getDurationHours(),
                tutor.getHourlyRate());

        bookingRepository.save(booking);
        logger.info("Booking {} created successfully for student {} and tutor {}", booking.getId(), student.getId(), tutor.getId());

        // Publish event
        eventPublisher.publishEvent(new BookingEvent(
                this,
                BookingEvent.EventType.CREATED,
                booking,
                student,
                tutor));

        // Return detailed response - no payment yet as booking is PENDING
        return dtoMapper.toBookingDetailResponse(booking, student, tutor, null);
    }

    public BookingDetailResponse getBookingDetails(String bookingId) throws BookingNotFoundException, UserNotFoundException, PaymentNotFoundException {
        logger.debug("Getting booking details: {}", bookingId);
        Booking booking = bookingRepository.findById(bookingId);
        if (booking == null) {
            logger.warn("Booking not found: {}", bookingId);
            throw new BookingNotFoundException(bookingId);
        }

        Student student = studentRepository.findById(booking.getStudentId());
        Tutor tutor = tutorRepository.findById(booking.getTutorId());
        Payment payment = paymentService.findById(bookingId);

        logger.info("Booking details found successfully: {}", bookingId);
        return dtoMapper.toBookingDetailResponse(booking, student, tutor, payment);
    }

    public List<Booking> getStudentBookingList(String studentId) throws UserNotFoundException, PaymentNotFoundException {
        logger.debug("Getting booking list for student: {}", studentId);
        //Verify if student exists
        studentRepository.findById(studentId);

        List<Booking> allBookings = bookingRepository.findByStudentId(studentId);
        logger.info("Booking list of size {} found successfully for student: {}", allBookings.size(), studentId);
        return allBookings;
    }

    public BookingListResponse getStudentBookingListResponse(String studentId)
            throws UserNotFoundException, PaymentNotFoundException {
        logger.debug("Getting booking list for student: {}", studentId);
        // Verify if student exists
        studentRepository.findById(studentId);
        List<Booking> allBookings = getStudentBookingList(studentId);
        return categorizeAndEnrichBookings(allBookings);
    }

    public List<Booking> getTutorBookingList(String tutorId) throws UserNotFoundException {
        logger.debug("Getting booking list for tutor: {}", tutorId);
        //Verify if tutor exists
        tutorRepository.findById(tutorId);

        List<Booking> allBookings = bookingRepository.findByTutorId(tutorId);
        logger.info("Booking list of size {} found successfully for tutor: {}", allBookings.size(), tutorId);
        return allBookings;
    }

    public BookingListResponse getTutorBookingListResponse(String tutorId) throws UserNotFoundException, PaymentNotFoundException {
        logger.debug("Getting booking list for tutor: {}", tutorId);
        //Verify if tutor exists
        tutorRepository.findById(tutorId);
        List<Booking> allBookings = getTutorBookingList(tutorId);
        return categorizeAndEnrichBookings(allBookings);
    }

    @Transactional
    public BookingDetailResponse updateBooking(String bookingId, UpdateBookingRequest request)
        throws BookingNotFoundException, TutorNotAvailableException, UserNotFoundException {
        logger.debug("Updating booking: {}", bookingId);
        Booking booking = bookingRepository.findById(bookingId);
        if (booking == null) {
            logger.error("Booking not found: {}", bookingId);
            throw new BookingNotFoundException(bookingId);
        }

        if (booking.getStatus() != Booking.BookingStatus.PENDING) {
            logger.warn("Booking {} is in {} status", bookingId, booking.getStatus());
            throw new IllegalStateException("Can only update pending bookings");
        }

        Student student = studentRepository.findById(booking.getStudentId());
        Tutor tutor = tutorRepository.findById(booking.getTutorId());

        // Update date/time if provided
        if (request.getDateTime() != null) {
            // Check new time availability
            ZonedDateTime startTime = request.getDateTime().atZone(student.getTimeZone());
            ZonedDateTime endTime = startTime.plusHours(
                    request.getDurationHours() != 0 ? request.getDurationHours() : booking.getDurationHours());

            if (!availabilityService.isAvailable(tutor.getId(), startTime, endTime, student.getTimeZone())) {
                logger.warn("Tutor {} is not available at the new time", tutor.getId());
                throw new TutorNotAvailableException(tutor.getId(), startTime, endTime);
            }

            booking.setDateTime(request.getDateTime());
        }

        // Update duration if provided
        if (request.getDurationHours() != 0) {
            booking.setDurationHours(request.getDurationHours());
            booking.setTotalCost(tutor.getHourlyRate() * request.getDurationHours());
        }

        bookingRepository.update(booking);

        logger.info("Booking {} updated successfully", bookingId);
        return dtoMapper.toBookingDetailResponse(booking, student, tutor, null);
    }

    @Transactional
    public BookingDetailResponse confirmBooking(String bookingId)
        throws BookingNotFoundException, InsufficientBalanceException, UserNotFoundException {
        logger.debug("Confirming booking {}", bookingId);

            Booking booking = findBooking(bookingId);

        if (booking.getStatus() != Booking.BookingStatus.PENDING) {
            logger.warn("Booking {} is in {} status", bookingId, booking.getStatus());
            throw new IllegalStateException("Booking is not in pending status");
        }

        Student student = studentRepository.findById(booking.getStudentId());
        Tutor tutor = tutorRepository.findById(booking.getTutorId());

        // Process payment
        Payment payment = paymentService.processPayment(
                student.getId(),
                bookingId,
                booking.getTotalCost());

        // Update booking
        booking.setPayment(payment);
        booking.setStatus(Booking.BookingStatus.CONFIRMED);
        bookingRepository.update(booking);

        logger.info("Booking {} confirmed. Payment: {}", bookingId, payment.getId());

        // Publish event
        eventPublisher.publishEvent(new BookingEvent(
                this,
                BookingEvent.EventType.CONFIRMED,
                booking,
                student,
                tutor));

        return dtoMapper.toBookingDetailResponse(booking, student, tutor, payment);
    }

    @Transactional
    public void cancelBooking(String bookingId)
        throws BookingNotFoundException, PaymentNotFoundException, UserNotFoundException {
        logger.debug("Cancelling booking {}", bookingId);

        Booking booking = findBooking(bookingId);

        if (booking.getStatus() == Booking.BookingStatus.COMPLETED) {
            logger.warn("Cannot cancel completed booking: {}", bookingId);
            throw new IllegalStateException("Cannot cancel completed booking");
        }

        Student student = studentRepository.findById(booking.getStudentId());
        Tutor tutor = tutorRepository.findById(booking.getTutorId());

        // If confirmed, process refund
        if (booking.getStatus() == Booking.BookingStatus.CONFIRMED && booking.getPayment() != null) {
            paymentService.refundPayment(booking.getPayment().getId());
        }

        // Update status
        booking.setStatus(Booking.BookingStatus.CANCELLED);
        bookingRepository.update(booking);

        logger.info("Booking {} cancelled successfully", bookingId);

        // Publish event
        eventPublisher.publishEvent(new BookingEvent(
                this,
                BookingEvent.EventType.CANCELLED,
                booking,
                student,
                tutor));
    }

    @Transactional
    public void completeBooking(String bookingId)
        throws BookingNotFoundException, UserNotFoundException {
        logger.debug("Completing booking {}", bookingId);

        Booking booking = bookingRepository.findById(bookingId);
        if (booking == null) {
            logger.error("Booking not found: {}", bookingId);
            throw new BookingNotFoundException(bookingId);
        }

        if (booking.getStatus() != Booking.BookingStatus.CONFIRMED) {
            logger.warn("Booking {} is not in confirmed status", bookingId);
            throw new IllegalStateException("Booking must be confirmed first");
        }

        Student student = studentRepository.findById(booking.getStudentId());
        Tutor tutor = tutorRepository.findById(booking.getTutorId());

        // Update status
        booking.setStatus(Booking.BookingStatus.COMPLETED);
        bookingRepository.update(booking);

        // Add earnings to tutor
        tutor.setEarnings(tutor.getEarnings() + booking.getTotalCost());
        tutorRepository.update(tutor);

        // Publish event
        eventPublisher.publishEvent(new BookingEvent(
                this,
                BookingEvent.EventType.COMPLETED,
                booking,
                student,
                tutor));

        logger.info("Booking {} completed successfully", bookingId);
    }

    // Helper method to categorize and enrich bookings
    private BookingListResponse categorizeAndEnrichBookings(List<Booking> bookings) throws UserNotFoundException, PaymentNotFoundException {
        LocalDateTime now = LocalDateTime.now();
        List<BookingDetailResponse> upcomingBookings = new ArrayList<>();
        List<BookingDetailResponse> pastBookings = new ArrayList<>();
        List<BookingDetailResponse> cancelledBookings = new ArrayList<>();

        for (Booking booking : bookings) {
            Student student = studentRepository.findById(booking.getStudentId());
            Tutor tutor = tutorRepository.findById(booking.getTutorId());
            Payment payment = paymentService.findById(booking.getId());

            BookingDetailResponse detail = dtoMapper.toBookingDetailResponse(
                    booking, student, tutor, payment);

            if (booking.getStatus() == Booking.BookingStatus.CANCELLED) {
                cancelledBookings.add(detail);
            } else if (booking.getDateTime().isAfter(now)) {
                upcomingBookings.add(detail);
            } else {
                pastBookings.add(detail);
            }
        }

        return dtoMapper.toBookingListResponse(upcomingBookings, pastBookings, cancelledBookings);
    }

    private Booking findBooking(String bookingId) throws BookingNotFoundException {
        Booking booking = bookingRepository.findById(bookingId);
        if (booking == null) {
            logger.warn("Booking not found: {}", bookingId);
            throw new BookingNotFoundException(bookingId);
        }
        return booking;
    }

    public List<Booking> getTutorBookingsBySubject(String tutorId, String subjectId) {
        logger.debug("Getting bookings for tutor {} and subject {}", tutorId, subjectId);
        return bookingRepository.findByTutorIdAndSubjectId(tutorId, subjectId);
    }

    public List<Booking> hasStudentCompletedBookingWithTutor(String studentId, String tutorId, Booking.BookingStatus status) throws UserNotFoundException {
        logger.debug("Checking if student {} has completed booking with tutor {}", studentId, tutorId);
        //Verify if student exists
        studentRepository.findById(studentId);
        tutorRepository.findById(tutorId);

        List<Booking> bookings = bookingRepository.findByStudentIdAndTutorIdAndStatus(studentId, tutorId, status);
        return bookings;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\booking\IBookingRepository.java
======================================================================

package com.tutoringplatform.booking;

import com.tutoringplatform.shared.IRepository;

import java.time.LocalDateTime;
import java.util.List;

public interface IBookingRepository extends IRepository<Booking> {
    List<Booking> findByStudentId(String studentId);
    List<Booking> findByTutorId(String tutorId);
    List<Booking> findByStatus(Booking.BookingStatus status);
    boolean hasCompletedBooking(String studentId, String tutorId);
    List<Booking> findByTutorIdAndDateTimeRange(String tutorId, LocalDateTime startTime, LocalDateTime endTime);
    List<Booking> findByTutorIdAndSubjectId(String tutorId, String subjectId);
    List<Booking> findByStudentIdAndTutorIdAndStatus(String studentId, String tutorId, Booking.BookingStatus status);
}



======================================================================
// FILE: java\com\tutoringplatform\booking\exceptions\BookedTimeSlotException.java
======================================================================

package com.tutoringplatform.booking.exceptions;

import java.time.ZonedDateTime;

public class BookedTimeSlotException extends BookingException {
    private final String tutorId;
    private final ZonedDateTime startTime;
    private final ZonedDateTime endTime;

    public BookedTimeSlotException(String tutorId, ZonedDateTime startTime, ZonedDateTime endTime) {
        super("BOOKED_TIME_SLOT", "Time slot already booked for tutor " + tutorId + " from " + startTime + " to " + endTime);
        this.tutorId = tutorId;
        this.startTime = startTime;
        this.endTime = endTime;
    }

    public String getTutorId() {
        return tutorId;
    }

    public ZonedDateTime getStartTime() {
        return startTime;
    }

    public ZonedDateTime getEndTime() {
        return endTime;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\booking\exceptions\BookingException.java
======================================================================

package com.tutoringplatform.booking.exceptions;

import com.tutoringplatform.shared.exceptions.TutoringPlatformException;

public abstract class BookingException extends TutoringPlatformException {
    protected BookingException(String errorCode, String message) {
        super(errorCode, message);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\booking\exceptions\BookingNotFoundException.java
======================================================================

package com.tutoringplatform.booking.exceptions;

public class BookingNotFoundException extends BookingException {
    private final String bookingId;

    public BookingNotFoundException(String bookingId) {
        super("BOOKING_NOT_FOUND", "Booking not found: " + bookingId);
        this.bookingId = bookingId;
    }

    public String getBookingId() {
        return bookingId;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\booking\exceptions\TutorNotAvailableException.java
======================================================================

package com.tutoringplatform.booking.exceptions;

import java.time.ZonedDateTime;

public class TutorNotAvailableException extends BookingException {
    private final String tutorId;
    private final ZonedDateTime startTime;
    private final ZonedDateTime endTime;

    public TutorNotAvailableException(String tutorId, ZonedDateTime startTime, ZonedDateTime endTime) { 
        super("TUTOR_NOT_AVAILABLE", "Tutor " + tutorId + " is not available from " + startTime + " to " + endTime);
        this.tutorId = tutorId;
        this.startTime = startTime;
        this.endTime = endTime;
    }

    public String getTutorId() {
        return tutorId;
    }

    public ZonedDateTime getStartTime() {
        return startTime;
    }

    public ZonedDateTime getEndTime() {
        return endTime;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\booking\observer\BookingEvent.java
======================================================================

package com.tutoringplatform.booking.observer;

import com.tutoringplatform.booking.Booking;
import com.tutoringplatform.user.student.Student;
import com.tutoringplatform.user.tutor.Tutor;

import org.springframework.context.ApplicationEvent;

public class BookingEvent extends ApplicationEvent {
    private EventType eventType;
    private Booking booking;
    private Student student;
    private Tutor tutor;

    public enum EventType {
        CREATED, CONFIRMED, CANCELLED, COMPLETED
    }

    public BookingEvent(Object source, EventType eventType, Booking booking, Student student, Tutor tutor) {
        super(source);
        this.eventType = eventType;
        this.booking = booking;
        this.student = student;
        this.tutor = tutor;
    }

    public EventType getEventType() {
        return eventType;
    }

    public Booking getBooking() {
        return booking;
    }

    public Student getStudent() {
        return student;
    }

    public Tutor getTutor() {
        return tutor;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\booking\observer\BookingLogger.java
======================================================================

package com.tutoringplatform.booking.observer;

import org.springframework.stereotype.Component;
import org.springframework.context.event.EventListener;

import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

@Component
public class BookingLogger {
    private final List<String> logs;
    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    public BookingLogger() {
        this.logs = new ArrayList<>();
    }

    @EventListener
    public void onBookingEvent(BookingEvent event) {
        String logEntry = String.format("[%s] Booking %s: %s - Student: %s, Tutor: %s, Subject: %s",
                java.time.LocalDateTime.now().format(formatter),
                event.getEventType(),
                event.getBooking().getId(),
                event.getStudent().getName(),
                event.getTutor().getName(),
                event.getBooking().getSubject().getName());

        logs.add(logEntry);
        System.out.println("LOG: " + logEntry);
    }

    public List<String> getLogs() {
        return new ArrayList<>(logs);
    }

    public void printAllLogs() {
        System.out.println("\n=== BOOKING LOGS ===");
        for (String log : logs) {
            System.out.println(log);
        }
        System.out.println("==================\n");
    }
}



======================================================================
// FILE: java\com\tutoringplatform\booking\observer\EmailNotifier.java
======================================================================

package com.tutoringplatform.booking.observer;

import com.tutoringplatform.booking.Booking;
import com.tutoringplatform.user.student.Student;
import com.tutoringplatform.user.tutor.Tutor;

import org.springframework.stereotype.Component;
import org.springframework.context.event.EventListener;
import org.springframework.beans.factory.annotation.Autowired;

import java.time.format.DateTimeFormatter;

@Component
public class EmailNotifier {

    private final EmailService emailService;
    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE, MMMM d, yyyy 'at' h:mm a");

    @Autowired
    public EmailNotifier(EmailService emailService) {
        this.emailService = emailService;
    }

    @EventListener
    public void onBookingEvent(BookingEvent event) {
        switch (event.getEventType()) {
            case CREATED:
                sendBookingCreatedEmails(event.getBooking(), event.getStudent(), event.getTutor());
                break;
            case CONFIRMED:
                sendBookingConfirmedEmails(event.getBooking(), event.getStudent(), event.getTutor());
                break;
            case CANCELLED:
                sendBookingCancelledEmails(event.getBooking(), event.getStudent(), event.getTutor());
                break;
            case COMPLETED:
                sendBookingCompletedEmails(event.getBooking(), event.getStudent(), event.getTutor());
                break;
        }
    }

    private void sendBookingCreatedEmails(Booking booking, Student student, Tutor tutor) {
        // Email to student
        String studentSubject = "Booking Created - Confirmation Required";
        String studentBody = String.format(
                "Dear %s,\n\n" +
                        "Your booking has been created successfully!\n\n" +
                        "Details:\n" +
                        "- Tutor: %s\n" +
                        "- Subject: %s\n" +
                        "- Date & Time: %s\n" +
                        "- Duration: %d hour(s)\n" +
                        "- Total Cost: $%.2f\n\n" +
                        "Please confirm and pay for this booking to secure your session.\n\n" +
                        "Best regards,\n" +
                        "Tutoring Platform Team",
                student.getName(),
                tutor.getName(),
                booking.getSubject().getName(),
                booking.getDateTime().format(formatter),
                booking.getDurationHours(),
                booking.getTotalCost());

        emailService.sendEmail(student.getEmail(), studentSubject, studentBody);

        // Email to tutor
        String tutorSubject = "New Booking Request";
        String tutorBody = String.format(
                "Dear %s,\n\n" +
                        "You have received a new booking request!\n\n" +
                        "Details:\n" +
                        "- Student: %s\n" +
                        "- Subject: %s\n" +
                        "- Date & Time: %s\n" +
                        "- Duration: %d hour(s)\n\n" +
                        "This booking is pending confirmation and payment from the student.\n\n" +
                        "Best regards,\n" +
                        "Tutoring Platform Team",
                tutor.getName(),
                student.getName(),
                booking.getSubject().getName(),
                booking.getDateTime().format(formatter),
                booking.getDurationHours());

        emailService.sendEmail(tutor.getEmail(), tutorSubject, tutorBody);
    }

    private void sendBookingConfirmedEmails(Booking booking, Student student, Tutor tutor) {
        // Email to student
        String studentSubject = "Booking Confirmed - Payment Successful";
        String studentBody = String.format(
                "Dear %s,\n\n" +
                        "Your booking has been confirmed and payment processed successfully!\n\n" +
                        "Confirmed Session Details:\n" +
                        "- Tutor: %s\n" +
                        "- Subject: %s\n" +
                        "- Date & Time: %s\n" +
                        "- Duration: %d hour(s)\n" +
                        "- Amount Paid: $%.2f\n\n" +
                        "We'll send you a reminder before your session.\n\n" +
                        "Best regards,\n" +
                        "Tutoring Platform Team",
                student.getName(),
                tutor.getName(),
                booking.getSubject().getName(),
                booking.getDateTime().format(formatter),
                booking.getDurationHours(),
                booking.getTotalCost());

        emailService.sendEmail(student.getEmail(), studentSubject, studentBody);

        // Email to tutor
        String tutorSubject = "Booking Confirmed - Session Scheduled";
        String tutorBody = String.format(
                "Dear %s,\n\n" +
                        "Great news! Your booking has been confirmed.\n\n" +
                        "Confirmed Session Details:\n" +
                        "- Student: %s\n" +
                        "- Subject: %s\n" +
                        "- Date & Time: %s\n" +
                        "- Duration: %d hour(s)\n" +
                        "- Your Earnings: $%.2f\n\n" +
                        "Please ensure you're available at the scheduled time.\n\n" +
                        "Best regards,\n" +
                        "Tutoring Platform Team",
                tutor.getName(),
                student.getName(),
                booking.getSubject().getName(),
                booking.getDateTime().format(formatter),
                booking.getDurationHours(),
                booking.getTotalCost());

        emailService.sendEmail(tutor.getEmail(), tutorSubject, tutorBody);
    }

    private void sendBookingCancelledEmails(Booking booking, Student student, Tutor tutor) {
        // Email to student
        String studentSubject = "Booking Cancelled";
        String studentBody = String.format(
                "Dear %s,\n\n" +
                        "Your booking has been cancelled.\n\n" +
                        "Cancelled Session Details:\n" +
                        "- Tutor: %s\n" +
                        "- Subject: %s\n" +
                        "- Date & Time: %s\n\n" +
                        "%s\n\n" +
                        "Best regards,\n" +
                        "Tutoring Platform Team",
                student.getName(),
                tutor.getName(),
                booking.getSubject().getName(),
                booking.getDateTime().format(formatter),
                booking.getPayment() != null ? "Your payment has been refunded." : "");

        emailService.sendEmail(student.getEmail(), studentSubject, studentBody);

        // Email to tutor
        String tutorSubject = "Booking Cancelled";
        String tutorBody = String.format(
                "Dear %s,\n\n" +
                        "A booking has been cancelled.\n\n" +
                        "Cancelled Session Details:\n" +
                        "- Student: %s\n" +
                        "- Subject: %s\n" +
                        "- Date & Time: %s\n\n" +
                        "This time slot is now available for other bookings.\n\n" +
                        "Best regards,\n" +
                        "Tutoring Platform Team",
                tutor.getName(),
                student.getName(),
                booking.getSubject().getName(),
                booking.getDateTime().format(formatter));

        emailService.sendEmail(tutor.getEmail(), tutorSubject, tutorBody);
    }

    private void sendBookingCompletedEmails(Booking booking, Student student, Tutor tutor) {
        // Email to student
        String studentSubject = "Session Completed - Leave a Review";
        String studentBody = String.format(
                "Dear %s,\n\n" +
                        "We hope you had a great session with %s!\n\n" +
                        "Completed Session Details:\n" +
                        "- Subject: %s\n" +
                        "- Date & Time: %s\n" +
                        "- Duration: %d hour(s)\n\n" +
                        "Please take a moment to leave a review for your tutor. " +
                        "Your feedback helps other students make informed decisions.\n\n" +
                        "Best regards,\n" +
                        "Tutoring Platform Team",
                student.getName(),
                tutor.getName(),
                booking.getSubject().getName(),
                booking.getDateTime().format(formatter),
                booking.getDurationHours());

        emailService.sendEmail(student.getEmail(), studentSubject, studentBody);

        // Email to tutor
        String tutorSubject = "Session Completed - Payment Released";
        String tutorBody = String.format(
                "Dear %s,\n\n" +
                        "Your session has been marked as completed!\n\n" +
                        "Completed Session Details:\n" +
                        "- Student: %s\n" +
                        "- Subject: %s\n" +
                        "- Date & Time: %s\n" +
                        "- Duration: %d hour(s)\n" +
                        "- Earnings: $%.2f\n\n" +
                        "The payment has been added to your earnings.\n\n" +
                        "Best regards,\n" +
                        "Tutoring Platform Team",
                tutor.getName(),
                student.getName(),
                booking.getSubject().getName(),
                booking.getDateTime().format(formatter),
                booking.getDurationHours(),
                booking.getTotalCost());

        emailService.sendEmail(tutor.getEmail(), tutorSubject, tutorBody);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\booking\observer\EmailService.java
======================================================================

package com.tutoringplatform.booking.observer;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Value;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class EmailService {

    private static final Logger logger = LoggerFactory.getLogger(EmailService.class);

    @Value("${app.email.enabled:false}")
    private boolean emailEnabled;

    @Value("${app.email.from:noreply@tutoringplatform.com}")
    private String fromAddress;

    @Value("${app.email.mock:true}")
    private boolean mockMode;

    public void sendEmail(String to, String subject, String body) {
        if (!emailEnabled) {
            logger.debug("Email sending is disabled. Skipping email to: {}", to);
            return;
        }

        if (mockMode) {
            // In mock mode, just log the email instead of sending
            logEmail(to, subject, body);
        } else {
            // In production, this would integrate with an email service
            // like SendGrid, AWS SES, or SMTP
            sendActualEmail(to, subject, body);
        }
    }

    public void sendHtmlEmail(String to, String subject, String htmlBody) {
        if (!emailEnabled) {
            logger.debug("Email sending is disabled. Skipping email to: {}", to);
            return;
        }

        if (mockMode) {
            logEmail(to, subject, htmlBody);
        } else {
            sendActualHtmlEmail(to, subject, htmlBody);
        }
    }

    private void logEmail(String to, String subject, String body) {
        logger.info("=== MOCK EMAIL ===");
        logger.info("From: {}", fromAddress);
        logger.info("To: {}", to);
        logger.info("Subject: {}", subject);
        logger.info("Body:\n{}", body);
        logger.info("==================");
    }

    private void sendActualEmail(String to, String subject, String body) {
        // TODO: Implement actual email sending
        // This would integrate with a real email service
        // For now, just log that we would send it
        logger.info("Would send email to {} with subject: {}", to, subject);

        // Example implementation with JavaMail (commented out):
        /*
         * try {
         * MimeMessage message = mailSender.createMimeMessage();
         * MimeMessageHelper helper = new MimeMessageHelper(message, true);
         * 
         * helper.setFrom(fromAddress);
         * helper.setTo(to);
         * helper.setSubject(subject);
         * helper.setText(body, false);
         * 
         * mailSender.send(message);
         * logger.info("Email sent successfully to: {}", to);
         * } catch (Exception e) {
         * logger.error("Failed to send email to: {}", to, e);
         * throw new EmailSendException("Failed to send email", e);
         * }
         */
    }

    private void sendActualHtmlEmail(String to, String subject, String htmlBody) {
        // TODO: Implement actual HTML email sending
        logger.info("Would send HTML email to {} with subject: {}", to, subject);
    }

    // Utility method to send emails with retry logic
    public void sendEmailWithRetry(String to, String subject, String body, int maxRetries) {
        int attempts = 0;
        Exception lastException = null;

        while (attempts < maxRetries) {
            try {
                sendEmail(to, subject, body);
                return; // Success
            } catch (Exception e) {
                lastException = e;
                attempts++;
                logger.warn("Email send attempt {} failed for {}", attempts, to, e);

                if (attempts < maxRetries) {
                    try {
                        // Exponential backoff
                        Thread.sleep((long) Math.pow(2, attempts) * 1000);
                    } catch (InterruptedException ie) {
                        Thread.currentThread().interrupt();
                        break;
                    }
                }
            }
        }

        logger.error("Failed to send email after {} attempts to: {}", maxRetries, to, lastException);
    }

    // Custom exception for email sending failures
    public static class EmailSendException extends RuntimeException {
        public EmailSendException(String message, Throwable cause) {
            super(message, cause);
        }
    }
}



======================================================================
// FILE: java\com\tutoringplatform\booking\observer\NotificationObserver.java
======================================================================

package com.tutoringplatform.booking.observer;

import com.tutoringplatform.notification.NotificationType;
import com.tutoringplatform.notification.NotificationService;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Component
public class NotificationObserver {

    private static final Logger logger = LoggerFactory.getLogger(NotificationObserver.class);
    private final NotificationService notificationService;

    @Autowired
    public NotificationObserver(NotificationService notificationService) {
        this.notificationService = notificationService;
    }

    @EventListener
    public void onBookingEvent(BookingEvent event) {
        try {
            switch (event.getEventType()) {
                case CREATED:
                    notificationService.notifyBookingCreated(
                            event.getStudent().getId(),
                            event.getTutor().getId(),
                            event.getBooking().getId());
                    break;

                case CONFIRMED:
                    notificationService.notifyBookingConfirmed(
                            event.getStudent().getId(),
                            event.getTutor().getId(),
                            event.getBooking().getId());
                    break;

                case CANCELLED:
                    notificationService.notifyBookingCancelled(
                            event.getStudent().getId(),
                            event.getTutor().getId(),
                            event.getBooking().getId());
                    break;

                case COMPLETED:
                    // Request feedback from student
                    notificationService.createNotification(
                            event.getStudent().getId(),
                            NotificationType.SESSION_FEEDBACK_REQUEST,
                            "Session Completed",
                            "How was your session with " + event.getTutor().getName() + "? Leave a review!",
                            "/reviews/create/" + event.getTutor().getId(),
                            event.getBooking().getId());
                    break;
            }

            logger.debug("Processed notifications for booking event: {} - {}",
                    event.getEventType(), event.getBooking().getId());

        } catch (Exception e) {
            logger.error("Error processing notifications for booking event", e);
        }
    }
}



======================================================================
// FILE: java\com\tutoringplatform\config\AppProperties.java
======================================================================

package com.tutoringplatform.config;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

@Component
@ConfigurationProperties(prefix = "app")
public class AppProperties {

    private String[] allowedOrigins = {};
    private final Api api = new Api();

    public static class Api {
        private String filesBaseUrl = "/api/files/";

        public String getFilesBaseUrl() {
            return filesBaseUrl;
        }

        public void setFilesBaseUrl(String filesBaseUrl) {
            this.filesBaseUrl = filesBaseUrl;
        }
    }

    // Getters and Setters
    public String[] getAllowedOrigins() {
        return allowedOrigins;
    }

    public void setAllowedOrigins(String[] allowedOrigins) {
        this.allowedOrigins = allowedOrigins;
    }

    public Api getApi() {
        return api;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\config\DataInitializationConfiguration.java
======================================================================

package com.tutoringplatform.config;

import com.tutoringplatform.booking.BookingService;
import com.tutoringplatform.payment.PaymentService;
import com.tutoringplatform.review.ReviewService;
import com.tutoringplatform.user.student.StudentService;
import com.tutoringplatform.subject.SubjectService;
import com.tutoringplatform.user.tutor.TutorService;

import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

@Configuration
@Profile("!test")
public class DataInitializationConfiguration {

    @Bean
    @SuppressWarnings("unused")
    CommandLineRunner init(SubjectService subjectService, TutorService tutorService, StudentService studentService,
            BookingService bookingService, PaymentService paymentService, ReviewService reviewService) {
        return args -> {
            System.out.println("Application started! Access at http://localhost:8080");
        };
    }
}



======================================================================
// FILE: java\com\tutoringplatform\config\DataInitializer.java
======================================================================

package com.tutoringplatform.config;

import com.tutoringplatform.subject.Subject;
import com.tutoringplatform.subject.ISubjectRepository;
import com.tutoringplatform.user.student.Student;
import com.tutoringplatform.user.student.IStudentRepository;
import com.tutoringplatform.user.tutor.Tutor;
import com.tutoringplatform.user.tutor.ITutorRepository;
import com.tutoringplatform.user.availability.AvailabilityService;
import com.tutoringplatform.booking.Booking;
import com.tutoringplatform.booking.IBookingRepository;
import com.tutoringplatform.payment.Payment;
import com.tutoringplatform.payment.IPaymentRepository;
import com.tutoringplatform.review.Review;
import com.tutoringplatform.review.IReviewRepository;
import com.tutoringplatform.notification.NotificationService;
import com.tutoringplatform.notification.NotificationType;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Profile;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.DayOfWeek;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;

@Component
@Profile("!test") // Don't run in test environment
public class DataInitializer implements CommandLineRunner {

    private static final Logger logger = LoggerFactory.getLogger(DataInitializer.class);

    @Autowired
    private ISubjectRepository subjectRepository;

    @Autowired
    private IStudentRepository studentRepository;

    @Autowired
    private ITutorRepository tutorRepository;

    @Autowired
    private IBookingRepository bookingRepository;

    @Autowired
    private IPaymentRepository paymentRepository;

    @Autowired
    private IReviewRepository reviewRepository;

    @Autowired
    private AvailabilityService availabilityService;

    @Autowired
    private NotificationService notificationService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Override
    public void run(String... args) throws Exception {
        logger.info("Starting data initialization...");

        // Check if data already exists
        if (!subjectRepository.findAll().isEmpty()) {
            logger.info("Data already exists, skipping initialization");
            return;
        }

        try {
            // Initialize in order of dependencies
            initializeSubjects();
            initializeStudents();
            initializeTutors();
            assignSubjectsToTutors();
            setupTutorAvailability();
            createSampleBookings();
            createSampleReviews();
            createSampleNotifications();

            logger.info("Data initialization completed successfully!");
            printSummary();

        } catch (Exception e) {
            logger.error("Error during data initialization", e);
            throw e;
        }
    }

    private void initializeSubjects() {
        logger.info("Initializing subjects...");

        List<Subject> subjects = List.of(
                // STEM
                new Subject("Mathematics", "STEM"),
                new Subject("Physics", "STEM"),
                new Subject("Chemistry", "STEM"),
                new Subject("Biology", "STEM"),
                new Subject("Computer Science", "STEM"),
                new Subject("Statistics", "STEM"),
                new Subject("Calculus", "STEM"),
                new Subject("Algebra", "STEM"),

                // Languages
                new Subject("English", "Languages"),
                new Subject("Spanish", "Languages"),
                new Subject("French", "Languages"),
                new Subject("German", "Languages"),
                new Subject("Mandarin", "Languages"),
                new Subject("Japanese", "Languages"),

                // Humanities
                new Subject("History", "Humanities"),
                new Subject("Philosophy", "Humanities"),
                new Subject("Literature", "Humanities"),
                new Subject("Psychology", "Humanities"),
                new Subject("Sociology", "Humanities"),

                // Arts
                new Subject("Music Theory", "Arts"),
                new Subject("Piano", "Arts"),
                new Subject("Guitar", "Arts"),
                new Subject("Art History", "Arts"),
                new Subject("Drawing", "Arts"),

                // Business
                new Subject("Economics", "Business"),
                new Subject("Accounting", "Business"),
                new Subject("Marketing", "Business"),
                new Subject("Finance", "Business"),
                new Subject("Business Strategy", "Business"));

        subjects.forEach(subjectRepository::save);
        logger.info("Created {} subjects", subjects.size());
    }

    private void initializeStudents() {
        logger.info("Initializing students...");

        List<Student> students = List.of(
                createStudent("Alice Johnson", "alice.johnson@email.com", 500.0),
                createStudent("Bob Smith", "bob.smith@email.com", 750.0),
                createStudent("Carol Davis", "carol.davis@email.com", 300.0),
                createStudent("David Wilson", "david.wilson@email.com", 1000.0),
                createStudent("Emma Brown", "emma.brown@email.com", 650.0),
                createStudent("Frank Miller", "frank.miller@email.com", 200.0),
                createStudent("Grace Lee", "grace.lee@email.com", 850.0),
                createStudent("Henry Taylor", "henry.taylor@email.com", 400.0),
                createStudent("Isabel Garcia", "isabel.garcia@email.com", 600.0),
                createStudent("Jack Anderson", "jack.anderson@email.com", 950.0));

        students.forEach(studentRepository::save);
        logger.info("Created {} students", students.size());
    }

    private void initializeTutors() {
        logger.info("Initializing tutors...");

        List<Tutor> tutors = List.of(
                createTutor("Dr. Sarah Mitchell", "sarah.mitchell@email.com", 75.0,
                        "PhD in Mathematics with 10+ years of teaching experience. Specializing in calculus and algebra."),
                createTutor("Prof. Michael Chen", "michael.chen@email.com", 80.0,
                        "Computer Science professor with expertise in programming and algorithms. Industry experience at Google."),
                createTutor("Dr. Emily Rodriguez", "emily.rodriguez@email.com", 70.0,
                        "Chemistry PhD and former pharmaceutical researcher. Expert in organic and analytical chemistry."),
                createTutor("James Thompson", "james.thompson@email.com", 60.0,
                        "Professional musician and music teacher. 15 years experience teaching piano and music theory."),
                createTutor("Dr. Lisa Wang", "lisa.wang@email.com", 85.0,
                        "Physics professor with research background in quantum mechanics. Published author and conference speaker."),
                createTutor("Maria Santos", "maria.santos@email.com", 55.0,
                        "Native Spanish speaker with teaching certification. Specializes in conversational Spanish and grammar."),
                createTutor("Dr. Robert Kumar", "robert.kumar@email.com", 65.0,
                        "Economics PhD with Wall Street experience. Expert in microeconomics, macroeconomics, and finance."),
                createTutor("Jennifer Adams", "jennifer.adams@email.com", 50.0,
                        "English Literature graduate with creative writing background. Passionate about helping students with essays."),
                createTutor("Dr. Thomas Lee", "thomas.lee@email.com", 90.0,
                        "Biology professor and researcher. Specializes in molecular biology and genetics."),
                createTutor("Anna Kowalski", "anna.kowalski@email.com", 45.0,
                        "Art teacher with fine arts degree. Expert in drawing, painting, and art history."));

        tutors.forEach(tutorRepository::save);
        logger.info("Created {} tutors", tutors.size());
    }

    private void assignSubjectsToTutors() {
        logger.info("Assigning subjects to tutors...");

        List<Tutor> tutors = tutorRepository.findAll();
        List<Subject> subjects = subjectRepository.findAll();

        // Dr. Sarah Mitchell - Math subjects
        assignSubjectsToTutor(tutors.get(0), getSubjectsByNames(subjects,
                "Mathematics", "Calculus", "Algebra", "Statistics"));

        // Prof. Michael Chen - Computer Science
        assignSubjectsToTutor(tutors.get(1), getSubjectsByNames(subjects,
                "Computer Science", "Mathematics", "Statistics"));

        // Dr. Emily Rodriguez - Chemistry and Biology
        assignSubjectsToTutor(tutors.get(2), getSubjectsByNames(subjects,
                "Chemistry", "Biology"));

        // James Thompson - Music
        assignSubjectsToTutor(tutors.get(3), getSubjectsByNames(subjects,
                "Music Theory", "Piano"));

        // Dr. Lisa Wang - Physics and Math
        assignSubjectsToTutor(tutors.get(4), getSubjectsByNames(subjects,
                "Physics", "Mathematics", "Calculus"));

        // Maria Santos - Spanish
        assignSubjectsToTutor(tutors.get(5), getSubjectsByNames(subjects,
                "Spanish", "English"));

        // Dr. Robert Kumar - Economics and Business
        assignSubjectsToTutor(tutors.get(6), getSubjectsByNames(subjects,
                "Economics", "Finance", "Business Strategy", "Accounting"));

        // Jennifer Adams - English and Literature
        assignSubjectsToTutor(tutors.get(7), getSubjectsByNames(subjects,
                "English", "Literature", "History"));

        // Dr. Thomas Lee - Biology
        assignSubjectsToTutor(tutors.get(8), getSubjectsByNames(subjects,
                "Biology", "Chemistry"));

        // Anna Kowalski - Arts
        assignSubjectsToTutor(tutors.get(9), getSubjectsByNames(subjects,
                "Drawing", "Art History"));

        logger.info("Assigned subjects to all tutors");
    }

    private void setupTutorAvailability() {
        logger.info("Setting up tutor availability...");

        List<Tutor> tutors = tutorRepository.findAll();

        for (Tutor tutor : tutors) {
            try {
                // Add weekday availability (9 AM - 5 PM)
                availabilityService.addRecurringAvailability(tutor.getId(),
                        DayOfWeek.MONDAY, LocalTime.of(9, 0), LocalTime.of(17, 0));
                availabilityService.addRecurringAvailability(tutor.getId(),
                        DayOfWeek.TUESDAY, LocalTime.of(9, 0), LocalTime.of(17, 0));
                availabilityService.addRecurringAvailability(tutor.getId(),
                        DayOfWeek.WEDNESDAY, LocalTime.of(9, 0), LocalTime.of(17, 0));
                availabilityService.addRecurringAvailability(tutor.getId(),
                        DayOfWeek.THURSDAY, LocalTime.of(9, 0), LocalTime.of(17, 0));
                availabilityService.addRecurringAvailability(tutor.getId(),
                        DayOfWeek.FRIDAY, LocalTime.of(9, 0), LocalTime.of(17, 0));

                // Some tutors also available on weekends
                if (tutors.indexOf(tutor) % 3 == 0) {
                    availabilityService.addRecurringAvailability(tutor.getId(),
                            DayOfWeek.SATURDAY, LocalTime.of(10, 0), LocalTime.of(16, 0));
                }

                // Some tutors have evening hours
                if (tutors.indexOf(tutor) % 2 == 0) {
                    availabilityService.addRecurringAvailability(tutor.getId(),
                            DayOfWeek.MONDAY, LocalTime.of(18, 0), LocalTime.of(21, 0));
                    availabilityService.addRecurringAvailability(tutor.getId(),
                            DayOfWeek.WEDNESDAY, LocalTime.of(18, 0), LocalTime.of(21, 0));
                }

            } catch (Exception e) {
                logger.warn("Failed to set availability for tutor {}: {}", tutor.getId(), e.getMessage());
            }
        }

        logger.info("Set up availability for all tutors");
    }

    private void createSampleBookings() {
        logger.info("Creating sample bookings...");

        List<Student> students = studentRepository.findAll();
        List<Tutor> tutors = tutorRepository.findAll();
        List<Subject> subjects = subjectRepository.findAll();

        // Create some past completed bookings
        createBooking(students.get(0), tutors.get(0), getSubjectByName(subjects, "Mathematics"),
                LocalDateTime.now().minusDays(10), 2, Booking.BookingStatus.COMPLETED);
        createBooking(students.get(1), tutors.get(1), getSubjectByName(subjects, "Computer Science"),
                LocalDateTime.now().minusDays(8), 1, Booking.BookingStatus.COMPLETED);
        createBooking(students.get(2), tutors.get(2), getSubjectByName(subjects, "Chemistry"),
                LocalDateTime.now().minusDays(5), 1, Booking.BookingStatus.COMPLETED);

        // Create some upcoming confirmed bookings
        createBooking(students.get(0), tutors.get(4), getSubjectByName(subjects, "Physics"),
                LocalDateTime.now().plusDays(2), 1, Booking.BookingStatus.CONFIRMED);
        createBooking(students.get(3), tutors.get(0), getSubjectByName(subjects, "Calculus"),
                LocalDateTime.now().plusDays(3), 2, Booking.BookingStatus.CONFIRMED);
        createBooking(students.get(4), tutors.get(5), getSubjectByName(subjects, "Spanish"),
                LocalDateTime.now().plusDays(5), 1, Booking.BookingStatus.CONFIRMED);

        // Create some pending bookings
        createBooking(students.get(5), tutors.get(3), getSubjectByName(subjects, "Piano"),
                LocalDateTime.now().plusDays(7), 1, Booking.BookingStatus.PENDING);
        createBooking(students.get(6), tutors.get(7), getSubjectByName(subjects, "English"),
                LocalDateTime.now().plusDays(8), 1, Booking.BookingStatus.PENDING);

        logger.info("Created sample bookings");
    }

    private void createSampleReviews() {
        logger.info("Creating sample reviews...");

        List<Booking> completedBookings = bookingRepository.findByStatus(Booking.BookingStatus.COMPLETED);

        if (!completedBookings.isEmpty()) {
            // Create reviews for completed bookings
            createReview(completedBookings.get(0).getStudentId(), completedBookings.get(0).getTutorId(),
                    5, "Excellent tutor! Very clear explanations and patient with questions. Highly recommended!");

            if (completedBookings.size() > 1) {
                createReview(completedBookings.get(1).getStudentId(), completedBookings.get(1).getTutorId(),
                        4, "Great session! The tutor was knowledgeable and helped me understand complex concepts.");
            }

            if (completedBookings.size() > 2) {
                createReview(completedBookings.get(2).getStudentId(), completedBookings.get(2).getTutorId(),
                        5, "Amazing chemistry tutor! Made organic chemistry actually understandable. Will book again!");
            }
        }

        logger.info("Created sample reviews");
    }

    private void createSampleNotifications() {
        logger.info("Creating sample notifications...");

        List<Student> students = studentRepository.findAll();
        List<Tutor> tutors = tutorRepository.findAll();

        // Create some sample notifications
        if (!students.isEmpty()) {
            notificationService.createNotification(
                    students.get(0).getId(),
                    NotificationType.BOOKING_REMINDER,
                    "Upcoming Session",
                    "You have a physics session tomorrow at 2:00 PM with Dr. Lisa Wang.");

            notificationService.createNotification(
                    students.get(1).getId(),
                    NotificationType.LOW_BALANCE_WARNING,
                    "Low Balance",
                    "Your account balance is running low. Consider adding funds to continue booking sessions.");
        }

        if (!tutors.isEmpty()) {
            notificationService.createNotification(
                    tutors.get(0).getId(),
                    NotificationType.NEW_STUDENT_REQUEST,
                    "New Booking Request",
                    "You have a new booking request for calculus tutoring.");
        }

        logger.info("Created sample notifications");
    }

    // Helper methods
    private Student createStudent(String name, String email, double balance) {
        Student student = new Student(name, email, passwordEncoder.encode("password123"));
        student.setBalance(balance);
        student.setTimeZone(ZoneId.of("America/New_York"));
        return student;
    }

    private Tutor createTutor(String name, String email, double hourlyRate, String description) {
        Tutor tutor = new Tutor(name, email, passwordEncoder.encode("password123"), hourlyRate, description);
        tutor.setTimeZone(ZoneId.of("America/New_York"));
        return tutor;
    }

    private List<Subject> getSubjectsByNames(List<Subject> subjects, String... names) {
        List<Subject> result = new ArrayList<>();
        for (String name : names) {
            subjects.stream()
                    .filter(s -> s.getName().equals(name))
                    .findFirst()
                    .ifPresent(result::add);
        }
        return result;
    }

    private Subject getSubjectByName(List<Subject> subjects, String name) {
        return subjects.stream()
                .filter(s -> s.getName().equals(name))
                .findFirst()
                .orElse(null);
    }

    private void assignSubjectsToTutor(Tutor tutor, List<Subject> subjects) {
        for (Subject subject : subjects) {
            tutor.addSubject(subject);
        }
        tutorRepository.update(tutor);
    }

    private void createBooking(Student student, Tutor tutor, Subject subject,
            LocalDateTime dateTime, int durationHours, Booking.BookingStatus status) {
        if (subject == null)
            return;

        Booking booking = new Booking(student.getId(), tutor.getId(), subject, dateTime, durationHours,
                tutor.getHourlyRate());
        booking.setStatus(status);

        // Create payment for confirmed and completed bookings
        if (status == Booking.BookingStatus.CONFIRMED || status == Booking.BookingStatus.COMPLETED) {
            Payment payment = new Payment(booking.getId(), booking.getTotalCost());
            payment.setStatus(Payment.PaymentStatus.COMPLETED);
            paymentRepository.save(payment);
            booking.setPayment(payment);

            // Deduct from student balance
            student.setBalance(student.getBalance() - booking.getTotalCost());
            studentRepository.update(student);

            // Add to tutor earnings if completed
            if (status == Booking.BookingStatus.COMPLETED) {
                tutor.setEarnings(tutor.getEarnings() + booking.getTotalCost());
                tutorRepository.update(tutor);
            }
        }

        bookingRepository.save(booking);
    }

    private void createReview(String studentId, String tutorId, int rating, String comment) {
        Review review = new Review(studentId, tutorId, rating, comment);
        reviewRepository.save(review);
    }

    private void printSummary() {
        logger.info("=== DATA INITIALIZATION SUMMARY ===");
        logger.info("Subjects: {}", subjectRepository.findAll().size());
        logger.info("Students: {}", studentRepository.findAll().size());
        logger.info("Tutors: {}", tutorRepository.findAll().size());
        logger.info("Bookings: {}", bookingRepository.findAll().size());
        logger.info("Reviews: {}", reviewRepository.findAll().size());
        logger.info("======================================");
        logger.info("Sample credentials:");
        logger.info("Student: alice.johnson@email.com / password123");
        logger.info("Tutor: sarah.mitchell@email.com / password123");
        logger.info("======================================");
    }
}



======================================================================
// FILE: java\com\tutoringplatform\config\SecurityConfig.java
======================================================================

package com.tutoringplatform.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/**").permitAll() 
                        .anyRequest().authenticated()
                );
        return http.build();
    }
}



======================================================================
// FILE: java\com\tutoringplatform\config\WebConfiguration.java
======================================================================

package com.tutoringplatform.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.lang.NonNull;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfiguration implements WebMvcConfigurer {

    @Autowired
    private AppProperties appProperties;

    @Override
    public void addCorsMappings(@NonNull CorsRegistry registry) {
        registry.addMapping("/api/**") // Apply CORS to all /api endpoints
                .allowedOrigins(appProperties.getAllowedOrigins())
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                .allowedHeaders("*")
                .allowCredentials(true);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\file\FileController.java
======================================================================

package com.tutoringplatform.file;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.http.ResponseEntity;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import com.tutoringplatform.file.exception.FileNotFoundException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;
import java.net.MalformedURLException;
import java.io.IOException;

@RestController
@RequestMapping("/api/files")
public class FileController {

    private final FileService fileService;
    private final Logger logger = LoggerFactory.getLogger(FileController.class);
    @Autowired
    public FileController(FileService fileService) {
        this.fileService = fileService;
    }

    @PostMapping("/upload/{userId}")
    public ResponseEntity<?> uploadFile(
            @PathVariable String userId,
            @RequestParam("file") MultipartFile file,
            @RequestParam("type") String fileType) throws IOException {
        logger.debug("Uploading file for user: {}", userId);
        String fileId = fileService.storeFile(userId, file, fileType);
        return ResponseEntity.ok(Map.of("fileId", fileId, "fileName", file.getOriginalFilename()));
    }

    @GetMapping("/{fileId}")
    public ResponseEntity<?> downloadFile(@PathVariable String fileId) throws FileNotFoundException, MalformedURLException {
        logger.debug("Downloading file: {}", fileId);
        Resource resource = fileService.loadFile(fileId);

        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION,
                        "attachment; filename=\"" + resource.getFilename() + "\"")
                .body(resource);
    }

    @DeleteMapping("/{fileId}")
    public ResponseEntity<?> deleteFile(@PathVariable String fileId) throws IOException, FileNotFoundException {
        logger.debug("Deleting file: {}", fileId);
        fileService.deleteFile(fileId);
        return ResponseEntity.ok("File deleted successfully");
    }
}



======================================================================
// FILE: java\com\tutoringplatform\file\FileMetaData.java
======================================================================

package com.tutoringplatform.file;

import java.time.LocalDateTime;

public class FileMetaData {
    private String fileId;
    private String userId;
    private String originalFileName;
    private String fileType;
    private String storedFileName;
    private LocalDateTime uploadTime;

    public FileMetaData(String fileId, String userId, String originalFileName,
            String fileType, String storedFileName) {
        this.fileId = fileId;
        this.userId = userId;
        this.originalFileName = originalFileName;
        this.fileType = fileType;
        this.storedFileName = storedFileName;
        this.uploadTime = LocalDateTime.now();
    }

    public String getFileId() {
        return fileId;
    }

    public void setFileId(String fileId) {
        this.fileId = fileId;
    }
    public String getUserId() {
        return userId;
    }    

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getOriginalFileName() {
        return originalFileName;
    }

    public void setOriginalFileName(String originalFileName) {
        this.originalFileName = originalFileName;
    }

    public String getFileType() {
        return fileType;
    }

    public void setFileType(String fileType) {
        this.fileType = fileType;
    }

    public String getStoredFileName() {
        return storedFileName;
    }

    public void setStoredFileName(String storedFileName) {
        this.storedFileName = storedFileName;
    }
    
    public LocalDateTime getUploadTime() {
        return uploadTime;
    }

    public void setUploadTime(LocalDateTime uploadTime) {
        this.uploadTime = uploadTime;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\file\FileRepository.java
======================================================================

package com.tutoringplatform.file;

import org.springframework.stereotype.Repository;

import java.util.*;
import java.util.stream.Collectors;

@Repository
public class FileRepository implements IFileRepository {
    private Map<String, FileMetaData> files = new HashMap<>();

    @Override
    public FileMetaData findById(String fileId) {
        return files.get(fileId);
    }

    @Override
    public List<FileMetaData> findAll() {
        return new ArrayList<>(files.values());
    }

    @Override
    public List<FileMetaData> findByUserId(String userId) {
        return files.values().stream()
                .filter(f -> f.getUserId().equals(userId))
                .collect(Collectors.toList());
    }

    @Override
    public void save(FileMetaData metadata) {
        files.put(metadata.getFileId(), metadata);
    }

    @Override
    public void update(FileMetaData metadata) {
        files.put(metadata.getFileId(), metadata);
    }

    @Override
    public void delete(String fileId) {
        files.remove(fileId);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\file\FileService.java
======================================================================

package com.tutoringplatform.file;

import com.tutoringplatform.file.exception.FileNotFoundException;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.file.*;
import java.util.*;
import java.net.MalformedURLException;
import java.io.IOException;

@Service
public class FileService {

    private final Logger logger = LoggerFactory.getLogger(FileService.class);
    private final IFileRepository fileRepository;
    private final Path fileStorageLocation = Paths.get("uploads").toAbsolutePath().normalize();

    @Autowired
    public FileService(IFileRepository fileRepository) {
        this.fileRepository = fileRepository;
        try {
            Files.createDirectories(this.fileStorageLocation);
        } catch (Exception ex) {
            throw new RuntimeException("Could not create upload directory");
        }
    }

    public String storeFile(String userId, MultipartFile file, String fileType) throws IOException {
        logger.debug("Storing file for user: {}", userId);
        // Validate file
        String fileName = file.getOriginalFilename();
        if (fileName == null || fileName.contains("..")) {
            logger.warn("Tried to store file with invalid file name: {}", fileName);
            throw new IllegalArgumentException("Invalid file name");
        }

        // Validate file type
        String contentType = file.getContentType();
        if (!isAllowedFileType(fileType, contentType)) {
            logger.warn("Tried to store file with invalid file type: {}", fileType);
            throw new IllegalArgumentException("File type not allowed");
        }

        // Generate unique file ID
        String fileId = UUID.randomUUID().toString();
        String extension = fileName.substring(fileName.lastIndexOf("."));
        String storedFileName = fileId + extension;

        // Store file
        Path targetLocation = this.fileStorageLocation.resolve(storedFileName);
        Files.copy(file.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);

        // Store metadata
        FileMetaData metadata = new FileMetaData(fileId, userId, fileName, fileType, storedFileName);
        fileRepository.save(metadata);

        logger.info("File stored successfully for user: {}", userId);
        return fileId;
    }

    public Resource loadFile(String fileId) throws FileNotFoundException, MalformedURLException {
        FileMetaData metadata = fileRepository.findById(fileId);
        if (metadata == null) {
            logger.warn("File not found: {}", fileId);
            throw new FileNotFoundException("File not found");
        }

        Path filePath = this.fileStorageLocation.resolve(metadata.getStoredFileName()).normalize();
        Resource resource = new UrlResource(filePath.toUri());

        if (!resource.exists()) {
            throw new MalformedURLException("File not found");
        }

        return resource;
    }

    public void deleteFile(String fileId) throws IOException, FileNotFoundException {
        FileMetaData metadata = fileRepository.findById(fileId);
        if (metadata == null) {
            logger.warn("File not found: {}", fileId);
            throw new FileNotFoundException(fileId);
        }

        Path filePath = this.fileStorageLocation.resolve(metadata.getStoredFileName()).normalize();
        Files.deleteIfExists(filePath);

        fileRepository.delete(fileId);
    }

    private boolean isAllowedFileType(String fileType, String contentType) {
        switch (fileType) {
            case "profile":
                return contentType != null && (contentType.equals("image/jpeg") ||
                        contentType.equals("image/png") ||
                        contentType.equals("image/jpg"));
            default:
                return false;
        }
    }
}



======================================================================
// FILE: java\com\tutoringplatform\file\IFileRepository.java
======================================================================

package com.tutoringplatform.file;

import com.tutoringplatform.shared.IRepository;

import java.util.List;

public interface IFileRepository extends IRepository<FileMetaData> {
    List<FileMetaData> findByUserId(String userId);
}



======================================================================
// FILE: java\com\tutoringplatform\file\exception\FileException.java
======================================================================

package com.tutoringplatform.file.exception;

import com.tutoringplatform.shared.exceptions.TutoringPlatformException;

public abstract class FileException extends TutoringPlatformException {
    protected FileException(String errorCode, String message) {
        super(errorCode, message);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\file\exception\FileNotFoundException.java
======================================================================

package com.tutoringplatform.file.exception;

public class FileNotFoundException extends FileException {
    private final String fileId;

    public FileNotFoundException(String fileId) {
        super("FILE_NOT_FOUND", "File not found: " + fileId);
        this.fileId = fileId;
    }

    public String getFileId() {
        return fileId;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\notification\INotificationRepository.java
======================================================================

package com.tutoringplatform.notification;

import com.tutoringplatform.shared.IRepository;

import java.time.LocalDateTime;
import java.util.List;

public interface INotificationRepository extends IRepository<Notification> {
    List<Notification> findByUserId(String userId);
    List<Notification> findUnreadByUserId(String userId);
    List<Notification> findByUserIdAndType(String userId, NotificationType type);
    int countUnreadByUserId(String userId);
    void markAsRead(String notificationId);
    void markAllAsReadForUser(String userId);
    void deleteOldNotifications(LocalDateTime before);
    List<Notification> findRecentByUserId(String userId, int limit);
}



======================================================================
// FILE: java\com\tutoringplatform\notification\Notification.java
======================================================================

package com.tutoringplatform.notification;

import java.time.LocalDateTime;
import java.util.UUID;

public class Notification {
    private String id;
    private String userId;
    private NotificationType type;
    private String title;
    private String message;
    private String actionUrl; // Optional URL to navigate when clicked
    private String relatedEntityId; // ID of related booking, review, etc.
    private boolean read;
    private LocalDateTime createdAt;
    private LocalDateTime readAt;

    

    public Notification(String userId, NotificationType type, String title, String message) {
        this.id = UUID.randomUUID().toString();
        this.userId = userId;
        this.type = type;
        this.title = title;
        this.message = message;
        this.read = false;
        this.createdAt = LocalDateTime.now();
    }

    // Getters and setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public NotificationType getType() {
        return type;
    }

    public void setType(NotificationType type) {
        this.type = type;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getActionUrl() {
        return actionUrl;
    }

    public void setActionUrl(String actionUrl) {
        this.actionUrl = actionUrl;
    }

    public String getRelatedEntityId() {
        return relatedEntityId;
    }

    public void setRelatedEntityId(String relatedEntityId) {
        this.relatedEntityId = relatedEntityId;
    }

    public boolean isRead() {
        return read;
    }

    public void setRead(boolean read) {
        this.read = read;
        if (read && this.readAt == null) {
            this.readAt = LocalDateTime.now();
        }
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getReadAt() {
        return readAt;
    }

    public void setReadAt(LocalDateTime readAt) {
        this.readAt = readAt;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\notification\NotificationController.java
======================================================================

package com.tutoringplatform.notification;

import com.tutoringplatform.shared.dto.response.NotificationListResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Map;
import java.util.HashMap;

@RestController
@RequestMapping("/api/notifications")
public class NotificationController {

    private final Logger logger = LoggerFactory.getLogger(NotificationController.class);
    private final NotificationService notificationService;

    @Autowired
    public NotificationController(NotificationService notificationService) {
        this.notificationService = notificationService;
    }

    @GetMapping("/user/{userId}")
    public ResponseEntity<?> getUserNotifications(@PathVariable String userId,
            @RequestParam(defaultValue = "20") int limit) {
        logger.debug("Getting notifications for user: {}", userId);
        List<Notification> notifications = notificationService.getRecentNotifications(userId, limit);
        NotificationListResponse response = new NotificationListResponse();
        response.setNotifications(notifications);
        response.setUnreadCount(notificationService.getUnreadCount(userId));
        return ResponseEntity.ok(response);
    }

    @GetMapping("/user/{userId}/unread")
    public ResponseEntity<?> getUnreadNotifications(@PathVariable String userId) {
        List<Notification> notifications = notificationService.getUnreadNotifications(userId);
        NotificationListResponse response = new NotificationListResponse();
        response.setNotifications(notifications);
        response.setUnreadCount(notificationService.getUnreadCount(userId));
        return ResponseEntity.ok(response);
    }

    @GetMapping("/user/{userId}/count")
    public ResponseEntity<?> getUnreadCount(@PathVariable String userId) {
        int count = notificationService.getUnreadCount(userId);
        Map<String, Integer> response = new HashMap<>();
        response.put("unreadCount", count);
        return ResponseEntity.ok(response);
    }

    @PutMapping("/{notificationId}/read")
    public ResponseEntity<?> markAsRead(@PathVariable String notificationId) {
        notificationService.markAsRead(notificationId);
        return ResponseEntity.ok("Notification marked as read");
    }

    @PutMapping("/user/{userId}/read-all")
    public ResponseEntity<?> markAllAsRead(@PathVariable String userId) {
        notificationService.markAllAsRead(userId);
        return ResponseEntity.ok("All notifications marked as read");
    }

    @DeleteMapping("/{notificationId}")
    public ResponseEntity<?> deleteNotification(@PathVariable String notificationId) {
        notificationService.deleteNotification(notificationId);
        return ResponseEntity.ok("Notification deleted");
    }
}



======================================================================
// FILE: java\com\tutoringplatform\notification\NotificationRepository.java
======================================================================

package com.tutoringplatform.notification;

import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Repository
public class NotificationRepository implements INotificationRepository {
    private Map<String, Notification> notifications = new HashMap<>();
    
    @Override
    public Notification findById(String id) {
        return notifications.get(id);
    }
    
    @Override
    public List<Notification> findAll() {
        return new ArrayList<>(notifications.values());
    }
    
    @Override
    public List<Notification> findByUserId(String userId) {
        return notifications.values().stream()
                .filter(n -> n.getUserId().equals(userId))
                .sorted((a, b) -> b.getCreatedAt().compareTo(a.getCreatedAt()))
                .collect(Collectors.toList());
    }
    
    @Override
    public List<Notification> findUnreadByUserId(String userId) {
        return notifications.values().stream()
                .filter(n -> n.getUserId().equals(userId) && !n.isRead())
                .sorted((a, b) -> b.getCreatedAt().compareTo(a.getCreatedAt()))
                .collect(Collectors.toList());
    }
    
    @Override
    public List<Notification> findByUserIdAndType(String userId, NotificationType type) {
        return notifications.values().stream()
                .filter(n -> n.getUserId().equals(userId) && n.getType() == type)
                .sorted((a, b) -> b.getCreatedAt().compareTo(a.getCreatedAt()))
                .collect(Collectors.toList());
    }
    
    @Override
    public int countUnreadByUserId(String userId) {
        return (int) notifications.values().stream()
                .filter(n -> n.getUserId().equals(userId) && !n.isRead())
                .count();
    }
    
    @Override
    public void markAsRead(String notificationId) {
        Notification notification = notifications.get(notificationId);
        if (notification != null) {
            notification.setRead(true);
            notifications.put(notificationId, notification);
        }
    }
    
    @Override
    public void markAllAsReadForUser(String userId) {
        notifications.values().stream()
                .filter(n -> n.getUserId().equals(userId) && !n.isRead())
                .forEach(n -> n.setRead(true));
    }
    
    @Override
    public void deleteOldNotifications(LocalDateTime before) {
        notifications.entrySet().removeIf(entry -> 
            entry.getValue().getCreatedAt().isBefore(before));
    }
    
    @Override
    public List<Notification> findRecentByUserId(String userId, int limit) {
        return notifications.values().stream()
                .filter(n -> n.getUserId().equals(userId))
                .sorted((a, b) -> b.getCreatedAt().compareTo(a.getCreatedAt()))
                .limit(limit)
                .collect(Collectors.toList());
    }
    
    @Override
    public void save(Notification notification) {
        notifications.put(notification.getId(), notification);
    }
    
    @Override
    public void update(Notification notification) {
        notifications.put(notification.getId(), notification);
    }
    
    @Override
    public void delete(String id) {
        notifications.remove(id);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\notification\NotificationService.java
======================================================================

package com.tutoringplatform.notification;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class NotificationService {

    private static final Logger logger = LoggerFactory.getLogger(NotificationService.class);
    private final INotificationRepository notificationRepository;

    @Autowired
    public NotificationService(INotificationRepository notificationRepository) {
        this.notificationRepository = notificationRepository;
    }

    @Transactional
    public Notification createNotification(String userId, NotificationType type,
            String title, String message) {
        Notification notification = new Notification(userId, type, title, message);
        notificationRepository.save(notification);
        logger.info("Created notification for user {}: {}", userId, title);
        return notification;
    }

    @Transactional
    public Notification createNotification(String userId, NotificationType type,
            String title, String message,
            String actionUrl, String relatedEntityId) {
        Notification notification = new Notification(userId, type, title, message);
        notification.setActionUrl(actionUrl);
        notification.setRelatedEntityId(relatedEntityId);
        notificationRepository.save(notification);
        logger.info("Created notification with action for user {}: {}", userId, title);
        return notification;
    }

    public List<Notification> getUserNotifications(String userId) {
        return notificationRepository.findByUserId(userId);
    }

    public List<Notification> getUnreadNotifications(String userId) {
        return notificationRepository.findUnreadByUserId(userId);
    }

    public List<Notification> getRecentNotifications(String userId, int limit) {
        return notificationRepository.findRecentByUserId(userId, limit);
    }

    public int getUnreadCount(String userId) {
        int count = notificationRepository.countUnreadByUserId(userId);
        return Math.min(count, 9); // Return max 9 for display as "9+"
    }

    @Transactional
    public void markAsRead(String notificationId) {
        notificationRepository.markAsRead(notificationId);
        logger.debug("Marked notification {} as read", notificationId);
    }

    @Transactional
    public void markAllAsRead(String userId) {
        notificationRepository.markAllAsReadForUser(userId);
        logger.info("Marked all notifications as read for user {}", userId);
    }

    @Transactional
    public void deleteNotification(String notificationId) {
        notificationRepository.delete(notificationId);
        logger.debug("Deleted notification {}", notificationId);
    }

    @Transactional
    public void cleanupOldNotifications(int daysToKeep) {
        LocalDateTime cutoffDate = LocalDateTime.now().minusDays(daysToKeep);
        notificationRepository.deleteOldNotifications(cutoffDate);
        logger.info("Cleaned up notifications older than {} days", daysToKeep);
    }

    // Convenience methods for specific notification types

    public void notifyBookingCreated(String studentId, String tutorId, String bookingId) {
        // For student
        createNotification(
                studentId,
                NotificationType.BOOKING_CREATED,
                "Booking Created",
                "Your booking request has been created. Please confirm and pay to secure your session.",
                "/bookings/" + bookingId,
                bookingId);

        // For tutor
        createNotification(
                tutorId,
                NotificationType.NEW_STUDENT_REQUEST,
                "New Booking Request",
                "You have received a new booking request.",
                "/bookings/" + bookingId,
                bookingId);
    }

    public void notifyBookingConfirmed(String studentId, String tutorId, String bookingId) {
        createNotification(
                studentId,
                NotificationType.BOOKING_CONFIRMED,
                "Booking Confirmed",
                "Your booking has been confirmed and payment processed.",
                "/bookings/" + bookingId,
                bookingId);

        createNotification(
                tutorId,
                NotificationType.BOOKING_CONFIRMED,
                "Session Confirmed",
                "A student has confirmed their booking with you.",
                "/bookings/" + bookingId,
                bookingId);
    }

    public void notifyBookingCancelled(String studentId, String tutorId, String bookingId) {
        createNotification(
                studentId,
                NotificationType.BOOKING_CANCELLED,
                "Booking Cancelled",
                "Your booking has been cancelled.",
                "/bookings/" + bookingId,
                bookingId);

        createNotification(
                tutorId,
                NotificationType.BOOKING_CANCELLED,
                "Session Cancelled",
                "A booking has been cancelled.",
                "/bookings/" + bookingId,
                bookingId);
    }

    public void notifyNewReview(String tutorId, String studentName, String reviewId) {
        createNotification(
                tutorId,
                NotificationType.NEW_REVIEW,
                "New Review",
                studentName + " has left you a review.",
                "/reviews/" + reviewId,
                reviewId);
    }

    public void notifyLowBalance(String studentId, double currentBalance) {
        createNotification(
                studentId,
                NotificationType.LOW_BALANCE_WARNING,
                "Low Balance Warning",
                String.format("Your balance is low ($%.2f). Add funds to continue booking sessions.", currentBalance));
    }

    public void notifySessionReminder(String userId, String sessionDetails, String bookingId) {
        createNotification(
                userId,
                NotificationType.BOOKING_REMINDER,
                "Upcoming Session Reminder",
                sessionDetails,
                "/bookings/" + bookingId,
                bookingId);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\notification\NotificationType.java
======================================================================

package com.tutoringplatform.notification;

public enum NotificationType {
    // Booking related
    BOOKING_CREATED,
    BOOKING_CONFIRMED,
    BOOKING_CANCELLED,
    BOOKING_COMPLETED,
    BOOKING_REMINDER,

    // Payment related
    PAYMENT_RECEIVED,
    PAYMENT_REFUNDED,
    LOW_BALANCE_WARNING,

    // Review related
    NEW_REVIEW,

    // System notifications
    PROFILE_UPDATE,
    NEW_MESSAGE,
    SYSTEM_ANNOUNCEMENT,

    // Tutor specific
    NEW_STUDENT_REQUEST,
    EARNINGS_DEPOSITED,

    // Student specific
    TUTOR_AVAILABLE,
    SESSION_FEEDBACK_REQUEST
}



======================================================================
// FILE: java\com\tutoringplatform\payment\IPaymentRepository.java
======================================================================

package com.tutoringplatform.payment;

import com.tutoringplatform.shared.IRepository;

public interface IPaymentRepository extends IRepository<Payment> {
    Payment findByBookingId(String bookingId);
}



======================================================================
// FILE: java\com\tutoringplatform\payment\Payment.java
======================================================================

package com.tutoringplatform.payment;

import java.time.LocalDateTime;
import java.util.UUID;

public class Payment {
    private String id;
    private String bookingId;
    private double amount;
    private PaymentStatus status;
    private LocalDateTime timestamp;
    private String transactionId;

    public enum PaymentStatus {
        PENDING, COMPLETED, FAILED, REFUNDED
    }

    public Payment(String bookingId, double amount) {
        this.id = UUID.randomUUID().toString();
        this.bookingId = bookingId;
        this.amount = amount;
        this.status = PaymentStatus.PENDING;
        this.timestamp = LocalDateTime.now();
        this.transactionId = UUID.randomUUID().toString();
    }

    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public String getBookingId() { return bookingId; }
    public void setBookingId(String bookingId) { this.bookingId = bookingId; }

    public double getAmount() { return amount; }
    public void setAmount(double amount) { this.amount = amount; }

    public PaymentStatus getStatus() { return status; }
    public void setStatus(PaymentStatus status) { this.status = status; }

    public LocalDateTime getTimestamp() { return timestamp; }
    public void setTimestamp(LocalDateTime timestamp) { this.timestamp = timestamp; }

    public String getTransactionId() { return transactionId; }
    public void setTransactionId(String transactionId) { this.transactionId = transactionId; }
}



======================================================================
// FILE: java\com\tutoringplatform\payment\PaymentRepository.java
======================================================================

package com.tutoringplatform.payment;

import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Repository
public class PaymentRepository implements IPaymentRepository {
    private Map<String, Payment> payments = new HashMap<>();

    @Override
    public Payment findById(String id) {
        return payments.get(id);
    }

    @Override
    public Payment findByBookingId(String bookingId) {
        return payments.values().stream()
                .filter(p -> p.getBookingId().equals(bookingId))
                .findFirst()
                .orElse(null);
    }

    @Override
    public List<Payment> findAll() {
        return new ArrayList<>(payments.values());
    }

    @Override
    public void save(Payment payment) {
        payments.put(payment.getId(), payment);
    }

    @Override
    public void update(Payment payment) {
        payments.put(payment.getId(), payment);
    }

    @Override
    public void delete(String id) {
        payments.remove(id);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\payment\PaymentService.java
======================================================================

package com.tutoringplatform.payment;

import com.tutoringplatform.booking.IBookingRepository;
import com.tutoringplatform.booking.Booking;
import com.tutoringplatform.booking.exceptions.BookingNotFoundException;
import com.tutoringplatform.user.student.IStudentRepository;
import com.tutoringplatform.user.student.Student;
import com.tutoringplatform.user.student.exceptions.InsufficientBalanceException;
import com.tutoringplatform.payment.command.IPaymentCommand;
import com.tutoringplatform.payment.command.ProcessPaymentCommand;
import com.tutoringplatform.payment.command.RefundPaymentCommand;
import com.tutoringplatform.payment.exceptions.PaymentNotFoundException;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Stack;

@Service
public class PaymentService {
    private final Logger logger = LoggerFactory.getLogger(PaymentService.class);
    private final IPaymentRepository paymentRepository;
    private final IStudentRepository studentRepository;
    private final IBookingRepository bookingRepository;
    private final Stack<IPaymentCommand> commandHistory;
    @Autowired
    public PaymentService(IPaymentRepository paymentRepository, IStudentRepository studentRepository,
            IBookingRepository bookingRepository) {
        this.paymentRepository = paymentRepository;
        this.studentRepository = studentRepository;
        this.bookingRepository = bookingRepository;
        this.commandHistory = new Stack<>();
    }

    @Transactional
    public Payment processPayment(String studentId, String bookingId, double amount) throws InsufficientBalanceException {
        logger.info("Processing payment for student {}, booking {}, amount {}", studentId, bookingId, amount);

        Student student = studentRepository.findById(studentId);
        if (student == null) {
            throw new IllegalStateException("Data corruption error: Student not found for payment");
        }

        if (student.getBalance() < amount) {
            logger.warn("Insufficient balance for student {}. Required: {}, Available: {}",
                studentId, amount, student.getBalance());
            throw new InsufficientBalanceException(studentId, amount, student.getBalance());
        }

        Payment payment = new Payment(bookingId, amount);

        ProcessPaymentCommand command = new ProcessPaymentCommand(
                payment, student, amount, paymentRepository, studentRepository);

        command.execute();
        commandHistory.push(command);

        logger.info("Payment processed successfully. Payment ID: {}, amount: {}", payment.getId(), amount);

        return payment;
    }

    @Transactional
    public void refundPayment(String paymentId) throws BookingNotFoundException, PaymentNotFoundException {
        logger.info("Refunding payment {}", paymentId);

        Payment payment = paymentRepository.findById(paymentId);
        if (payment == null) {
            logger.error("Payment not found for refund");
            throw new PaymentNotFoundException(paymentId);
        }

        if (payment.getStatus() != Payment.PaymentStatus.COMPLETED) {
            logger.error("Attempted to refund a payment that is not completed. Status: {}", payment.getStatus());
            throw new IllegalStateException(
                    "Can only refund completed payments. Current status: " + payment.getStatus());
        }

        Booking booking = bookingRepository.findById(payment.getBookingId());
        if (booking == null) {
            logger.error("Booking not found for refund");
            throw new BookingNotFoundException(payment.getBookingId());
        }

        Student student = studentRepository.findById(booking.getStudentId());
        if (student == null) {
            logger.error("Student not found for refund");
            throw new IllegalStateException("Data corruption error: Student not found for refund");
        }

        RefundPaymentCommand command = new RefundPaymentCommand(
                payment, student, payment.getAmount(), paymentRepository, studentRepository);

        command.execute();
        commandHistory.push(command);

        logger.info("Payment refunded successfully. Payment ID: {}, amount: {}", payment.getId(), payment.getAmount());
    }

    public Payment findById(String id) {
        if (id == null)
            return null;
        return paymentRepository.findById(id);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\payment\command\IPaymentCommand.java
======================================================================

package com.tutoringplatform.payment.command;

import com.tutoringplatform.payment.Payment;

public interface IPaymentCommand {
    void execute() throws Exception;
    void undo() throws Exception;
    Payment getPayment();
}



======================================================================
// FILE: java\com\tutoringplatform\payment\command\ProcessPaymentCommand.java
======================================================================

package com.tutoringplatform.payment.command;

import com.tutoringplatform.payment.Payment;
import com.tutoringplatform.user.student.Student;
import com.tutoringplatform.user.student.exceptions.InsufficientBalanceException;
import com.tutoringplatform.payment.IPaymentRepository;
import com.tutoringplatform.user.student.IStudentRepository;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProcessPaymentCommand implements IPaymentCommand {
    private final Logger logger = LoggerFactory.getLogger(ProcessPaymentCommand.class);
    private Payment payment;
    private Student student;
    private double amount;
    private IPaymentRepository paymentRepository;
    private IStudentRepository studentRepository;

    public ProcessPaymentCommand(Payment payment, Student student, double amount, IPaymentRepository paymentRepository, IStudentRepository studentRepository) {
        this.payment = payment;
        this.student = student;
        this.amount = amount;
        this.paymentRepository = paymentRepository;
        this.studentRepository = studentRepository;
    }

    @Override
    public void execute() throws InsufficientBalanceException {
        logger.info("Executing payment command for student {}, amount {}", student.getId(), amount);

        if (student == null) {
            logger.error("Student not found for payment command");
            throw new IllegalStateException("Data corruption error: Student not found for payment command");
        }

        if (student.getBalance() < amount) {
            logger.warn("Insufficient balance for student {}, amount {}, balance {}", student.getId(), amount, student.getBalance());
            throw new InsufficientBalanceException(student.getId(), amount, student.getBalance());
        }

        student.setBalance(student.getBalance() - amount);
        payment.setStatus(Payment.PaymentStatus.COMPLETED);

        paymentRepository.save(payment);
        studentRepository.update(student);
        logger.info("Payment for student {} completed successfully.", student.getId());
    }

    @Override
    public void undo() throws InsufficientBalanceException {
        logger.info("Undoing payment command for student {}, amount {}", student.getId(), amount);
        student.setBalance(student.getBalance() + amount);
        payment.setStatus(Payment.PaymentStatus.REFUNDED);
        paymentRepository.update(payment);
        studentRepository.update(student);
    }

    @Override
    public Payment getPayment() {
        return payment;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\payment\command\RefundPaymentCommand.java
======================================================================

package com.tutoringplatform.payment.command;

import com.tutoringplatform.payment.Payment;
import com.tutoringplatform.user.student.Student;
import com.tutoringplatform.payment.IPaymentRepository;
import com.tutoringplatform.user.student.IStudentRepository;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RefundPaymentCommand implements IPaymentCommand {
    private final Logger logger = LoggerFactory.getLogger(RefundPaymentCommand.class);
    private Payment payment;
    private Student student;
    private double amount;
    private IPaymentRepository paymentRepository;
    private IStudentRepository studentRepository;

    public RefundPaymentCommand(Payment payment, Student student, double amount, IPaymentRepository paymentRepository, IStudentRepository studentRepository) {
        this.payment = payment;
        this.student = student;
        this.amount = amount;
        this.paymentRepository = paymentRepository;
        this.studentRepository = studentRepository;
    }

    @Override
    public void execute() {
        logger.info("Executing refund payment command for student {}, amount {}", student.getId(), amount);

        if (payment.getStatus() != Payment.PaymentStatus.COMPLETED) {
            logger.error("Can only refund completed payments");
            throw new IllegalStateException("Data corruption error: Can only refund completed payments");
        }
        student.setBalance(student.getBalance() + amount);
        payment.setStatus(Payment.PaymentStatus.REFUNDED);
        paymentRepository.update(payment);
        studentRepository.update(student);
        logger.info("Refund payment command for student {} completed successfully.", student.getId());
    }

    @Override
    public void undo() {
        logger.info("Undoing refund payment command for student {}, amount {}", student.getId(), amount);
        student.setBalance(student.getBalance() - amount);
        payment.setStatus(Payment.PaymentStatus.COMPLETED);
        paymentRepository.update(payment);
        studentRepository.update(student);
    }

    @Override
    public Payment getPayment() {
        return payment;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\payment\exceptions\PaymentException.java
======================================================================

package com.tutoringplatform.payment.exceptions;

import com.tutoringplatform.shared.exceptions.TutoringPlatformException;

public abstract class PaymentException extends TutoringPlatformException {
    protected PaymentException(String errorCode, String message) {
        super(errorCode, message);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\payment\exceptions\PaymentNotFoundException.java
======================================================================

package com.tutoringplatform.payment.exceptions;

public class PaymentNotFoundException extends PaymentException {
    private final String paymentId;
    public PaymentNotFoundException(String paymentId) {
        super("PAYMENT_NOT_FOUND", "Payment not found: " + paymentId);
        this.paymentId = paymentId;
    }

    public String getPaymentId() {
        return paymentId;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\review\IReviewRepository.java
======================================================================

package com.tutoringplatform.review;

import com.tutoringplatform.shared.IRepository;

import java.util.List;

public interface IReviewRepository extends IRepository<Review> {
    List<Review> getTutorReviews(String tutorId);
    List<Review> getStudentReviews(String studentId);
    Review findByStudentIdAndTutorId(String studentId, String tutorId);
}



======================================================================
// FILE: java\com\tutoringplatform\review\Review.java
======================================================================

package com.tutoringplatform.review;

import java.time.LocalDateTime;
import java.util.UUID;

public class Review {
    private String id;
    private String studentId;
    private String tutorId;
    private int rating;
    private String comment;
    private LocalDateTime timestamp;

    public Review(String studentId, String tutorId, int rating, String comment) {
        this.id = UUID.randomUUID().toString();
        this.studentId = studentId;
        this.tutorId = tutorId;
        setRating(rating);
        this.comment = comment;
        this.timestamp = LocalDateTime.now();
    }

    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public String getStudentId() { return studentId; }
    public void setStudentId(String studentId) { this.studentId = studentId; }

    public String getTutorId() { return tutorId; }
    public void setTutorId(String tutorId) { this.tutorId = tutorId; }

    public int getRating() { return rating; }
    public void setRating(int rating) {
        this.rating = rating;
    }

    public String getComment() { return comment; }
    public void setComment(String comment) { this.comment = comment; }

    public LocalDateTime getTimestamp() { return timestamp; }
    public void setTimestamp(LocalDateTime timestamp) { this.timestamp = timestamp; }
}



======================================================================
// FILE: java\com\tutoringplatform\review\ReviewController.java
======================================================================

package com.tutoringplatform.review;

import com.tutoringplatform.review.exceptions.*;
import com.tutoringplatform.user.exceptions.UserNotFoundException;
import com.tutoringplatform.shared.dto.request.CreateReviewRequest;
import com.tutoringplatform.shared.dto.response.ReviewResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import jakarta.validation.Valid;

import java.util.List;

@RestController
@RequestMapping("/api/reviews")
public class ReviewController {

    private final Logger logger = LoggerFactory.getLogger(ReviewController.class);
    private final ReviewService reviewService;

    @Autowired
    public ReviewController(ReviewService reviewService) {
        this.reviewService = reviewService;
    }

    @PostMapping
    public ResponseEntity<?> createReview(@RequestBody @Valid CreateReviewRequest request) throws NoCompletedBookingsException, InvalidRatingException, UserNotFoundException {
        logger.debug("Creating review for tutor {} by student {}", request.getTutorId(), request.getStudentId());
        ReviewResponse review = reviewService.createReview(request);
        return ResponseEntity.status(HttpStatus.CREATED).body(review);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteReview(@PathVariable String id) throws ReviewNotFoundException {
        logger.debug("Deleting review with id {}", id);
        reviewService.deleteReview(id);
        return ResponseEntity.status(HttpStatus.OK).body("Review deleted successfully");
    }

    @GetMapping("/tutor/{tutorId}")
    public ResponseEntity<?> getTutorReviews(@PathVariable String tutorId) throws NoCompletedBookingsException, UserNotFoundException {
        logger.debug("Getting reviews for tutor {}", tutorId);
        List<ReviewResponse> reviews = reviewService.getTutorReviewsResponse(tutorId);
        return ResponseEntity.ok(reviews);
    }

    @GetMapping("/student/{studentId}")
    public ResponseEntity<?> getStudentReviews(@PathVariable String studentId) throws NoCompletedBookingsException, UserNotFoundException {
        logger.debug("Getting reviews for student {}", studentId);
        List<ReviewResponse> reviews = reviewService.getStudentReviews(studentId);
        return ResponseEntity.ok(reviews);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\review\ReviewRepository.java
======================================================================

package com.tutoringplatform.review;

import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Repository
public class ReviewRepository implements IReviewRepository {
    private Map<String, Review> reviews = new HashMap<>();

    @Override
    public Review findById(String id) {
        return reviews.get(id);
    }

    @Override
    public List<Review> findAll() {
        return new ArrayList<>(reviews.values());
    }

    @Override
    public List<Review> getTutorReviews(String tutorId) {
        return reviews.values().stream()
                .filter(r -> r.getTutorId().equals(tutorId))
                .collect(Collectors.toList());
    }

    @Override
    public List<Review> getStudentReviews(String studentId) {
        return reviews.values().stream()
                .filter(r -> r.getStudentId().equals(studentId))
                .collect(Collectors.toList());
    }

    @Override
    public Review findByStudentIdAndTutorId(String studentId, String tutorId) {
        return reviews.values().stream()
                .filter(r -> r.getStudentId().equals(studentId) && r.getTutorId().equals(tutorId))
                .findFirst()
                .orElse(null);
    }

    @Override
    public void save(Review review) {
        reviews.put(review.getId(), review);
    }

    @Override
    public void update(Review review) {
        reviews.put(review.getId(), review);
    }

    @Override
    public void delete(String id) {
        reviews.remove(id);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\review\ReviewService.java
======================================================================

package com.tutoringplatform.review;

import com.tutoringplatform.booking.Booking;
import com.tutoringplatform.user.student.Student;
import com.tutoringplatform.user.tutor.ITutorRepository;
import com.tutoringplatform.user.tutor.Tutor;
import com.tutoringplatform.booking.IBookingRepository;
import com.tutoringplatform.user.student.StudentService;
import com.tutoringplatform.review.exceptions.*;
import com.tutoringplatform.user.exceptions.UserNotFoundException;
import com.tutoringplatform.shared.dto.request.CreateReviewRequest;
import com.tutoringplatform.shared.dto.response.ReviewResponse;
import com.tutoringplatform.shared.util.DTOMapper;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;
import java.util.List;
import java.util.ArrayList;

@Service
public class ReviewService {

    private final Logger logger = LoggerFactory.getLogger(ReviewService.class);
    private final IReviewRepository reviewRepository;
    private final StudentService studentService;
    private final ITutorRepository tutorRepository;
    private final IBookingRepository bookingRepository;
    private final DTOMapper dtoMapper;

    @Autowired
    public ReviewService(
            IReviewRepository reviewRepository,
            StudentService studentService,
            ITutorRepository tutorRepository,
            IBookingRepository bookingRepository,
            DTOMapper dtoMapper) {
        this.reviewRepository = reviewRepository;
        this.studentService = studentService;
        this.tutorRepository = tutorRepository;
        this.bookingRepository = bookingRepository;
        this.dtoMapper = dtoMapper;
    }

    @Transactional
    public ReviewResponse createReview(CreateReviewRequest request) throws NoCompletedBookingsException, InvalidRatingException, UserNotFoundException {
        validateCreateReviewRequest(request);
        logger.info("Creating review for tutor {} by student {}", request.getTutorId(), request.getStudentId());
        // Extract student and tutor IDs from request
        String studentId = request.getStudentId();
        String tutorId = request.getTutorId();

        Student student = studentService.findById(studentId);
        Tutor tutor = tutorRepository.findById(tutorId);

        // Check if student has completed any bookings with this tutor
        List<Booking> completedBookings = bookingRepository.findByStudentIdAndTutorIdAndStatus(studentId, tutorId, Booking.BookingStatus.COMPLETED);

        if (completedBookings.isEmpty()) {
            logger.warn("No completed bookings found for student {} with tutor {}", studentId, tutorId);
            throw new NoCompletedBookingsException(studentId, tutorId);
        }

        // Check if review already exists from this student for this tutor
        Review existingReview = reviewRepository.findByStudentIdAndTutorId(studentId, tutorId);

        if (existingReview != null) {
            // Update existing review
            existingReview.setRating(request.getRating());
            existingReview.setComment(request.getComment());
            existingReview.setTimestamp(LocalDateTime.now());
            reviewRepository.update(existingReview);

            return dtoMapper.toReviewResponse(existingReview, student, tutor);
        }

        // Create new review
        Review review = new Review(
                studentId,
                tutorId,
                request.getRating(),
                request.getComment());

        reviewRepository.save(review);

        logger.info("Review created successfully for tutor {} by student {}", tutorId, studentId);
        return dtoMapper.toReviewResponse(review, student, tutor);
    }

    @Transactional
    public void deleteReview(String id) throws ReviewNotFoundException {
        logger.debug("Deleting review with id {}", id);
        Review review = reviewRepository.findById(id);
        if (review == null) {
            logger.error("Review not found with id {}", id);
            throw new ReviewNotFoundException(id);
        }
        
        reviewRepository.delete(id);

        logger.info("Review deleted successfully with id {}", id);
    }

    public List<Review> getTutorReviews(String tutorId) throws NoCompletedBookingsException, UserNotFoundException {
        logger.info("Getting reviews for tutor {}", tutorId);
        tutorRepository.findById(tutorId);

        List<Review> reviews = reviewRepository.getTutorReviews(tutorId);

        logger.info("Reviews for tutor {} retrieved successfully", tutorId);
        return reviews;
    }

    public List<ReviewResponse> getTutorReviewsResponse(String tutorId) throws NoCompletedBookingsException, UserNotFoundException {
        logger.info("Getting review DTOs for tutor {}", tutorId);
        List<Review> reviews = getTutorReviews(tutorId);
        
        List<ReviewResponse> responses = new ArrayList<>();

        for (Review review : reviews) {
            Student student = studentService.findById(review.getStudentId());
            Tutor tutor = tutorRepository.findById(review.getTutorId());

            ReviewResponse response = dtoMapper.toReviewResponse(review, student, tutor);
            responses.add(response);
        }

        // Sort by most recent first
        responses.sort((a, b) -> b.getCreatedAt().compareTo(a.getCreatedAt()));
        return responses;
    }

    public List<ReviewResponse> getStudentReviews(String studentId) throws NoCompletedBookingsException, UserNotFoundException {
        logger.info("Getting reviews for student {}", studentId);
        Student student = studentService.findById(studentId);
        List<Review> reviews = reviewRepository.getStudentReviews(studentId);
        List<ReviewResponse> responses = new ArrayList<>();
        for (Review review : reviews) {
            Tutor tutor = tutorRepository.findById(review.getTutorId());
            ReviewResponse response = dtoMapper.toReviewResponse(review, student, tutor);
            responses.add(response);
        }

        responses.sort((a, b) -> b.getCreatedAt().compareTo(a.getCreatedAt()));

        logger.info("Reviews for student {} retrieved successfully", studentId);
        return responses;
    }

    private void validateCreateReviewRequest(CreateReviewRequest request) throws InvalidRatingException {
        if (request == null) {
            throw new IllegalArgumentException("Review request cannot be null");
        }
        if (request.getRating() < 1 || request.getRating() > 5) {
            logger.error("Invalid rating when creating review for tutor {} by student {}: {}", request.getTutorId(), request.getStudentId(), request.getRating());
            throw new InvalidRatingException(request.getRating());
        }
        if (request.getComment().trim().length() < 50) {
            throw new IllegalArgumentException("Comment must be at least 50 characters");
        }
        if (request.getComment().length() > 1000) {
            throw new IllegalArgumentException("Comment cannot exceed 1000 characters");
        }
    }
}



======================================================================
// FILE: java\com\tutoringplatform\review\exceptions\InvalidRatingException.java
======================================================================

package com.tutoringplatform.review.exceptions;

public class InvalidRatingException extends ReviewException {
    private final int rating;

    public InvalidRatingException(int rating) {
        super("INVALID_RATING", String.format("Rating %d is invalid", rating));
        this.rating = rating;
    }

    public int getRating() {
        return rating;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\review\exceptions\NoCompletedBookingsException.java
======================================================================

package com.tutoringplatform.review.exceptions;

public class NoCompletedBookingsException extends ReviewException {
    private final String studentId;
    private final String tutorId;

    public NoCompletedBookingsException(String studentId, String tutorId) {
        super("NO_COMPLETED_BOOKINGS", String.format("Student %s has no completed bookings with tutor %s", studentId, tutorId));
        this.studentId = studentId;
        this.tutorId = tutorId;
    }

    public String getStudentId() {
        return studentId;
    }

    public String getTutorId() {
        return tutorId;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\review\exceptions\ReviewException.java
======================================================================

package com.tutoringplatform.review.exceptions;

import com.tutoringplatform.shared.exceptions.TutoringPlatformException;

public abstract class ReviewException extends TutoringPlatformException {
    protected ReviewException(String errorCode, String message) {
        super(errorCode, message);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\review\exceptions\ReviewNotFoundException.java
======================================================================

package com.tutoringplatform.review.exceptions;

public class ReviewNotFoundException extends ReviewException {
    private final String id;

    public ReviewNotFoundException(String id) {
        super("REVIEW_NOT_FOUND", String.format("Review with id %s not found", id));
        this.id = id;
    }

    public String getId() {
        return id;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\search\SearchController.java
======================================================================

package com.tutoringplatform.search;

import com.tutoringplatform.shared.dto.request.TutorSearchRequest;
import com.tutoringplatform.shared.dto.response.TutorSearchResultsResponse;
import com.tutoringplatform.subject.exceptions.SubjectNotFoundException;
import com.tutoringplatform.user.exceptions.UserNotFoundException;
import com.tutoringplatform.payment.exceptions.PaymentNotFoundException;
import com.tutoringplatform.review.exceptions.NoCompletedBookingsException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;

@RestController
@RequestMapping("/api/search")
public class SearchController {

    private final SearchService searchService;

    @Autowired
    public SearchController(SearchService searchService) {
        this.searchService = searchService;
    }

    @PostMapping("/tutors")
    public ResponseEntity<?> searchTutors(@RequestBody TutorSearchRequest request) throws SubjectNotFoundException, NoCompletedBookingsException, UserNotFoundException, PaymentNotFoundException {
        TutorSearchResultsResponse results = searchService.searchTutors(request);
        return ResponseEntity.ok(results);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\search\SearchService.java
======================================================================

package com.tutoringplatform.search;

import com.tutoringplatform.user.availability.model.TutorAvailability;
import com.tutoringplatform.booking.Booking;
import com.tutoringplatform.review.ReviewService;
import com.tutoringplatform.review.Review;
import com.tutoringplatform.subject.Subject;
import com.tutoringplatform.user.tutor.Tutor;
import com.tutoringplatform.booking.BookingService;
import com.tutoringplatform.subject.SubjectService;
import com.tutoringplatform.user.tutor.TutorService;
import com.tutoringplatform.user.availability.AvailabilityService;
import com.tutoringplatform.shared.dto.request.TutorSearchRequest;
import com.tutoringplatform.shared.dto.response.*;
import com.tutoringplatform.shared.dto.response.info.TutorSearchResultInfo;
import com.tutoringplatform.shared.util.DTOMapper;
import com.tutoringplatform.user.exceptions.UserNotFoundException;
import com.tutoringplatform.subject.exceptions.SubjectNotFoundException;
import com.tutoringplatform.review.exceptions.NoCompletedBookingsException;
import com.tutoringplatform.payment.exceptions.PaymentNotFoundException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.ZoneId;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class SearchService {

    private final Logger logger = LoggerFactory.getLogger(SearchService.class);
    private final TutorService tutorService;
    private final SubjectService subjectService;
    private final ReviewService reviewService;
    private final BookingService bookingService;
    private final AvailabilityService availabilityService;
    private final DTOMapper dtoMapper;

    @Autowired
    public SearchService(
            TutorService tutorService,
            SubjectService subjectService,
            ReviewService reviewService,
            BookingService bookingService,
            AvailabilityService availabilityService,
            DTOMapper dtoMapper) {
        this.tutorService = tutorService;
        this.subjectService = subjectService;
        this.reviewService = reviewService;
        this.bookingService = bookingService;
        this.availabilityService = availabilityService;
        this.dtoMapper = dtoMapper;
    }

    public TutorSearchResultsResponse searchTutors(TutorSearchRequest request) throws SubjectNotFoundException, NoCompletedBookingsException, UserNotFoundException, PaymentNotFoundException {
        // Start with all tutors
        logger.debug("Searching for tutors with request: {}", request);
        List<Tutor> tutors = tutorService.findAll();

        // Apply filters
        tutors = applyFilters(tutors, request);

        // Sort results
        tutors = sortResults(tutors, request.getSortBy());

        // Apply pagination
        int page = request.getPage() != null ? request.getPage() : 0;
        int pageSize = request.getPageSize() != null ? request.getPageSize() : 20;
        int totalCount = tutors.size();

        int startIndex = page * pageSize;
        int endIndex = Math.min(startIndex + pageSize, tutors.size());

        List<Tutor> paginatedTutors = startIndex < tutors.size() ? tutors.subList(startIndex, endIndex)
                : new ArrayList<>();

        // Convert to search results
        List<TutorSearchResultInfo> results = new ArrayList<>();
        for (Tutor tutor : paginatedTutors) {
            TutorSearchResultInfo result = buildSearchResult(tutor);
            results.add(result);
        }

        // Build filters for response
        SearchFilters appliedFilters = new SearchFilters();
        appliedFilters.setSubjectId(request.getSubjectId());
        appliedFilters.setMinPrice(request.getMinPrice());
        appliedFilters.setMaxPrice(request.getMaxPrice());
        appliedFilters.setMinRating(request.getMinRating());
        appliedFilters.setSortBy(request.getSortBy());

        logger.info("found {} tutors, search result {}", results.size(), results);
        return dtoMapper.toTutorSearchResultsResponse(results, totalCount, appliedFilters);
    }

    private List<Tutor> applyFilters(List<Tutor> tutors, TutorSearchRequest request) throws SubjectNotFoundException, NoCompletedBookingsException, UserNotFoundException, PaymentNotFoundException {
        // Filter by subject
        if (request.getSubjectId() != null) {
            Subject subject = subjectService.findById(request.getSubjectId());
            tutors = tutors.stream()
                    .filter(t -> t.getSubjects().contains(subject))
                    .collect(Collectors.toList());
        }

        // Filter by price range
        if (request.getMinPrice() > 0) {
            tutors = tutors.stream()
                    .filter(t -> t.getHourlyRate() >= request.getMinPrice())
                    .collect(Collectors.toList());
        }

        if (request.getMaxPrice() > 0) {
            tutors = tutors.stream()
                    .filter(t -> t.getHourlyRate() <= request.getMaxPrice())
                    .collect(Collectors.toList());
        }

        // Filter by minimum rating
        if (request.getMinRating() > 0) {
            Map<Tutor, Double> tutorRatings = new HashMap<>();
            
            for (Tutor tutor : tutors) {
                double avgRating = calculateAverageRating(tutor.getId());
                tutorRatings.put(tutor, avgRating);
            }
            tutors.sort(Comparator.comparing(tutorRatings::get).reversed());
        }

        

        // Filter by search text
        if (request.getSearchText() != null && !request.getSearchText().trim().isEmpty()) {
            String searchLower = request.getSearchText().toLowerCase();
            tutors = tutors.stream()
                    .filter(t -> t.getName().toLowerCase().contains(searchLower) ||
                            t.getDescription().toLowerCase().contains(searchLower) ||
                            t.getSubjects().stream()
                                    .anyMatch(s -> s.getName().toLowerCase().contains(searchLower)))
                    .collect(Collectors.toList());
        }

        // Filter by availability
        if (request.getAvailableNow() != null && request.getAvailableNow()) {
            tutors = filterByCurrentAvailability(tutors);
        } else if (request.getAvailableDateTime() != null) {
            tutors = filterBySpecificAvailability(tutors, request.getAvailableDateTime());
        }

        return tutors;
    }

    private List<Tutor> filterByCurrentAvailability(List<Tutor> tutors) {
        ZoneId userTimeZone = ZoneId.systemDefault(); // Should get from user context
        ZonedDateTime now = ZonedDateTime.now(userTimeZone);
        ZonedDateTime oneHourLater = now.plusHours(1);

        return tutors.stream()
                .filter(tutor -> {
                    try {
                        return availabilityService.isAvailable(
                                tutor.getId(), now, oneHourLater, userTimeZone);
                    } catch (Exception e) {
                        return false;
                    }
                })
                .collect(Collectors.toList());
    }

    private List<Tutor> filterBySpecificAvailability(List<Tutor> tutors, LocalDateTime dateTime) {
        ZoneId userTimeZone = ZoneId.systemDefault(); // Should get from user context
        ZonedDateTime start = dateTime.atZone(userTimeZone);
        ZonedDateTime end = start.plusHours(1); // Default 1 hour session

        return tutors.stream()
                .filter(tutor -> {
                    try {
                        return availabilityService.isAvailable(
                                tutor.getId(), start, end, userTimeZone);
                    } catch (Exception e) {
                        return false;
                    }
                })
                .collect(Collectors.toList());
    }

    private List<Tutor> sortResults(List<Tutor> tutors, String sortBy) throws NoCompletedBookingsException, UserNotFoundException, PaymentNotFoundException {
        if (sortBy == null) {
            sortBy = "RATING"; // Default sort
        }

        switch (sortBy) {
            case "PRICE_LOW":
                tutors.sort(Comparator.comparing(Tutor::getHourlyRate));
                break;
            case "PRICE_HIGH":
                tutors.sort(Comparator.comparing(Tutor::getHourlyRate).reversed());
                break;
            case "RATING":
                Map<Tutor, Double> tutorRatings = new HashMap<>();
                for (Tutor tutor : tutors) {
                    double rating = calculateAverageRating(tutor.getId());
                    tutorRatings.put(tutor, rating);
                }
                tutors.sort(Comparator.comparing(tutorRatings::get).reversed());
                break;
            case "REVIEWS":
                Map<Tutor, Integer> tutorReviews = new HashMap<>();
                for (Tutor tutor : tutors) {
                    int reviewCount = reviewService.getTutorReviews(tutor.getId()).size();
                    tutorReviews.put(tutor, reviewCount);
                }
                tutors.sort(Comparator.comparing(tutorReviews::get).reversed());
                break;
        }

        return tutors;
    }

    private TutorSearchResultInfo buildSearchResult(Tutor tutor) throws NoCompletedBookingsException, UserNotFoundException, PaymentNotFoundException {
        // Calculate average rating
        double averageRating = calculateAverageRating(tutor.getId());

        // Get review count
        int reviewCount = reviewService.getTutorReviews(tutor.getId()).size();

        // Create short description (first 100 chars)
        String shortDescription = tutor.getDescription();
        if (shortDescription.length() > 100) {
            shortDescription = shortDescription.substring(0, 97) + "...";
        }

        // Find next available slot
        LocalDateTime nextAvailable = findNextAvailableSlot(tutor.getId());

        return dtoMapper.toTutorSearchResult(
                tutor,
                averageRating,
                reviewCount,
                shortDescription,
                nextAvailable);
    }

    private double calculateAverageRating(String tutorId) throws NoCompletedBookingsException, UserNotFoundException {
        List<Review> reviews = reviewService.getTutorReviews(tutorId);
        if (reviews.isEmpty()) {
            return 0.0;
        }

        return reviews.stream()
                .mapToDouble(Review::getRating)
                .average()
                .orElse(0.0);
    }

    private LocalDateTime findNextAvailableSlot(String tutorId) throws UserNotFoundException, PaymentNotFoundException {
        // Get tutor's availability
        TutorAvailability availability = availabilityService.getAvailability(tutorId);
        if (availability.getRecurringSlots().isEmpty()) {
            return null;
        }

        // Get existing bookings
        List<Booking> bookings = bookingService.getTutorBookingList(tutorId);
        bookings = bookings.stream()
                .filter(b -> b.getStatus() != Booking.BookingStatus.CANCELLED)
                .filter(b -> b.getDateTime().isAfter(LocalDateTime.now()))
                .collect(Collectors.toList());

        // Find next available slot (simplified - would need more complex logic)
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime checkTime = now.plusHours(1); // Start checking from 1 hour from now

        // Check next 7 days
        for (int i = 0; i < 168; i++) { // 168 hours = 7 days
            LocalDateTime slotTime = checkTime.plusHours(i);
            ZonedDateTime slotStart = slotTime.atZone(availability.getTimeZone());
            ZonedDateTime slotEnd = slotStart.plusHours(1);

            // Check if this slot is available
            boolean isAvailable = availabilityService.isAvailable(
                    tutorId, slotStart, slotEnd, availability.getTimeZone());

            if (isAvailable) {
                // Check if not already booked
                boolean isBooked = bookings.stream()
                        .anyMatch(b -> {
                            LocalDateTime bookingEnd = b.getDateTime().plusHours(b.getDurationHours());
                            return !slotTime.isAfter(bookingEnd) && !slotTime.plusHours(1).isBefore(b.getDateTime());
                        });

                if (!isBooked) {
                    return slotTime;
                }
            }
        }

        return null;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\IRepository.java
======================================================================

package com.tutoringplatform.shared;

import java.util.List;

public interface IRepository<T> {
    T findById(String id);
    List<T> findAll();
    void save(T entity);
    void update(T entity);
    void delete(String id);
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\request\AddFundsRequest.java
======================================================================

package com.tutoringplatform.shared.dto.request;

public class AddFundsRequest {
    private double amount;

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\request\AddSubjectToTutorRequest.java
======================================================================

package com.tutoringplatform.shared.dto.request;

public class AddSubjectToTutorRequest {
    private String subjectId;

    public String getSubjectId() {
        return subjectId;
    }

    public void setSubjectId(String subjectId) {
        this.subjectId = subjectId;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\request\CreateBookingRequest.java
======================================================================

package com.tutoringplatform.shared.dto.request;

import java.time.LocalDateTime;

public class CreateBookingRequest {
    private String studentId;
    private String tutorId;
    private String subjectId;
    private LocalDateTime dateTime;
    private int durationHours;

    public String getStudentId() {
        return studentId;
    }

    public void setStudentId(String studentId) {
        this.studentId = studentId;
    }

    public String getTutorId() {
        return tutorId;
    }

    public void setTutorId(String tutorId) {
        this.tutorId = tutorId;
    }

    public String getSubjectId() {
        return subjectId;
    }

    public void setSubjectId(String subjectId) {
        this.subjectId = subjectId;
    }

    public LocalDateTime getDateTime() {
        return dateTime;
    }

    public void setDateTime(LocalDateTime dateTime) {
        this.dateTime = dateTime;
    }

    public int getDurationHours() {
        return durationHours;
    }

    public void setDurationHours(int durationHours) {
        this.durationHours = durationHours;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\request\CreateReviewRequest.java
======================================================================

package com.tutoringplatform.shared.dto.request;

public class CreateReviewRequest {
    private String studentId;
    private String tutorId;
    private int rating;
    private String comment;

    public String getStudentId() {
        return studentId;
    }

    public void setStudentId(String studentId) {
        this.studentId = studentId;
    }

    public String getTutorId() {
        return tutorId;
    }

    public void setTutorId(String tutorId) {
        this.tutorId = tutorId;
    }

    public int getRating() {
        return rating;
    }

    public void setRating(int rating) {
        this.rating = rating;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\request\CreateSubjectRequest.java
======================================================================

package com.tutoringplatform.shared.dto.request;

public class CreateSubjectRequest {
    private String name;
    private String category;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\request\LoginRequest.java
======================================================================

package com.tutoringplatform.shared.dto.request;

public class LoginRequest {
    private String email;
    private String password;

    // Getters and setters
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\request\SignupRequest.java
======================================================================

package com.tutoringplatform.shared.dto.request;

public class SignupRequest {
    private String userType; // "STUDENT" or "TUTOR"
    private String name;
    private String email;
    private String password;
    private String timeZoneId;
    private double hourlyRate; // Required if tutor
    private String description; // Required if tutor

    public String getUserType() {
        return userType;
    }

    public void setUserType(String userType) {
        this.userType = userType;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getTimeZoneId() {
        return timeZoneId;
    }

    public void setTimeZoneId(String timeZoneId) {
        this.timeZoneId = timeZoneId;
    }

    public double getHourlyRate() {
        return hourlyRate;
    }

    public void setHourlyRate(double hourlyRate) {
        this.hourlyRate = hourlyRate;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\request\TutorAvailabilityRequest.java
======================================================================

package com.tutoringplatform.shared.dto.request;

import java.time.DayOfWeek;
import java.time.LocalTime;

public class TutorAvailabilityRequest {
    private String action; // "ADD" or "REMOVE"
    private DayOfWeek dayOfWeek;
    private LocalTime startTime;
    private LocalTime endTime;

    // All getters and setters
    public String getAction() {
        return action;
    }

    public void setAction(String action) {
        this.action = action;
    }

    public DayOfWeek getDayOfWeek() {
        return dayOfWeek;
    }

    public void setDayOfWeek(DayOfWeek dayOfWeek) {
        this.dayOfWeek = dayOfWeek;
    }

    public LocalTime getStartTime() {
        return startTime;
    }

    public void setStartTime(LocalTime startTime) {
        this.startTime = startTime;
    }

    public LocalTime getEndTime() {
        return endTime;
    }

    public void setEndTime(LocalTime endTime) {
        this.endTime = endTime;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\request\TutorSearchRequest.java
======================================================================

package com.tutoringplatform.shared.dto.request;

import java.time.LocalDateTime;

public class TutorSearchRequest {
    private String subjectId;
    private double minPrice;
    private double maxPrice;
    private double minRating;
    private Boolean availableNow;
    private LocalDateTime availableDateTime;
    private String searchText;
    private String sortBy; // "PRICE_LOW", "PRICE_HIGH", "RATING", "REVIEWS"
    private Integer page;
    private Integer pageSize;

    // All getters and setters
    public String getSubjectId() {
        return subjectId;
    }

    public void setSubjectId(String subjectId) {
        this.subjectId = subjectId;
    }

    public double getMinPrice() {
        return minPrice;
    }

    public void setMinPrice(double minPrice) {
        this.minPrice = minPrice;
    }

    public double getMaxPrice() {
        return maxPrice;
    }

    public void setMaxPrice(double maxPrice) {
        this.maxPrice = maxPrice;
    }

    public double getMinRating() {
        return minRating;
    }

    public void setMinRating(double minRating) {
        this.minRating = minRating;
    }

    public Boolean getAvailableNow() {
        return availableNow;
    }

    public void setAvailableNow(Boolean availableNow) {
        this.availableNow = availableNow;
    }

    public LocalDateTime getAvailableDateTime() {
        return availableDateTime;
    }

    public void setAvailableDateTime(LocalDateTime availableDateTime) {
        this.availableDateTime = availableDateTime;
    }

    public String getSearchText() {
        return searchText;
    }

    public void setSearchText(String searchText) {
        this.searchText = searchText;
    }

    public String getSortBy() {
        return sortBy;
    }

    public void setSortBy(String sortBy) {
        this.sortBy = sortBy;
    }

    public Integer getPage() {
        return page;
    }

    public void setPage(Integer page) {
        this.page = page;
    }

    public Integer getPageSize() {
        return pageSize;
    }

    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\request\UpdateBookingRequest.java
======================================================================

package com.tutoringplatform.shared.dto.request;

import java.time.LocalDateTime;

public class UpdateBookingRequest {
    private LocalDateTime dateTime;
    private int durationHours;

    public LocalDateTime getDateTime() {
        return dateTime;
    }

    public void setDateTime(LocalDateTime dateTime) {
        this.dateTime = dateTime;
    }

    public int getDurationHours() {
        return durationHours;
    }

    public void setDurationHours(int durationHours) {
        this.durationHours = durationHours;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\request\UpdateProfileRequest.java
======================================================================

package com.tutoringplatform.shared.dto.request;

public class UpdateProfileRequest {
    private String name;
    private String email;
    private String password;
    private String currentPassword; // Required if changing password
    private String timeZoneId;
    private double hourlyRate; // Tutor only
    private String description; // Tutor only

    // All getters and setters
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getCurrentPassword() {
        return currentPassword;
    }

    public void setCurrentPassword(String currentPassword) {
        this.currentPassword = currentPassword;
    }

    public String getTimeZoneId() {
        return timeZoneId;
    }

    public void setTimeZoneId(String timeZoneId) {
        this.timeZoneId = timeZoneId;
    }

    public double getHourlyRate() {
        return hourlyRate;
    }

    public void setHourlyRate(double hourlyRate) {
        this.hourlyRate = hourlyRate;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\AuthResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

public class AuthResponse {
    private String id;
    private String name;
    private String email;
    private String userType;
    private double balance; // Students only
    private double hourlyRate; // Tutors only
    private String profilePictureUrl;
    private String timeZoneId;

    // All getters and setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getUserType() {
        return userType;
    }

    public void setUserType(String userType) {
        this.userType = userType;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    public double getHourlyRate() {
        return hourlyRate;
    }

    public void setHourlyRate(double hourlyRate) {
        this.hourlyRate = hourlyRate;
    }

    public String getProfilePictureUrl() {
        return profilePictureUrl;
    }

    public void setProfilePictureUrl(String profilePictureUrl) {
        this.profilePictureUrl = profilePictureUrl;
    }

    public String getTimeZoneId() {
        return timeZoneId;
    }

    public void setTimeZoneId(String timeZoneId) {
        this.timeZoneId = timeZoneId;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\AvailabilityResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import com.tutoringplatform.user.availability.model.AvailabilityException;
import com.tutoringplatform.user.availability.model.RecurringAvailability;

import java.time.LocalDateTime;
import java.util.List;

public class AvailabilityResponse {
    private String tutorId;
    private String timeZone;
    private List<RecurringAvailability> regularSchedule;
    private List<AvailabilityException> exceptions;
    private LocalDateTime nextAvailableSlot;

    public String getTutorId() {
        return tutorId;
    }

    public void setTutorId(String tutorId) {
        this.tutorId = tutorId;
    }

    public String getTimeZone() {
        return timeZone;
    }

    public void setTimeZone(String timeZone) {
        this.timeZone = timeZone;
    }

    public List<RecurringAvailability> getRegularSchedule() {
        return regularSchedule;
    }

    public void setRegularSchedule(List<RecurringAvailability> regularSchedule) {
        this.regularSchedule = regularSchedule;
    }

    public List<AvailabilityException> getExceptions() {
        return exceptions;
    }

    public void setExceptions(List<AvailabilityException> exceptions) {
        this.exceptions = exceptions;
    }

    public LocalDateTime getNextAvailableSlot() {
        return nextAvailableSlot;
    }

    public void setNextAvailableSlot(LocalDateTime nextAvailableSlot) {
        this.nextAvailableSlot = nextAvailableSlot;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\BookingDetailResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import com.tutoringplatform.shared.dto.response.info.PaymentInfo;
import com.tutoringplatform.shared.dto.response.info.TutorInfo;
import com.tutoringplatform.shared.dto.response.info.UserInfo;

import java.time.LocalDateTime;

public class BookingDetailResponse {
    private String id;
    private UserInfo student;
    private TutorInfo tutor;
    private SubjectResponse subject;
    private LocalDateTime dateTime;
    private int durationHours;
    private double totalCost;
    private String status;
    private PaymentInfo payment;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public UserInfo getStudent() {
        return student;
    }

    public void setStudent(UserInfo student) {
        this.student = student;
    }

    public TutorInfo getTutor() {
        return tutor;
    }

    public void setTutor(TutorInfo tutor) {
        this.tutor = tutor;
    }

    public SubjectResponse getSubject() {
        return subject;
    }

    public void setSubject(SubjectResponse subject) {
        this.subject = subject;
    }

    public LocalDateTime getDateTime() {
        return dateTime;
    }

    public void setDateTime(LocalDateTime dateTime) {
        this.dateTime = dateTime;
    }

    public int getDurationHours() {
        return durationHours;
    }

    public void setDurationHours(int durationHours) {
        this.durationHours = durationHours;
    }

    public double getTotalCost() {
        return totalCost;
    }

    public void setTotalCost(double totalCost) {
        this.totalCost = totalCost;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public PaymentInfo getPayment() {
        return payment;
    }

    public void setPayment(PaymentInfo payment) {
        this.payment = payment;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\BookingListResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import java.util.List;

public class BookingListResponse {
    private List<BookingDetailResponse> upcomingBookings;
    private List<BookingDetailResponse> pastBookings;
    private List<BookingDetailResponse> cancelledBookings;

    // All getters and setters
    public List<BookingDetailResponse> getUpcomingBookings() {
        return upcomingBookings;
    }

    public void setUpcomingBookings(List<BookingDetailResponse> upcomingBookings) {
        this.upcomingBookings = upcomingBookings;
    }

    public List<BookingDetailResponse> getPastBookings() {
        return pastBookings;
    }

    public void setPastBookings(List<BookingDetailResponse> pastBookings) {
        this.pastBookings = pastBookings;
    }

    public List<BookingDetailResponse> getCancelledBookings() {
        return cancelledBookings;
    }

    public void setCancelledBookings(List<BookingDetailResponse> cancelledBookings) {
        this.cancelledBookings = cancelledBookings;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\CategorySubjects.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import com.tutoringplatform.shared.dto.response.info.SubjectInfo;

import java.util.List;

public class CategorySubjects {
    private String category;
    private List<SubjectInfo> subjects;

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public List<SubjectInfo> getSubjects() {
        return subjects;
    }

    public void setSubjects(List<SubjectInfo> subjects) {
        this.subjects = subjects;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\DashboardStats.java
======================================================================

package com.tutoringplatform.shared.dto.response;

public class DashboardStats {
    private int totalSessions;
    private int completedSessions;
    private int upcomingSessions;
    private double totalEarnings; // Tutors only
    private double thisMonthEarnings; // Tutors only
    private double averageRating; // Tutors only
    private int totalReviews; // Tutors only

    // All getters and setters
    public int getTotalSessions() {
        return totalSessions;
    }

    public void setTotalSessions(int totalSessions) {
        this.totalSessions = totalSessions;
    }

    public int getCompletedSessions() {
        return completedSessions;
    }

    public void setCompletedSessions(int completedSessions) {
        this.completedSessions = completedSessions;
    }

    public int getUpcomingSessions() {
        return upcomingSessions;
    }

    public void setUpcomingSessions(int upcomingSessions) {
        this.upcomingSessions = upcomingSessions;
    }

    public double getTotalEarnings() {
        return totalEarnings;
    }

    public void setTotalEarnings(double totalEarnings) {
        this.totalEarnings = totalEarnings;
    }

    public double getThisMonthEarnings() {
        return thisMonthEarnings;
    }

    public void setThisMonthEarnings(double thisMonthEarnings) {
        this.thisMonthEarnings = thisMonthEarnings;
    }

    public double getAverageRating() {
        return averageRating;
    }

    public void setAverageRating(double averageRating) {
        this.averageRating = averageRating;
    }

    public int getTotalReviews() {
        return totalReviews;
    }

    public void setTotalReviews(int totalReviews) {
        this.totalReviews = totalReviews;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\ErrorResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import java.time.LocalDateTime;

public class ErrorResponse {
    private String code;
    private String message;
    private LocalDateTime timestamp;
    private String details;

    public ErrorResponse(String code, String message) {
        this.code = code;
        this.message = message;
        this.timestamp = LocalDateTime.now();
    }

    public String getCode() {
        return code;
    }
    
    public void setCode(String code) {
        this.code = code;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public LocalDateTime getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
    }

    public String getDetails() {
        return details;
    }

    public void setDetails(String details) {
        this.details = details;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\NotificationListResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import java.util.List;

import com.tutoringplatform.notification.Notification;

public class NotificationListResponse {
    private List<Notification> notifications;
    private int unreadCount;
    private int totalCount;

    // Getters and setters
    public List<Notification> getNotifications() {
        return notifications;
    }

    public void setNotifications(List<Notification> notifications) {
        this.notifications = notifications;
        this.totalCount = notifications != null ? notifications.size() : 0;
    }

    public int getUnreadCount() {
        return unreadCount;
    }

    public void setUnreadCount(int unreadCount) {
        this.unreadCount = unreadCount;
    }

    public int getTotalCount() {
        return totalCount;
    }

    public void setTotalCount(int totalCount) {
        this.totalCount = totalCount;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\NotificationResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import java.time.LocalDateTime;

public class NotificationResponse {
    private String id;
    private String type;
    private String title;
    private String message;
    private String actionUrl;
    private boolean read;
    private LocalDateTime createdAt;
    private String timeAgo; // "5 minutes ago", "2 hours ago", etc.

    // Getters and setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getActionUrl() {
        return actionUrl;
    }

    public void setActionUrl(String actionUrl) {
        this.actionUrl = actionUrl;
    }

    public boolean isRead() {
        return read;
    }

    public void setRead(boolean read) {
        this.read = read;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public String getTimeAgo() {
        return timeAgo;
    }

    public void setTimeAgo(String timeAgo) {
        this.timeAgo = timeAgo;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\PaymentHistoryResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import java.util.List;

public class PaymentHistoryResponse {
    private List<PaymentResponse> payments;
    private int currentPage;
    private int totalPages;
    private long totalItems;
    private double totalAmount; // Sum of all payments in the result

    // Getters and setters
    public List<PaymentResponse> getPayments() {
        return payments;
    }

    public void setPayments(List<PaymentResponse> payments) {
        this.payments = payments;
    }

    public int getCurrentPage() {
        return currentPage;
    }

    public void setCurrentPage(int currentPage) {
        this.currentPage = currentPage;
    }

    public int getTotalPages() {
        return totalPages;
    }

    public void setTotalPages(int totalPages) {
        this.totalPages = totalPages;
    }

    public long getTotalItems() {
        return totalItems;
    }

    public void setTotalItems(long totalItems) {
        this.totalItems = totalItems;
    }

    public double getTotalAmount() {
        return totalAmount;
    }

    public void setTotalAmount(double totalAmount) {
        this.totalAmount = totalAmount;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\PaymentResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import com.tutoringplatform.shared.dto.response.info.BookingInfo;

import java.time.LocalDateTime;

// Single payment details
public class PaymentResponse {
    private String id;
    private String bookingId;
    private double amount;
    private String status;
    private LocalDateTime timestamp;
    private String transactionId;
    private BookingInfo bookingInfo;

    // Getters and setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getBookingId() {
        return bookingId;
    }

    public void setBookingId(String bookingId) {
        this.bookingId = bookingId;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public LocalDateTime getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
    }

    public String getTransactionId() {
        return transactionId;
    }

    public void setTransactionId(String transactionId) {
        this.transactionId = transactionId;
    }

    public BookingInfo getBookingInfo() {
        return bookingInfo;
    }

    public void setBookingInfo(BookingInfo bookingInfo) { this.bookingInfo = bookingInfo; }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\ReviewResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import com.tutoringplatform.shared.dto.response.info.ReviewInfo;
import com.tutoringplatform.shared.dto.response.info.UserInfo;

import java.time.LocalDateTime;

public class ReviewResponse {
    private String id;
    private ReviewInfo review;
    private UserInfo studentInfo;
    private UserInfo tutorInfo;
    private int rating;
    private String comment;
    private LocalDateTime createdAt;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public ReviewInfo getReview() {
        return review;
    }

    public void setReview(ReviewInfo review) {
        this.review = review;
    }

    public UserInfo getStudentInfo() {
        return studentInfo;
    }

    public void setStudentInfo(UserInfo studentInfo) {
        this.studentInfo = studentInfo;
    }

    public UserInfo getTutorInfo() {
        return tutorInfo;
    }

    public void setTutorInfo(UserInfo tutorInfo) {
        this.tutorInfo = tutorInfo;
    }

    public int getRating() {
        return rating;
    }

    public void setRating(int rating) {
        this.rating = rating;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\SearchFilters.java
======================================================================

package com.tutoringplatform.shared.dto.response;

public class SearchFilters {
    private String subjectId;
    private double minPrice;
    private double maxPrice;
    private double minRating;
    private String sortBy;

    // All getters and setters
    public String getSubjectId() {
        return subjectId;
    }

    public void setSubjectId(String subjectId) {
        this.subjectId = subjectId;
    }

    public double getMinPrice() {
        return minPrice;
    }

    public void setMinPrice(double minPrice) {
        this.minPrice = minPrice;
    }

    public double getMaxPrice() {
        return maxPrice;
    }

    public void setMaxPrice(double maxPrice) {
        this.maxPrice = maxPrice;
    }

    public double getMinRating() {
        return minRating;
    }

    public void setMinRating(double minRating) {
        this.minRating = minRating;
    }

    public String getSortBy() {
        return sortBy;
    }

    public void setSortBy(String sortBy) {
        this.sortBy = sortBy;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\StudentDashboardResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import java.util.List;

public class StudentDashboardResponse {
    private UserProfile profile;
    private DashboardStats stats;
    private List<BookingDetailResponse> upcomingBookings;

    // All getters and setters
    public UserProfile getProfile() {
        return profile;
    }

    public void setProfile(UserProfile profile) {
        this.profile = profile;
    }

    public DashboardStats getStats() {
        return stats;
    }

    public void setStats(DashboardStats stats) {
        this.stats = stats;
    }

    public List<BookingDetailResponse> getUpcomingBookings() {
        return upcomingBookings;
    }

    public void setUpcomingBookings(List<BookingDetailResponse> upcomingBookings) {
        this.upcomingBookings = upcomingBookings;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\StudentProfileResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import java.time.LocalDate;

public class StudentProfileResponse {
    private String id;
    private String name;
    private String email;
    private String profilePictureUrl;
    private double balance;
    private String timeZoneId;
    private LocalDate joinedDate;
    private int totalSessions;

    // All getters and setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getProfilePictureUrl() {
        return profilePictureUrl;
    }

    public void setProfilePictureUrl(String profilePictureUrl) {
        this.profilePictureUrl = profilePictureUrl;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    public String getTimeZoneId() {
        return timeZoneId;
    }

    public void setTimeZoneId(String timeZoneId) {
        this.timeZoneId = timeZoneId;
    }

    public LocalDate getJoinedDate() {
        return joinedDate;
    }

    public void setJoinedDate(LocalDate joinedDate) {
        this.joinedDate = joinedDate;
    }

    public int getTotalSessions() {
        return totalSessions;
    }

    public void setTotalSessions(int totalSessions) {
        this.totalSessions = totalSessions;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\SubjectListResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import java.util.List;

public class SubjectListResponse {
    private List<CategorySubjects> subjects;

    public List<CategorySubjects> getSubjects() {
        return subjects;
    }

    public void setSubjects(List<CategorySubjects> subjects) {
        this.subjects = subjects;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\SubjectResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

public class SubjectResponse {
    private String id;
    private String name;
    private String category;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\TutorDashboardResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import java.util.List;

public class TutorDashboardResponse {
    private UserProfile profile;
    private DashboardStats stats;
    private List<BookingDetailResponse> upcomingBookings;
    private List<BookingDetailResponse> todaysSchedule;

    // All getters and setters
    public UserProfile getProfile() {
        return profile;
    }

    public void setProfile(UserProfile profile) {
        this.profile = profile;
    }

    public DashboardStats getStats() {
        return stats;
    }

    public void setStats(DashboardStats stats) {
        this.stats = stats;
    }

    public List<BookingDetailResponse> getUpcomingBookings() {
        return upcomingBookings;
    }

    public void setUpcomingBookings(List<BookingDetailResponse> upcomingBookings) {
        this.upcomingBookings = upcomingBookings;
    }

    public List<BookingDetailResponse> getTodaysSchedule() {
        return todaysSchedule;
    }

    public void setTodaysSchedule(List<BookingDetailResponse> todaysSchedule) {
        this.todaysSchedule = todaysSchedule;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\TutorProfileResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import com.tutoringplatform.user.availability.model.RecurringAvailability;

import java.time.LocalDate;
import java.util.List;

public class TutorProfileResponse {
    private String id;
    private String name;
    private String email;
    private String profilePictureUrl;
    private double hourlyRate;
    private String description;
    private double rating;
    private int totalReviews;
    private List<SubjectResponse> subjects;
    private List<RecurringAvailability> availability;
    private List<ReviewResponse> reviews;
    private int completedSessions;
    private LocalDate joinedDate;

    // All getters and setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getProfilePictureUrl() {
        return profilePictureUrl;
    }

    public void setProfilePictureUrl(String profilePictureUrl) {
        this.profilePictureUrl = profilePictureUrl;
    }

    public double getHourlyRate() {
        return hourlyRate;
    }

    public void setHourlyRate(double hourlyRate) {
        this.hourlyRate = hourlyRate;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public double getRating() {
        return rating;
    }

    public void setRating(double rating) {
        this.rating = rating;
    }

    public int getTotalReviews() {
        return totalReviews;
    }

    public void setTotalReviews(int totalReviews) {
        this.totalReviews = totalReviews;
    }

    public List<SubjectResponse> getSubjects() {
        return subjects;
    }

    public void setSubjects(List<SubjectResponse> subjects) {
        this.subjects = subjects;
    }

    public List<RecurringAvailability> getAvailability() {
        return availability;
    }

    public void setAvailability(List<RecurringAvailability> availability) {
        this.availability = availability;
    }

    public List<ReviewResponse> getReviews() {
        return reviews;
    }

    public void setReviews(List<ReviewResponse> reviews) {
        this.reviews = reviews;
    }

    public int getCompletedSessions() {
        return completedSessions;
    }

    public void setCompletedSessions(int completedSessions) {
        this.completedSessions = completedSessions;
    }

    public LocalDate getJoinedDate() {
        return joinedDate;
    }

    public void setJoinedDate(LocalDate joinedDate) {
        this.joinedDate = joinedDate;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\TutorSearchResultsResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

import com.tutoringplatform.shared.dto.response.info.TutorSearchResultInfo;

import java.util.List;

public class TutorSearchResultsResponse {
    private List<TutorSearchResultInfo> results;
    private int totalCount;
    private SearchFilters filters;

    // All getters and setters
    public List<TutorSearchResultInfo> getResults() {
        return results;
    }

    public void setResults(List<TutorSearchResultInfo> results) {
        this.results = results;
    }

    public int getTotalCount() {
        return totalCount;
    }

    public void setTotalCount(int totalCount) {
        this.totalCount = totalCount;
    }

    public SearchFilters getFilters() {
        return filters;
    }

    public void setFilters(SearchFilters filters) {
        this.filters = filters;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\UserProfile.java
======================================================================

package com.tutoringplatform.shared.dto.response;

public class UserProfile {
    private String name;
    private double balance; // Students only
    private double hourlyRate; // Tutors only
    private String profilePictureUrl;

    // All getters and setters
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    public double getHourlyRate() {
        return hourlyRate;
    }

    public void setHourlyRate(double hourlyRate) {
        this.hourlyRate = hourlyRate;
    }

    public String getProfilePictureUrl() {
        return profilePictureUrl;
    }

    public void setProfilePictureUrl(String profilePictureUrl) {
        this.profilePictureUrl = profilePictureUrl;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\ValueResponse.java
======================================================================

package com.tutoringplatform.shared.dto.response;

public class ValueResponse<T> {
    private T value;
    private String message;

    public T getValue() {
        return value;
    }

    public void setValue(T value) {
        this.value = value;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\info\BookingInfo.java
======================================================================

package com.tutoringplatform.shared.dto.response.info;

import java.time.LocalDateTime;

public class BookingInfo {
    private String bookingId;
    private String tutorName;
    private String subjectName;
    private LocalDateTime sessionDate;

    // Getters and setters
    public String getBookingId() {
        return bookingId;
    }

    public void setBookingId(String bookingId) {
        this.bookingId = bookingId;
    }

    public String getTutorName() {
        return tutorName;
    }

    public void setTutorName(String tutorName) {
        this.tutorName = tutorName;
    }

    public String getSubjectName() {
        return subjectName;
    }

    public void setSubjectName(String subjectName) {
        this.subjectName = subjectName;
    }

    public LocalDateTime getSessionDate() {
        return sessionDate;
    }

    public void setSessionDate(LocalDateTime sessionDate) {
        this.sessionDate = sessionDate;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\info\PaymentInfo.java
======================================================================

package com.tutoringplatform.shared.dto.response.info;

import java.time.LocalDateTime;

public class PaymentInfo {
    private String status;
    private LocalDateTime paidAt;

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public LocalDateTime getPaidAt() {
        return paidAt;
    }

    public void setPaidAt(LocalDateTime paidAt) {
        this.paidAt = paidAt;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\info\ReviewInfo.java
======================================================================

package com.tutoringplatform.shared.dto.response.info;

public class ReviewInfo {
    private int rating;
    private String comment;

    public int getRating() {
        return rating;
    }

    public void setRating(int rating) {
        this.rating = rating;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\info\SubjectInfo.java
======================================================================

package com.tutoringplatform.shared.dto.response.info;

public class SubjectInfo {
    private String id;
    private String name;
    private int tutorCount;
    private double averagePrice;

    // All getters and setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getTutorCount() {
        return tutorCount;
    }

    public void setTutorCount(int tutorCount) {
        this.tutorCount = tutorCount;
    }

    public double getAveragePrice() {
        return averagePrice;
    }

    public void setAveragePrice(double averagePrice) {
        this.averagePrice = averagePrice;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\info\TutorInfo.java
======================================================================

package com.tutoringplatform.shared.dto.response.info;

public class TutorInfo extends UserInfo {
    private double hourlyRate;

    public double getHourlyRate() {
        return hourlyRate;
    }

    public void setHourlyRate(double hourlyRate) {
        this.hourlyRate = hourlyRate;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\info\TutorSearchResultInfo.java
======================================================================

package com.tutoringplatform.shared.dto.response.info;

import java.time.LocalDateTime;
import java.util.List;

import com.tutoringplatform.shared.dto.response.SubjectResponse;

public class TutorSearchResultInfo {
    private String id;
    private String name;
    private String profilePictureUrl;
    private double hourlyRate;
    private double rating;
    private int reviewCount;
    private List<SubjectResponse> subjects;
    private String shortDescription;
    private LocalDateTime nextAvailable;

    // All getters and setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getProfilePictureUrl() {
        return profilePictureUrl;
    }

    public void setProfilePictureUrl(String profilePictureUrl) {
        this.profilePictureUrl = profilePictureUrl;
    }

    public double getHourlyRate() {
        return hourlyRate;
    }

    public void setHourlyRate(double hourlyRate) {
        this.hourlyRate = hourlyRate;
    }

    public double getRating() {
        return rating;
    }

    public void setRating(double rating) {
        this.rating = rating;
    }

    public int getReviewCount() {
        return reviewCount;
    }

    public void setReviewCount(int reviewCount) {
        this.reviewCount = reviewCount;
    }

    public List<SubjectResponse> getSubjects() {
        return subjects;
    }

    public void setSubjects(List<SubjectResponse> subjects) {
        this.subjects = subjects;
    }

    public String getShortDescription() {
        return shortDescription;
    }

    public void setShortDescription(String shortDescription) {
        this.shortDescription = shortDescription;
    }

    public LocalDateTime getNextAvailable() {
        return nextAvailable;
    }

    public void setNextAvailable(LocalDateTime nextAvailable) {
        this.nextAvailable = nextAvailable;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\dto\response\info\UserInfo.java
======================================================================

package com.tutoringplatform.shared.dto.response.info;

public class UserInfo {
    private String id;
    private String name;
    private String profilePictureUrl;

    // All getters and setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getProfilePictureUrl() {
        return profilePictureUrl;
    }

    public void setProfilePictureUrl(String profilePictureUrl) {
        this.profilePictureUrl = profilePictureUrl;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\exceptions\GlobalExceptionHandler.java
======================================================================

package com.tutoringplatform.shared.exceptions;

import com.tutoringplatform.authentication.exceptions.AuthenticationException;
import com.tutoringplatform.booking.exceptions.BookingException;
import com.tutoringplatform.user.exceptions.UserException;
import com.tutoringplatform.user.student.exceptions.StudentException;
import com.tutoringplatform.user.tutor.exceptions.TutorException;
import com.tutoringplatform.payment.exceptions.PaymentException;
import com.tutoringplatform.review.exceptions.ReviewException;
import com.tutoringplatform.subject.exceptions.SubjectException;
import com.tutoringplatform.shared.dto.response.ErrorResponse;
import com.tutoringplatform.file.exception.FileException;

import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RestControllerAdvice
public class GlobalExceptionHandler {
    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    // ========== TUTORING PLATFORM EXCEPTIONS ==========

        @ExceptionHandler(UserException.class)
        public ResponseEntity<ErrorResponse> handleUserException(UserException e) {
            HttpStatus status = determineUserStatus(e);
            logger.warn("User error: {} - {}", e.getErrorCode(), e.getMessage());

            ErrorResponse error = new ErrorResponse(
                    e.getErrorCode(),
                    e.getMessage());

            return ResponseEntity.status(status).body(error);
        }

        @ExceptionHandler(StudentException.class)
        public ResponseEntity<ErrorResponse> handleStudentException(StudentException e) {
            HttpStatus status = determineStudentStatus(e);
            logger.warn("Student error: {} - {}", e.getErrorCode(), e.getMessage());

            ErrorResponse error = new ErrorResponse(
                    e.getErrorCode(),
                    e.getMessage());

            return ResponseEntity.status(status).body(error);
        }

        // ========== TUTOR EXCEPTIONS ==========
        @ExceptionHandler(TutorException.class)
        public ResponseEntity<ErrorResponse> handleTutorException(TutorException e) {
            HttpStatus status = determineTutorStatus(e);
            logger.warn("Tutor error: {} - {}", e.getErrorCode(), e.getMessage());

            ErrorResponse error = new ErrorResponse(
                    e.getErrorCode(),
                    e.getMessage());

            return ResponseEntity.status(status).body(error);
        }

        @ExceptionHandler(AuthenticationException.class)
        public ResponseEntity<ErrorResponse> handleAuthException(AuthenticationException e) {
            HttpStatus status = determineAuthStatus(e);

            ErrorResponse error = new ErrorResponse(
                    e.getErrorCode(),
                    e.getMessage());

            return ResponseEntity.status(status).body(error);
        }

        @ExceptionHandler(ReviewException.class)
        public ResponseEntity<ErrorResponse> handleReviewException(ReviewException e) {
            HttpStatus status = determineReviewStatus(e);

            ErrorResponse error = new ErrorResponse(
                    e.getErrorCode(),
                    e.getMessage());

            return ResponseEntity.status(status).body(error);
        }

        @ExceptionHandler(BookingException.class)
        public ResponseEntity<ErrorResponse> handleBookingException(BookingException e) {
            HttpStatus status = determineBookingStatus(e);

            ErrorResponse error = new ErrorResponse(
                    e.getErrorCode(),
                    e.getMessage());

            return ResponseEntity.status(status).body(error);
        }

        @ExceptionHandler(PaymentException.class)
        public ResponseEntity<ErrorResponse> handlePaymentException(PaymentException e) {
            HttpStatus status = determinePaymentStatus(e);

            ErrorResponse error = new ErrorResponse(
                    e.getErrorCode(),
                    e.getMessage());

            return ResponseEntity.status(status).body(error);
        }

        @ExceptionHandler(SubjectException.class)
        public ResponseEntity<ErrorResponse> handleSubjectException(SubjectException e) {
            HttpStatus status = determineSubjectStatus(e);

            ErrorResponse error = new ErrorResponse(
                    e.getErrorCode(),
                    e.getMessage());

            return ResponseEntity.status(status).body(error);
        }

        @ExceptionHandler(FileException.class)
        public ResponseEntity<ErrorResponse> handleFileException(FileException e) {
            HttpStatus status = determineFileStatus(e);
            logger.warn("File error: {} - {}", e.getErrorCode(), e.getMessage());

            ErrorResponse error = new ErrorResponse(
                    e.getErrorCode(),
                    e.getMessage());

            return ResponseEntity.status(status).body(error);
        }


    // ========== ILLEGAL EXCEPTIONS ==========

    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ErrorResponse> handleIllegalArgument(IllegalArgumentException e) {
        // This indicates a programming error - should have been caught by validation
        logger.error("IllegalArgumentException - programming error: {}", e.getMessage(), e);

        ErrorResponse error = new ErrorResponse(
                "INVALID_REQUEST",
                "Invalid request parameters"
        );
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(error);
    }

    @ExceptionHandler(IllegalStateException.class)
    public ResponseEntity<ErrorResponse> handleIllegalState(IllegalStateException e) {
        // This indicates data corruption or programming error
        logger.error("IllegalStateException - system error: {}", e.getMessage(), e);

        ErrorResponse error = new ErrorResponse(
                "SYSTEM_ERROR",
                "An unexpected error occurred. Please try again later.");
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);
    }

    // ========== GENERIC HANDLERS ==========

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleGeneral(Exception e) {
        // This is bad - unexpected exception
        logger.error("Unexpected error", e);

        ErrorResponse error = new ErrorResponse(
                "INTERNAL_ERROR",
                "An unexpected error occurred. Please try again later.");
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);
    }

    // ========== DETERMINE EXCEPTION STATUS ==========

    private HttpStatus determineAuthStatus(AuthenticationException e) {
        switch (e.getErrorCode()) {
            case "INVALID_CREDENTIALS":
                return HttpStatus.UNAUTHORIZED;
            case "EMAIL_EXISTS":
                return HttpStatus.CONFLICT;
            case "INVALID_TIME_ZONE":
                return HttpStatus.BAD_REQUEST;
            case "INVALID_TUTOR_REGISTRATION":
                return HttpStatus.BAD_REQUEST;
            default:
                return HttpStatus.BAD_REQUEST;
        }
    }

    private HttpStatus determineBookingStatus(BookingException e) {
        switch (e.getErrorCode()) {
            case "BOOKING_NOT_FOUND":
                return HttpStatus.NOT_FOUND;
            case "BOOKED_TIME_SLOT":
                return HttpStatus.CONFLICT;
            case "TUTOR_NOT_AVAILABLE":
                return HttpStatus.CONFLICT;
            default:
                return HttpStatus.BAD_REQUEST;
        }
    }

    private HttpStatus determineFileStatus(FileException e) {
        switch (e.getErrorCode()) {
            case "FILE_NOT_FOUND":
                return HttpStatus.NOT_FOUND;
            default:
                return HttpStatus.BAD_REQUEST;
        }
    }

    private HttpStatus determinePaymentStatus(PaymentException e) {
        switch (e.getErrorCode()) {
            case "PAYMENT_NOT_FOUND":
                return HttpStatus.NOT_FOUND;
            default:
                return HttpStatus.BAD_REQUEST;
        }
    }

    private HttpStatus determineReviewStatus(ReviewException e) {
        switch (e.getErrorCode()) {
            case "NO_COMPLETED_BOOKINGS":
                return HttpStatus.FORBIDDEN;
            case "INVALID_RATING":
                return HttpStatus.BAD_REQUEST;
            case "REVIEW_NOT_FOUND":
                return HttpStatus.NOT_FOUND;
            default:
                return HttpStatus.BAD_REQUEST;
        }
    }

    private HttpStatus determineSubjectStatus(SubjectException e) {
        switch (e.getErrorCode()) {
            case "SUBJECT_NOT_FOUND":
                return HttpStatus.NOT_FOUND;
            case "SUBJECT_EXISTS":
                return HttpStatus.CONFLICT;
            case "ASSIGNED_SUBJECT":
                return HttpStatus.CONFLICT;
            default:
                return HttpStatus.BAD_REQUEST;
        }
    }

    private HttpStatus determineUserStatus(UserException e) {
        switch (e.getErrorCode()) {
            case "USER_NOT_FOUND":
                return HttpStatus.NOT_FOUND;
            case "PROFILE_UPDATE_ERROR":
                return HttpStatus.BAD_REQUEST;
            default:
                return HttpStatus.BAD_REQUEST;
        }
    }

    private HttpStatus determineStudentStatus(StudentException e) {
        switch (e.getErrorCode()) {
            case "INSUFFICIENT_BALANCE":
                return HttpStatus.PAYMENT_REQUIRED;
            case "INVALID_FUND_AMOUNT":
                return HttpStatus.BAD_REQUEST;
            default:
                return HttpStatus.BAD_REQUEST;
        }
    }

    private HttpStatus determineTutorStatus(TutorException e) {
        switch (e.getErrorCode()) {
            case "INVALID_HOURLY_RATE":
            case "SUBJECT_MANAGEMENT_ERROR":
                return HttpStatus.BAD_REQUEST;
            case "TUTOR_TEACHES_SUBJECT":
                return HttpStatus.CONFLICT;
            case "TUTOR_HAS_BOOKINGS":
                return HttpStatus.CONFLICT;
            default:
                return HttpStatus.BAD_REQUEST;
        }
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\exceptions\TutoringPlatformException.java
======================================================================

package com.tutoringplatform.shared.exceptions;

public abstract class TutoringPlatformException extends Exception {
    private final String errorCode; 

    protected TutoringPlatformException(String errorCode, String message) {
        super(message);
        this.errorCode = errorCode;
    }

    protected TutoringPlatformException(String errorCode, String message, Throwable cause) {
        super(message, cause);
        this.errorCode = errorCode;
    }

    public String getErrorCode() {
        return errorCode;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\factory\UserFactory.java
======================================================================

package com.tutoringplatform.shared.factory;

import com.tutoringplatform.user.student.Student;
import com.tutoringplatform.user.tutor.Tutor;

import org.springframework.stereotype.Component;

@Component
public class UserFactory {

    public enum UserType {
        STUDENT,
        TUTOR
    }

    public Student createStudent(String name, String email, String password) {
        return new Student(name, email, password);
    }

    public Tutor createTutor(String name, String email, String password, double hourlyRate, String description) {
        return new Tutor(name, email, password, hourlyRate, description);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\shared\util\DTOMapper.java
======================================================================

package com.tutoringplatform.shared.util;

import com.tutoringplatform.booking.Booking;
import com.tutoringplatform.config.AppProperties;
import com.tutoringplatform.notification.Notification;
import com.tutoringplatform.payment.Payment;
import com.tutoringplatform.review.Review;
import com.tutoringplatform.shared.dto.response.*;
import com.tutoringplatform.shared.dto.response.info.PaymentInfo;
import com.tutoringplatform.shared.dto.response.info.TutorInfo;
import com.tutoringplatform.shared.dto.response.info.TutorSearchResultInfo;
import com.tutoringplatform.shared.dto.response.info.UserInfo;
import com.tutoringplatform.subject.Subject;
import com.tutoringplatform.user.student.Student;
import com.tutoringplatform.user.tutor.Tutor;
import com.tutoringplatform.user.User;
import com.tutoringplatform.user.availability.model.AvailabilityException;
import com.tutoringplatform.user.availability.model.RecurringAvailability;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class DTOMapper {

    @Autowired
    private AppProperties appProperties;

    // ========== AUTH RESPONSES ==========

    public AuthResponse toAuthResponse(User user, double balance, double hourlyRate) {
        AuthResponse response = new AuthResponse();
        response.setId(user.getId());
        response.setName(user.getName());
        response.setEmail(user.getEmail());
        response.setUserType(user.getUserType().getDisplayName());
        response.setTimeZoneId(user.getTimeZoneId());
        response.setProfilePictureUrl(buildProfilePictureUrl(user.getProfilePictureId()));
        response.setBalance(balance); // Only for students
        response.setHourlyRate(hourlyRate); // Only for tutors
        return response;
    }

    // ========== DASHBOARD RESPONSES ==========

    public StudentDashboardResponse toStudentDashboardResponse(
            UserProfile profile,
            DashboardStats stats,
            List<BookingDetailResponse> upcomingBookings) {

        StudentDashboardResponse response = new StudentDashboardResponse();
        response.setProfile(profile);
        response.setStats(stats);
        response.setUpcomingBookings(upcomingBookings);

        return response;
    }

    public TutorDashboardResponse toTutorDashboardResponse(
            UserProfile profile,
            DashboardStats stats,
            List<BookingDetailResponse> upcomingBookings,
            List<ReviewResponse> recentReviews,
            List<BookingDetailResponse> todaysSchedule) {

        TutorDashboardResponse response = new TutorDashboardResponse();
        response.setProfile(profile);
        response.setStats(stats);
        response.setUpcomingBookings(upcomingBookings);
        response.setTodaysSchedule(todaysSchedule);

        return response;
    }

    // ========== BOOKING RESPONSES ==========

    public BookingDetailResponse toBookingDetailResponse(
            Booking booking,
            Student student,
            Tutor tutor,
            Payment payment) {

        BookingDetailResponse response = new BookingDetailResponse();
        response.setId(booking.getId());

        // Student info
        UserInfo studentInfo = new UserInfo();
        studentInfo.setId(student.getId());
        studentInfo.setName(student.getName());
        studentInfo.setProfilePictureUrl(buildProfilePictureUrl(student.getProfilePictureId()));
        response.setStudent(studentInfo);

        // Tutor info
        TutorInfo tutorInfo = new TutorInfo();
        tutorInfo.setId(tutor.getId());
        tutorInfo.setName(tutor.getName());
        tutorInfo.setProfilePictureUrl(buildProfilePictureUrl(tutor.getProfilePictureId()));
        tutorInfo.setHourlyRate(tutor.getHourlyRate());
        response.setTutor(tutorInfo);

        // Subject
        response.setSubject(toSubjectResponse(booking.getSubject()));

        response.setDateTime(booking.getDateTime());
        response.setDurationHours(booking.getDurationHours());
        response.setTotalCost(booking.getTotalCost());
        response.setStatus(booking.getStatus().toString());

        // Payment info (if exists)
        if (payment != null) {
            PaymentInfo paymentInfo = new PaymentInfo();
            paymentInfo.setStatus(payment.getStatus().toString());
            paymentInfo.setPaidAt(payment.getTimestamp());
            response.setPayment(paymentInfo);
        }

        return response;
    }

    public BookingListResponse toBookingListResponse(
            List<BookingDetailResponse> upcomingBookings,
            List<BookingDetailResponse> pastBookings,
            List<BookingDetailResponse> cancelledBookings) {

        BookingListResponse response = new BookingListResponse();
        response.setUpcomingBookings(upcomingBookings);
        response.setPastBookings(pastBookings);
        response.setCancelledBookings(cancelledBookings);
        return response;
    }

    // ========== PROFILE RESPONSES ==========

    public TutorProfileResponse toTutorProfileResponse(
            Tutor tutor,
            double averageRating,
            int totalReviews,
            List<SubjectResponse> subjects,
            List<RecurringAvailability> availability,
            int completedSessions,
            java.time.LocalDate joinedDate) {

        TutorProfileResponse response = new TutorProfileResponse();
        response.setId(tutor.getId());
        response.setName(tutor.getName());
        response.setEmail(tutor.getEmail());
        response.setProfilePictureUrl(buildProfilePictureUrl(tutor.getProfilePictureId()));
        response.setHourlyRate(tutor.getHourlyRate());
        response.setDescription(tutor.getDescription());
        response.setRating(averageRating);
        response.setTotalReviews(totalReviews);
        response.setSubjects(subjects);
        response.setAvailability(availability);
        response.setCompletedSessions(completedSessions);
        response.setJoinedDate(joinedDate);

        return response;
    }

    public StudentProfileResponse toStudentProfileResponse(
            Student student,
            java.time.LocalDate joinedDate,
            int totalSessions) {

        StudentProfileResponse response = new StudentProfileResponse();
        response.setId(student.getId());
        response.setName(student.getName());
        response.setEmail(student.getEmail());
        response.setProfilePictureUrl(buildProfilePictureUrl(student.getProfilePictureId()));
        response.setBalance(student.getBalance());
        response.setTimeZoneId(student.getTimeZoneId());
        response.setJoinedDate(joinedDate);
        response.setTotalSessions(totalSessions);

        return response;
    }

    // ========== SEARCH RESPONSES ==========

    public TutorSearchResultsResponse toTutorSearchResultsResponse(
            List<TutorSearchResultInfo> results,
            int totalCount,
            SearchFilters appliedFilters) {

        TutorSearchResultsResponse response = new TutorSearchResultsResponse();
        response.setResults(results);
        response.setTotalCount(totalCount);
        response.setFilters(appliedFilters);
        return response;
    }

    public TutorSearchResultInfo toTutorSearchResult(
            Tutor tutor,
            double rating,
            int reviewCount,
            String shortDescription,
            java.time.LocalDateTime nextAvailable) {

        TutorSearchResultInfo result = new TutorSearchResultInfo();
        result.setId(tutor.getId());
        result.setName(tutor.getName());
        result.setProfilePictureUrl(buildProfilePictureUrl(tutor.getProfilePictureId()));
        result.setHourlyRate(tutor.getHourlyRate());
        result.setRating(rating);
        result.setReviewCount(reviewCount);
        result.setSubjects(tutor.getSubjects().stream()
                .map(this::toSubjectResponse)
                .collect(Collectors.toList()));
        result.setShortDescription(shortDescription);
        result.setNextAvailable(nextAvailable);

        return result;
    }

    // ========== SUBJECT RESPONSES ==========

    public SubjectResponse toSubjectResponse(Subject subject) {
        SubjectResponse response = new SubjectResponse();
        response.setId(subject.getId());
        response.setName(subject.getName());
        response.setCategory(subject.getCategory());
        return response;
    }

    public SubjectListResponse toSubjectListResponse(List<CategorySubjects> categorizedSubjects) {
        SubjectListResponse response = new SubjectListResponse();
        response.setSubjects(categorizedSubjects);
        return response;
    }

    // ========== REVIEW RESPONSES ==========

    public ReviewResponse toReviewResponse(
            Review review,
            Student student,
            Tutor tutor) {

        ReviewResponse response = new ReviewResponse();
        response.setId(review.getId());

        // Student info
        UserInfo studentInfo = new UserInfo();
        studentInfo.setId(student.getId());
        studentInfo.setName(student.getName());
        studentInfo.setProfilePictureUrl(buildProfilePictureUrl(student.getProfilePictureId()));
        response.setStudentInfo(studentInfo);

        // Tutor info (minimal)
        UserInfo tutorInfo = new UserInfo();
        tutorInfo.setId(tutor.getId());
        tutorInfo.setName(tutor.getName());
        response.setTutorInfo(tutorInfo);

        response.setRating(review.getRating());
        response.setComment(review.getComment());
        response.setCreatedAt(review.getTimestamp());

        return response;
    }


    // ========== AVAILABILITY RESPONSES ==========

    public AvailabilityResponse toAvailabilityResponse(
            String tutorId,
            java.time.ZoneId timeZone,
            List<RecurringAvailability> regularSchedule,
            List<AvailabilityException> exceptions,
            java.time.LocalDateTime nextAvailableSlot) {

        AvailabilityResponse response = new AvailabilityResponse();
        response.setTutorId(tutorId);
        response.setTimeZone(timeZone.toString());
        response.setRegularSchedule(regularSchedule);
        response.setExceptions(exceptions);
        response.setNextAvailableSlot(nextAvailableSlot);
        return response;
    }

    // ========== NOTIFICATION RESPONSES ==========

    public NotificationResponse toNotificationResponse(Notification notification) {
        NotificationResponse response = new NotificationResponse();
        response.setId(notification.getId());
        response.setType(notification.getType().toString());
        response.setTitle(notification.getTitle());
        response.setMessage(notification.getMessage());
        response.setActionUrl(notification.getActionUrl());
        response.setRead(notification.isRead());
        response.setCreatedAt(notification.getCreatedAt());
        response.setTimeAgo(calculateTimeAgo(notification.getCreatedAt()));
        return response;
    }

    private String calculateTimeAgo(LocalDateTime dateTime) {
        LocalDateTime now = LocalDateTime.now();
        long minutes = java.time.Duration.between(dateTime, now).toMinutes();

        if (minutes < 1)
            return "just now";
        if (minutes < 60)
            return minutes + " minute" + (minutes > 1 ? "s" : "") + " ago";

        long hours = minutes / 60;
        if (hours < 24)
            return hours + " hour" + (hours > 1 ? "s" : "") + " ago";

        long days = hours / 24;
        if (days < 7)
            return days + " day" + (days > 1 ? "s" : "") + " ago";

        long weeks = days / 7;
        if (weeks < 4)
            return weeks + " week" + (weeks > 1 ? "s" : "") + " ago";

        long months = days / 30;
        return months + " month" + (months > 1 ? "s" : "") + " ago";
    }

    // ========== VALUE RESPONSE ==========

    public <T> ValueResponse<T> toValueResponse(T value) {
        ValueResponse<T> response = new ValueResponse<>();
        response.setValue(value);
        return response;
    }

    public <T> ValueResponse<T> toValueResponse(T value, String message) {
        ValueResponse<T> response = new ValueResponse<>();
        response.setValue(value);
        response.setMessage(message);
        return response;
    }

    // ========== HELPER METHODS ==========

    public String buildProfilePictureUrl(String profilePictureId) {
        if (profilePictureId == null) {
            return appProperties.getApi().getFilesBaseUrl() + "default-avatar";
        }
        return appProperties.getApi().getFilesBaseUrl() + profilePictureId;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\subject\ISubjectRepository.java
======================================================================

package com.tutoringplatform.subject;

import com.tutoringplatform.shared.IRepository;

import java.util.List;

public interface ISubjectRepository extends IRepository<Subject> {
    Subject findByName(String name);
    List<Subject> findByCategory(String category);
}



======================================================================
// FILE: java\com\tutoringplatform\subject\Subject.java
======================================================================

package com.tutoringplatform.subject;

import java.util.UUID;

public class Subject {
    private String id;
    private String name;
    private String category;

    public Subject(String name, String category) {
        this.id = UUID.randomUUID().toString();
        this.name = name;
        this.category = category;
    }

    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getCategory() { return category; }
    public void setCategory(String category) { this.category = category; }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null || getClass() != obj.getClass())
            return false;
        Subject subject = (Subject) obj;
        return id.equals(subject.id);
    }

    @Override
    public int hashCode() {
        return id.hashCode();
    }
}



======================================================================
// FILE: java\com\tutoringplatform\subject\SubjectController.java
======================================================================

package com.tutoringplatform.subject;

import com.tutoringplatform.shared.dto.response.SubjectListResponse;
import com.tutoringplatform.shared.dto.response.SubjectResponse;
import com.tutoringplatform.shared.dto.request.CreateSubjectRequest;
import com.tutoringplatform.subject.exceptions.*;
import com.tutoringplatform.user.exceptions.UserNotFoundException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;

import java.util.List;

@RestController
@RequestMapping("/api/subjects")
public class SubjectController {

    private final Logger logger = LoggerFactory.getLogger(SubjectController.class);
    private final SubjectService subjectService;

    @Autowired
    public SubjectController(SubjectService subjectService) {
        this.subjectService = subjectService;
    }

    @PostMapping
    public ResponseEntity<?> createSubject(@RequestBody CreateSubjectRequest request) throws SubjectExistsException {
        logger.debug("Creating subject: {}", request.getName());
        SubjectResponse subject = subjectService.createSubject(request);
        return ResponseEntity.ok(subject);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteSubject(@PathVariable String id) throws AssignedSubjectException, SubjectNotFoundException {
        logger.debug("Deleting subject: {}", id);
        subjectService.deleteSubject(id);
        return ResponseEntity.ok("Subject deleted successfully");
    }

    @GetMapping
    public ResponseEntity<?> getAllSubjects() {
        logger.debug("Getting all subjects");
        SubjectListResponse subjects = subjectService.getAllSubjects();
        return ResponseEntity.ok(subjects);
    }

    @GetMapping("/category")
    public ResponseEntity<?> getAllSubjectsByCategory() {
        logger.debug("Getting all subjects by category");
        SubjectListResponse subjects = subjectService.getAllSubjectsByCategory();
        return ResponseEntity.ok(subjects);
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getSubjectById(@PathVariable String id) throws SubjectNotFoundException {
        logger.debug("Getting subject by id: {}", id);
        SubjectResponse subject = subjectService.getSubjectById(id);
        return ResponseEntity.ok(subject);
    }

    @GetMapping("/available/tutor/{tutorId}")
    public ResponseEntity<?> getAvailableSubjectsForTutor(@PathVariable String tutorId) throws UserNotFoundException {
        logger.debug("Getting available subjects for tutor: {}", tutorId);
        List<SubjectResponse> subjects = subjectService.getAvailableSubjectsForTutor(tutorId);
        return ResponseEntity.ok(subjects);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\subject\SubjectRepository.java
======================================================================

package com.tutoringplatform.subject;

import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Repository
public class SubjectRepository implements ISubjectRepository {
    private Map<String, Subject> subjects = new HashMap<>();

    @Override
    public Subject findById(String id) {
        return subjects.get(id);
    }

    @Override
    public Subject findByName(String name) {
        return subjects.values().stream()
                .filter(s -> s.getName().equalsIgnoreCase(name))
                .findFirst()
                .orElse(null);
    }

    @Override
    public List<Subject> findAll() {
        return new ArrayList<>(subjects.values());
    }

    @Override
    public List<Subject> findByCategory(String category) {
        return subjects.values().stream()
                .filter(s -> s.getCategory().equalsIgnoreCase(category))
                .collect(Collectors.toList());
    }

    @Override
    public void save(Subject subject) {
        subjects.put(subject.getId(), subject);
    }

    @Override
    public void update(Subject subject) {
        subjects.put(subject.getId(), subject);
    }

    @Override
    public void delete(String id) {
        subjects.remove(id);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\subject\SubjectService.java
======================================================================

package com.tutoringplatform.subject;

import com.tutoringplatform.user.tutor.Tutor;
import com.tutoringplatform.shared.dto.response.SubjectResponse;
import com.tutoringplatform.shared.dto.request.CreateSubjectRequest;
import com.tutoringplatform.shared.dto.response.SubjectListResponse;
import com.tutoringplatform.shared.dto.response.CategorySubjects;
import com.tutoringplatform.shared.dto.response.info.SubjectInfo;
import com.tutoringplatform.shared.util.DTOMapper;
import com.tutoringplatform.user.tutor.TutorService;
import com.tutoringplatform.subject.exceptions.*;
import com.tutoringplatform.user.exceptions.UserNotFoundException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class SubjectService {
    private final ISubjectRepository subjectRepository;
    private final TutorService tutorService;
    private final DTOMapper dtoMapper;
    private final Logger logger = LoggerFactory.getLogger(SubjectService.class);

    @Autowired
    public SubjectService(ISubjectRepository subjectRepository, TutorService tutorService, DTOMapper dtoMapper) {
        this.subjectRepository = subjectRepository;
        this.tutorService = tutorService;
        this.dtoMapper = dtoMapper;
    }

    public SubjectResponse createSubject(CreateSubjectRequest request) throws SubjectExistsException {
        logger.debug("Creating subject: {}", request.getName());
        String name = request.getName();
        String category = request.getCategory();
    
        if (subjectRepository.findByName(name) != null) {
            logger.warn("Subject already exists: {}", name);
            throw new SubjectExistsException(name);
        }

        Subject subject = new Subject(name, category);
        subjectRepository.save(subject);
        logger.info("Subject {} created successfully with id: {}", name, subject.getId());
        return dtoMapper.toSubjectResponse(subject);
    }

    public void deleteSubject(String id) throws AssignedSubjectException, SubjectNotFoundException {
        logger.debug("Deleting subject: {}", id);
        Subject subject = findById(id);
        List<Tutor> tutors = tutorService.findBySubject(subject);
        if (tutors.size() > 0) {
            logger.warn("Subject is assigned to tutors: {}", id);
            throw new AssignedSubjectException(id);
        }
        subjectRepository.delete(id);
        logger.info("Subject {} deleted successfully", id);
    }

    public List<Subject> findAll() {
        return subjectRepository.findAll();
    }

    public List<Subject> findByCategory(String category) {
        return subjectRepository.findByCategory(category);
    }

    public SubjectListResponse getAllSubjects() {
        List<Subject> allSubjects = subjectRepository.findAll();
        List<CategorySubjects> categorizedSubjects = groupSubjectsByCategory(allSubjects);
        return dtoMapper.toSubjectListResponse(categorizedSubjects);
    }

    public SubjectListResponse getAllSubjectsByCategory() {
        // Same as getAllSubjects since they both return subjects grouped by category
        return getAllSubjects();
    }

    public SubjectResponse getSubjectById(String id) throws SubjectNotFoundException {
        Subject subject = findById(id);
        return dtoMapper.toSubjectResponse(subject);
    }

    public List<SubjectResponse> getAvailableSubjectsForTutor(String tutorId) throws UserNotFoundException {
        logger.debug("Getting available subjects for tutor: {}", tutorId);
        // Find the tutor first
        Tutor tutor = tutorService.findById(tutorId);

        // Get all subjects and filter out the ones the tutor already teaches
        List<Subject> allSubjects = subjectRepository.findAll();
        List<Subject> tutorSubjects = tutor.getSubjects();
        
        List<Subject> availableSubjects = allSubjects.stream()
                .filter(subject -> !tutorSubjects.contains(subject))
                .collect(Collectors.toList());

        logger.info("Available subjects for tutor {} found successfully", tutorId);
        return availableSubjects.stream()
                .map(dtoMapper::toSubjectResponse)
                .collect(Collectors.toList());
    }

    private List<CategorySubjects> groupSubjectsByCategory(List<Subject> subjects) {
        // Group subjects by category
        Map<String, List<Subject>> subjectsByCategory = subjects.stream()
                .collect(Collectors.groupingBy(Subject::getCategory));

        // Convert to CategorySubjects DTOs
        return subjectsByCategory.entrySet().stream()
                .map(entry -> {
                    CategorySubjects categorySubjects = new CategorySubjects();
                    categorySubjects.setCategory(entry.getKey());
                    
                    List<SubjectInfo> subjectInfos = entry.getValue().stream()
                            .map(this::convertToSubjectInfo)
                            .collect(Collectors.toList());
                    
                    categorySubjects.setSubjects(subjectInfos);
                    return categorySubjects;
                })
                .collect(Collectors.toList());
    }

    private SubjectInfo convertToSubjectInfo(Subject subject) {
        SubjectInfo info = new SubjectInfo();
        info.setId(subject.getId());
        info.setName(subject.getName());
        
        // Calculate tutor count for this subject
        List<Tutor> tutorsForSubject = tutorService.findBySubject(subject);
        info.setTutorCount(tutorsForSubject.size());
        
        // Calculate average price for this subject
        double averagePrice = tutorsForSubject.stream()
                .mapToDouble(Tutor::getHourlyRate)
                .average()
                .orElse(0.0);
        info.setAveragePrice(averagePrice);
        
        return info;
    }  

    public Subject findById(String id) throws SubjectNotFoundException {
        logger.debug("Finding subject by id: {}", id);
        Subject subject = subjectRepository.findById(id);
        if (subject == null) {
            logger.error("Subject not found: {}", id);
            throw new SubjectNotFoundException(id);
        }
        logger.info("Subject {} found successfully", id);
        return subject;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\subject\exceptions\AssignedSubjectException.java
======================================================================

package com.tutoringplatform.subject.exceptions;

import com.tutoringplatform.shared.exceptions.TutoringPlatformException;

public class AssignedSubjectException extends TutoringPlatformException {
    private final String id;

    public AssignedSubjectException(String id) {
        super("ASSIGNED_SUBJECT", String.format("Subject %s is assigned to tutors", id));
        this.id = id;
    }

    public String getId() {
        return id;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\subject\exceptions\SubjectException.java
======================================================================

package com.tutoringplatform.subject.exceptions;

import com.tutoringplatform.shared.exceptions.TutoringPlatformException;

public abstract class SubjectException extends TutoringPlatformException {
    protected SubjectException(String errorCode, String message) {
        super(errorCode, message);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\subject\exceptions\SubjectExistsException.java
======================================================================

package com.tutoringplatform.subject.exceptions;

import com.tutoringplatform.shared.exceptions.TutoringPlatformException;

public class SubjectExistsException extends TutoringPlatformException {
    private final String name;

    public SubjectExistsException(String name) {
        super("SUBJECT_EXISTS", String.format("Subject %s already exists", name));
        this.name = name;
    }

    public String getName() {
        return name;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\subject\exceptions\SubjectNotFoundException.java
======================================================================

package com.tutoringplatform.subject.exceptions;

import com.tutoringplatform.shared.exceptions.TutoringPlatformException;

public class SubjectNotFoundException extends TutoringPlatformException {
    private final String id;

    public SubjectNotFoundException(String id) {
        super("SUBJECT_NOT_FOUND", String.format("Subject %s not found", id));
        this.id = id;
    }

    public String getId() {
        return id;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\IUserRepository.java
======================================================================

package com.tutoringplatform.user;

import com.tutoringplatform.shared.IRepository;

public interface IUserRepository<T extends User> extends IRepository<T> {
    T findByEmail(String email);
    boolean emailExists(String email);
}



======================================================================
// FILE: java\com\tutoringplatform\user\User.java
======================================================================

package com.tutoringplatform.user;

import java.time.ZoneId;
import java.util.UUID;

public abstract class User {
    protected String id;
    protected String name;
    protected String email;
    protected String password;
    protected UserType userType;
    protected String timeZoneId;
    protected String profilePictureId;

    public User(String name, String email, String password, UserType userType) {
        this.id = UUID.randomUUID().toString();
        this.name = name;
        this.email = email;
        this.password = password;
        this.userType = userType;
        this.timeZoneId = ZoneId.systemDefault().getId();
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public UserType getUserType() {
        return userType;
    }

    public void setUserType(UserType userType) {
        this.userType = userType;
    }

    public ZoneId getTimeZone() {
        return ZoneId.of(timeZoneId);
    }

    public void setTimeZone(ZoneId timeZone) {
        this.timeZoneId = timeZone.getId();
    }

    public String getTimeZoneId() {
        return timeZoneId;
    }

    public void setTimeZoneId(String timeZoneId) {
        this.timeZoneId = timeZoneId;
    }

    public String getProfilePictureId() {
        return profilePictureId;
    }

    public void setProfilePictureId(String profilePictureId) {
        this.profilePictureId = profilePictureId;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\UserService.java
======================================================================

package com.tutoringplatform.user;

import com.tutoringplatform.user.exceptions.UserNotFoundException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

public abstract class UserService<T extends User> {
    private final Logger logger = LoggerFactory.getLogger(UserService.class);
    protected IUserRepository<T> repository;

    public UserService(IUserRepository<T> repository) {
        this.repository = repository;
    }

    public T findById(String id) throws UserNotFoundException {
        logger.debug("Finding user by id: {}", id);

        if (id == null || id.trim().isEmpty()) {
            logger.error("User ID cannot be null or empty");
            throw new IllegalArgumentException("User ID cannot be null or empty");
        }

        T user = repository.findById(id);
        if (user == null) {
            logger.warn("User not found with id: {}", id);
            throw new UserNotFoundException(id);
        }

        logger.debug("User found with id: {}", id);
        return user;
    }

    public T findByEmail(String email) throws UserNotFoundException {
        logger.debug("Finding user by email: {}", email);

        if (email == null || email.trim().isEmpty()) {
            logger.error("Email cannot be null or empty");
            throw new IllegalArgumentException("Email cannot be null or empty");
        }

        T user = repository.findByEmail(email);
        if (user == null) {
            logger.warn("User not found with email: {}", email);
            throw new UserNotFoundException(email, true);
        }
        return user;
    }

    public List<T> findAll() {
        return repository.findAll();
    }

    public void update(T user) throws UserNotFoundException {
        logger.debug("Updating user: {}", user.getId());

        if (repository.findById(user.getId()) == null) {
            logger.warn("Cannot update - user not found: {}", user.getId());
            throw new UserNotFoundException(user.getId());
        }

        repository.update(user);
        logger.info("User updated successfully: {}", user.getId());
    }

    public void delete(String id) throws UserNotFoundException {
        logger.debug("Deleting user: {}", id);

        if (repository.findById(id) == null) {
            logger.warn("User not found: {}", id);
            throw new UserNotFoundException(id);
        }
        repository.delete(id);
    }

    public void validateUserExists(String userId) throws UserNotFoundException {
        logger.debug("Validating user exists: {}", userId);

        if (userId == null || userId.trim().isEmpty()) {
            throw new IllegalArgumentException("User ID cannot be null or empty");
        }

        if (repository.findById(userId) == null) {
            logger.error("User not found with id: {}", userId);
            throw new UserNotFoundException(userId);
        }

        logger.debug("User validation successful: {}", userId);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\UserType.java
======================================================================

package com.tutoringplatform.user;

public enum UserType {
    STUDENT("Student"),
    TUTOR("Tutor");
    // Future: ADMIN("Admin")
    
    private final String displayName;
    
    UserType(String displayName) {
        this.displayName = displayName;
    }
    
    public String getDisplayName() {
        return displayName;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\availability\AvailabilityRepository.java
======================================================================

// FILE: src/main/java/com/tutoringplatform/repositories/impl/AvailabilityRepository.java
package com.tutoringplatform.user.availability;

import com.tutoringplatform.user.availability.model.TutorAvailability;

import org.springframework.stereotype.Repository;

import java.util.HashMap;
import java.util.Map;

@Repository
public class AvailabilityRepository implements IAvailabilityRepository {
    private Map<String, TutorAvailability> availabilities = new HashMap<>();

    @Override
    public TutorAvailability findByTutorId(String tutorId) {
        return availabilities.get(tutorId);
    }

    @Override
    public void save(TutorAvailability availability) {
        availabilities.put(availability.getTutorId(), availability);
    }

    @Override
    public void update(TutorAvailability availability) {
        availabilities.put(availability.getTutorId(), availability);
    }

    @Override
    public void delete(String tutorId) {
        availabilities.remove(tutorId);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\availability\AvailabilityService.java
======================================================================

package com.tutoringplatform.user.availability;

import com.tutoringplatform.booking.Booking;
import com.tutoringplatform.booking.IBookingRepository;
import com.tutoringplatform.shared.dto.request.TutorAvailabilityRequest;
import com.tutoringplatform.shared.dto.response.AvailabilityResponse;
import com.tutoringplatform.user.availability.model.*;
import com.tutoringplatform.user.tutor.ITutorRepository;
import com.tutoringplatform.user.tutor.Tutor;
import com.tutoringplatform.user.exceptions.UserNotFoundException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import java.time.*;
import java.util.*;

@Service
public class AvailabilityService {

    private final Logger logger = LoggerFactory.getLogger(AvailabilityService.class);
    private final IAvailabilityRepository availabilityRepository;
    private final ITutorRepository tutorRepository;
    private final IBookingRepository bookingRepository;

    @Autowired
    public AvailabilityService(IAvailabilityRepository availabilityRepository,
            ITutorRepository tutorRepository,
            IBookingRepository bookingRepository) {
        this.availabilityRepository = availabilityRepository;
        this.tutorRepository = tutorRepository;
        this.bookingRepository = bookingRepository;
    }

    public TutorAvailability getAvailability(String tutorId) throws UserNotFoundException {
        logger.debug("Getting availability for tutor {}", tutorId);
        TutorAvailability availability = availabilityRepository.findByTutorId(tutorId);

        if (availability == null) {
            Tutor tutor = tutorRepository.findById(tutorId);
            availability = new TutorAvailability(tutorId, tutor.getTimeZone());
            availabilityRepository.save(availability);
        }

        return availability;
    }

    public void addRecurringAvailability(String tutorId, DayOfWeek day, LocalTime start, LocalTime end)
            throws UserNotFoundException {
        logger.debug("Adding recurring availability for tutor {}", tutorId);
        TutorAvailability availability = getAvailability(tutorId);

        // Check for overlaps
        for (RecurringAvailability existing : availability.getRecurringSlots()) {
            if (existing.getDayOfWeek() == day) {
                if (!(end.isBefore(existing.getStartTime()) || start.isAfter(existing.getEndTime()))) {
                    logger.warn("Time slot overlaps with existing availability for tutor {}", tutorId);
                    throw new IllegalArgumentException("Time slot overlaps with existing availability");
                }
            }
        }

        availability.getRecurringSlots().add(new RecurringAvailability(day, start, end));
        availabilityRepository.update(availability);
        logger.info("Recurring availability from {} to {} added successfully for tutor {}", start, end, tutorId);
    }

    public void removeRecurringAvailability(String tutorId, DayOfWeek day, LocalTime start, LocalTime end)
            throws UserNotFoundException {
        logger.debug("Removing recurring availability for tutor {}", tutorId);
        TutorAvailability availability = getAvailability(tutorId);

        availability.getRecurringSlots().removeIf(slot -> slot.getDayOfWeek() == day &&
                slot.getStartTime().equals(start) &&
                slot.getEndTime().equals(end));

        logger.info("Recurring availability from {} to {} removed successfully for tutor {}", start, end, tutorId);
        availabilityRepository.update(availability);
    }

    public void addException(String tutorId, LocalDate startDate, LocalDate endDate,
            LocalTime startTime, LocalTime endTime, boolean available) throws UserNotFoundException {
        logger.debug("Adding exception for tutor {}", tutorId);
        TutorAvailability availability = getAvailability(tutorId);

        AvailabilityException exception = new AvailabilityException();
        exception.setStartDate(startDate);
        exception.setEndDate(endDate);
        exception.setStartTime(startTime);
        exception.setEndTime(endTime);
        exception.setAvailable(available);

        availability.getExceptions().add(exception);
        availabilityRepository.update(availability);
        logger.info("Exception added successfully for tutor {}", tutorId);
    }

    public boolean isAvailable(String tutorId, ZonedDateTime start, ZonedDateTime end, ZoneId studentTimeZone)
            throws UserNotFoundException {
        logger.debug("Checking availability for tutor {}", tutorId);
        TutorAvailability availability = getAvailability(tutorId);

        // First check basic availability (recurring slots and exceptions)
        if (!availability.isAvailable(start, end, studentTimeZone)) {
            return false;
        }

        // Now check for conflicting bookings (excluding cancelled ones)
        LocalDateTime startLocal = start.withZoneSameInstant(availability.getTimeZone()).toLocalDateTime();
        LocalDateTime endLocal = end.withZoneSameInstant(availability.getTimeZone()).toLocalDateTime();

        List<Booking> existingBookings = bookingRepository.findByTutorIdAndDateTimeRange(
                tutorId, startLocal, endLocal);

        // Filter out cancelled bookings - the slot is available if booking was
        // cancelled
        for (Booking booking : existingBookings) {
            if (booking.getStatus() != Booking.BookingStatus.CANCELLED) {
                // Check for time overlap with non-cancelled bookings
                LocalDateTime bookingEnd = booking.getDateTime().plusHours(booking.getDurationHours());
                if (!(endLocal.isBefore(booking.getDateTime()) || startLocal.isAfter(bookingEnd))) {
                    return false;
                }
            }
        }

        return true;
    }

    public List<String> findAvailableTutors(List<String> tutorIds, ZonedDateTime start, ZonedDateTime end,
            ZoneId studentTimeZone) throws UserNotFoundException {
        logger.debug("Finding available tutors for start {} and end {}", start, end);
        List<String> available = new ArrayList<>();

        for (String tutorId : tutorIds) {
            try {
                if (isAvailable(tutorId, start, end, studentTimeZone)) {
                    available.add(tutorId);
                }
            } catch (Exception e) {
                //TODO: handle exception
                // Log error, skip this tutor
            }
        }

        return available;
    }

    // New methods required by TutorController
    public AvailabilityResponse updateTutorAvailability(String tutorId, TutorAvailabilityRequest request)
            throws UserNotFoundException {
        logger.debug("Updating tutor availability for tutor {}", tutorId);
        if ("ADD".equalsIgnoreCase(request.getAction())) {
            addRecurringAvailability(tutorId, request.getDayOfWeek(), request.getStartTime(), request.getEndTime());
        } else if ("REMOVE".equalsIgnoreCase(request.getAction())) {
            removeRecurringAvailability(tutorId, request.getDayOfWeek(), request.getStartTime(), request.getEndTime());
        } else {
            logger.error("Invalid action: {}", request.getAction());
            throw new IllegalArgumentException("Action must be either 'ADD' or 'REMOVE'");
        }

        logger.info("Tutor availability updated successfully for tutor {}", tutorId);
        return getTutorAvailability(tutorId);
    }

    public AvailabilityResponse getTutorAvailability(String tutorId) throws UserNotFoundException {
        logger.debug("Getting tutor availability for tutor {}", tutorId);
        TutorAvailability availability = getAvailability(tutorId);

        AvailabilityResponse response = new AvailabilityResponse();
        response.setTutorId(tutorId);
        response.setTimeZone(availability.getTimeZone().getId());
        response.setRegularSchedule(availability.getRecurringSlots());
        response.setExceptions(availability.getExceptions());

        // Calculate next available slot (simplified implementation)
        LocalDateTime nextSlot = calculateNextAvailableSlot(availability);
        response.setNextAvailableSlot(nextSlot);

        return response;
    }

    private LocalDateTime calculateNextAvailableSlot(TutorAvailability availability) {
        logger.debug("Calculating next available slot for tutor {}", availability.getTutorId());
        LocalDateTime now = LocalDateTime.now();
        DayOfWeek currentDay = now.getDayOfWeek();

        // Look for the next available slot in the recurring schedule
        for (int daysToAdd = 0; daysToAdd < 7; daysToAdd++) {
            DayOfWeek checkDay = currentDay.plus(daysToAdd);
            LocalDate checkDate = now.toLocalDate().plusDays(daysToAdd);

            for (RecurringAvailability slot : availability.getRecurringSlots()) {
                if (slot.getDayOfWeek() == checkDay) {
                    LocalDateTime slotDateTime = LocalDateTime.of(checkDate, slot.getStartTime());
                    if (slotDateTime.isAfter(now)) {
                        return slotDateTime;
                    }
                }
            }
        }

        // If no slot found in the next week, return null
        return null;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\availability\IAvailabilityRepository.java
======================================================================

package com.tutoringplatform.user.availability;

import com.tutoringplatform.user.availability.model.TutorAvailability;

public interface IAvailabilityRepository {
    TutorAvailability findByTutorId(String tutorId);

    void save(TutorAvailability availability);

    void update(TutorAvailability availability);

    void delete(String tutorId);
}



======================================================================
// FILE: java\com\tutoringplatform\user\availability\model\AvailabilityException.java
======================================================================

package com.tutoringplatform.user.availability.model;

import java.time.*;

public class AvailabilityException {
    private Long id;
    private LocalDate startDate;
    private LocalDate endDate;
    private LocalTime startTime; // null means all day
    private LocalTime endTime; // null means all day
    private boolean available; // true = extra availability, false = blackout

    public boolean covers(ZonedDateTime start, ZonedDateTime end) {
        LocalDate date = start.toLocalDate();

        // Check if date is in range
        if (date.isBefore(startDate) || date.isAfter(endDate)) {
            return false;
        }

        // If all-day exception
        if (startTime == null || endTime == null) {
            return true;
        }

        // Check time overlap
        LocalTime requestStart = start.toLocalTime();
        LocalTime requestEnd = end.toLocalTime();

        return !requestEnd.isBefore(startTime) && !requestStart.isAfter(endTime);
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public LocalDate getStartDate() {
        return startDate;
    }

    public void setStartDate(LocalDate startDate) {
        this.startDate = startDate;
    }

    public LocalDate getEndDate() {
        return endDate;
    }

    public void setEndDate(LocalDate endDate) {
        this.endDate = endDate;
    }

    public LocalTime getStartTime() {
        return startTime;
    }

    public void setStartTime(LocalTime startTime) {
        this.startTime = startTime;
    }

    public LocalTime getEndTime() {
        return endTime;
    }

    public void setEndTime(LocalTime endTime) {
        this.endTime = endTime;
    }

    public boolean isAvailable() {
        return available;
    }

    public void setAvailable(boolean available) {
        this.available = available;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\availability\model\RecurringAvailability.java
======================================================================

package com.tutoringplatform.user.availability.model;

import java.time.*;

public class RecurringAvailability {
    private Long id;
    private DayOfWeek dayOfWeek;
    private LocalTime startTime;
    private LocalTime endTime;

    public RecurringAvailability(DayOfWeek dayOfWeek, LocalTime startTime, LocalTime endTime) {
        this.dayOfWeek = dayOfWeek;
        this.startTime = startTime;
        this.endTime = endTime;
    }

    public boolean contains(LocalTime requestStart, LocalTime requestEnd) {
        return !requestStart.isBefore(startTime) && !requestEnd.isAfter(endTime);
    }

    // Getters/setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public DayOfWeek getDayOfWeek() {
        return dayOfWeek;
    }

    public LocalTime getStartTime() {
        return startTime;
    }

    public LocalTime getEndTime() {
        return endTime;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\availability\model\TutorAvailability.java
======================================================================

package com.tutoringplatform.user.availability.model;

import java.time.*;
import java.util.*;

public class TutorAvailability {
    private String tutorId;
    private ZoneId timeZone; // Tutor's time zone
    private List<RecurringAvailability> recurringSlots;
    private List<AvailabilityException> exceptions;

    public TutorAvailability(String tutorId, ZoneId timeZone) {
        this.tutorId = tutorId;
        this.timeZone = timeZone;
        this.recurringSlots = new ArrayList<>();
        this.exceptions = new ArrayList<>();
    }

    // Check availability in the STUDENT's timezone
    public boolean isAvailable(ZonedDateTime requestedStart, ZonedDateTime requestedEnd, ZoneId studentTimeZone) {
        // Convert student's request to tutor's timezone
        ZonedDateTime tutorStart = requestedStart.withZoneSameInstant(timeZone);
        ZonedDateTime tutorEnd = requestedEnd.withZoneSameInstant(timeZone);

        // Check exceptions first (vacations, special unavailability)
        for (AvailabilityException exception : exceptions) {
            if (exception.covers(tutorStart, tutorEnd)) {
                return exception.isAvailable();
            }
        }

        // Check recurring availability
        DayOfWeek dayOfWeek = tutorStart.getDayOfWeek();
        LocalTime startTime = tutorStart.toLocalTime();
        LocalTime endTime = tutorEnd.toLocalTime();

        // Handle sessions that cross midnight
        if (!tutorEnd.toLocalDate().equals(tutorStart.toLocalDate())) {
            // Session spans multiple days - need more complex logic
            return false; // For now, don't allow cross-day bookings
        }

        for (RecurringAvailability slot : recurringSlots) {
            if (slot.getDayOfWeek() == dayOfWeek &&
                    slot.contains(startTime, endTime)) {
                return true;
            }
        }

        return false;
    }

    
    public String getTutorId() {
        return tutorId;
    }

    public ZoneId getTimeZone() {
        return timeZone;
    }

    public void setTimeZone(ZoneId timeZone) {
        this.timeZone = timeZone;
    }

    public List<RecurringAvailability> getRecurringSlots() {
        return recurringSlots;
    }

    public List<AvailabilityException> getExceptions() {
        return exceptions;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\dashboard\DashboardController.java
======================================================================

package com.tutoringplatform.user.dashboard;

import com.tutoringplatform.shared.dto.response.StudentDashboardResponse;
import com.tutoringplatform.shared.dto.response.TutorDashboardResponse;
import com.tutoringplatform.user.exceptions.UserNotFoundException;
import com.tutoringplatform.review.exceptions.NoCompletedBookingsException;
import com.tutoringplatform.payment.exceptions.PaymentNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;


@RestController
@RequestMapping("/api/dashboard")
public class DashboardController {

    private final DashboardService dashboardService;

    @Autowired
    public DashboardController(DashboardService dashboardService) {
        this.dashboardService = dashboardService;
    }

    @GetMapping("/student/{studentId}")
    public ResponseEntity<?> getStudentDashboard(@PathVariable String studentId) throws UserNotFoundException, NoCompletedBookingsException, PaymentNotFoundException {
        StudentDashboardResponse dashboard = dashboardService.getStudentDashboard(studentId);
        return ResponseEntity.ok(dashboard);
    }

    @GetMapping("/tutor/{tutorId}")
    public ResponseEntity<?> getTutorDashboard(@PathVariable String tutorId) throws UserNotFoundException, NoCompletedBookingsException {
        TutorDashboardResponse dashboard = dashboardService.getTutorDashboard(tutorId);
        return ResponseEntity.ok(dashboard);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\dashboard\DashboardService.java
======================================================================

package com.tutoringplatform.user.dashboard;

import com.tutoringplatform.booking.Booking;
import com.tutoringplatform.booking.IBookingRepository;
import com.tutoringplatform.payment.IPaymentRepository;
import com.tutoringplatform.payment.Payment;
import com.tutoringplatform.review.IReviewRepository;
import com.tutoringplatform.review.Review;
import com.tutoringplatform.shared.dto.response.*;
import com.tutoringplatform.shared.util.DTOMapper;
import com.tutoringplatform.user.student.IStudentRepository;
import com.tutoringplatform.user.exceptions.UserNotFoundException;
import com.tutoringplatform.user.tutor.ITutorRepository;
import com.tutoringplatform.user.tutor.Tutor;
import com.tutoringplatform.user.student.Student;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import java.time.LocalDateTime;
import java.time.LocalDate;
import java.util.List;
import java.util.ArrayList;

@Service
public class DashboardService {

    private final Logger logger = LoggerFactory.getLogger(DashboardService.class);
    private final IStudentRepository studentRepository;
    private final ITutorRepository tutorRepository;
    private final IBookingRepository bookingRepository;
    private final IReviewRepository reviewRepository;
    private final IPaymentRepository paymentRepository;
    private final DTOMapper dtoMapper;

    @Autowired
    public DashboardService(
            IStudentRepository studentRepository,
            ITutorRepository tutorRepository,
            IBookingRepository bookingRepository,
            IReviewRepository reviewRepository,
            IPaymentRepository paymentRepository,
            DTOMapper dtoMapper) {
        this.studentRepository = studentRepository;
        this.tutorRepository = tutorRepository;
        this.bookingRepository = bookingRepository;
        this.reviewRepository = reviewRepository;
        this.paymentRepository = paymentRepository;
        this.dtoMapper = dtoMapper;
    }

    public StudentDashboardResponse getStudentDashboard(String studentId) throws UserNotFoundException {
        // Fetch student
        Student student = studentRepository.findById(studentId);
        if (student == null) {
            logger.error("Student not found: {}", studentId);
            throw new UserNotFoundException(studentId);
        }

        // Build profile
        UserProfile profile = new UserProfile();
        profile.setName(student.getName());
        profile.setBalance(student.getBalance());
        profile.setProfilePictureUrl(dtoMapper.buildProfilePictureUrl(student.getProfilePictureId()));

        // Build stats
        List<Booking> allBookings = bookingRepository.findByStudentId(studentId);
        DashboardStats stats = buildStudentStats(allBookings);

        // Get upcoming bookings with details
        LocalDateTime now = LocalDateTime.now();
        List<BookingDetailResponse> upcomingBookings = new ArrayList<>();

        for (Booking booking : allBookings) {
            if (booking.getDateTime().isAfter(now) &&
                    booking.getStatus() != Booking.BookingStatus.CANCELLED) {

                Tutor tutor = tutorRepository.findById(booking.getTutorId());
                Payment payment = paymentRepository.findByBookingId(booking.getId());

                BookingDetailResponse detail = dtoMapper.toBookingDetailResponse(
                        booking, student, tutor, payment);
                upcomingBookings.add(detail);
            }
        }

        // Sort by date
        upcomingBookings.sort((a, b) -> a.getDateTime().compareTo(b.getDateTime()));

        return dtoMapper.toStudentDashboardResponse(profile, stats, upcomingBookings);
    }

    public TutorDashboardResponse getTutorDashboard(String tutorId) throws UserNotFoundException {
        // Fetch tutor
        Tutor tutor = tutorRepository.findById(tutorId);
        if (tutor == null) {
            logger.error("Tutor not found: {}", tutorId);
            throw new UserNotFoundException(tutorId);
        }

        // Build profile
        UserProfile profile = new UserProfile();
        profile.setName(tutor.getName());
        profile.setHourlyRate(tutor.getHourlyRate());
        profile.setProfilePictureUrl(dtoMapper.buildProfilePictureUrl(tutor.getProfilePictureId()));

        // Build stats
        List<Booking> allBookings = bookingRepository.findByTutorId(tutorId);
        List<Review> allReviews = reviewRepository.getTutorReviews(tutorId);
        DashboardStats stats = buildTutorStats(allBookings, allReviews, tutor.getEarnings());

        // Get upcoming bookings
        LocalDateTime now = LocalDateTime.now();
        List<BookingDetailResponse> upcomingBookings = new ArrayList<>();
        List<BookingDetailResponse> todaysSchedule = new ArrayList<>();

        for (Booking booking : allBookings) {
            if (booking.getDateTime().isAfter(now) &&
                    booking.getStatus() != Booking.BookingStatus.CANCELLED) {

                Student student = studentRepository.findById(booking.getStudentId());
                Payment payment = paymentRepository.findByBookingId(booking.getId());

                BookingDetailResponse detail = dtoMapper.toBookingDetailResponse(
                        booking, student, tutor, payment);

                upcomingBookings.add(detail);

                // Check if it's today
                if (booking.getDateTime().toLocalDate().equals(LocalDate.now())) {
                    todaysSchedule.add(detail);
                }
            }
        }

        // Sort by date
        upcomingBookings.sort((a, b) -> a.getDateTime().compareTo(b.getDateTime()));
        todaysSchedule.sort((a, b) -> a.getDateTime().compareTo(b.getDateTime()));

        return dtoMapper.toTutorDashboardResponse(profile, stats, upcomingBookings, null, todaysSchedule);
    }

    private DashboardStats buildStudentStats(List<Booking> bookings) {
        DashboardStats stats = new DashboardStats();

        int totalSessions = bookings.size();
        int completedSessions = (int) bookings.stream()
                .filter(b -> b.getStatus() == Booking.BookingStatus.COMPLETED)
                .count();
        int upcomingSessions = (int) bookings.stream()
                .filter(b -> b.getStatus() != Booking.BookingStatus.CANCELLED &&
                        b.getDateTime().isAfter(LocalDateTime.now()))
                .count();

        stats.setTotalSessions(totalSessions);
        stats.setCompletedSessions(completedSessions);
        stats.setUpcomingSessions(upcomingSessions);

        return stats;
    }

    private DashboardStats buildTutorStats(List<Booking> bookings, List<Review> reviews, double totalEarnings) {
        DashboardStats stats = new DashboardStats();

        // Booking stats
        int totalSessions = bookings.size();
        int completedSessions = (int) bookings.stream()
                .filter(b -> b.getStatus() == Booking.BookingStatus.COMPLETED)
                .count();
        int upcomingSessions = (int) bookings.stream()
                .filter(b -> b.getStatus() != Booking.BookingStatus.CANCELLED &&
                        b.getDateTime().isAfter(LocalDateTime.now()))
                .count();

        // This month's earnings
        LocalDate startOfMonth = LocalDate.now().withDayOfMonth(1);
        double thisMonthEarnings = bookings.stream()
                .filter(b -> b.getStatus() == Booking.BookingStatus.COMPLETED &&
                        b.getDateTime().toLocalDate().isAfter(startOfMonth.minusDays(1)))
                .mapToDouble(Booking::getTotalCost)
                .sum();

        // Review stats
        double averageRating = reviews.isEmpty() ? 0.0
                : reviews.stream()
                        .mapToDouble(Review::getRating)
                        .average()
                        .orElse(0.0);

        stats.setTotalSessions(totalSessions);
        stats.setCompletedSessions(completedSessions);
        stats.setUpcomingSessions(upcomingSessions);
        stats.setTotalEarnings(totalEarnings);
        stats.setThisMonthEarnings(thisMonthEarnings);
        stats.setAverageRating(averageRating);
        stats.setTotalReviews(reviews.size());

        return stats;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\exceptions\InvalidPasswordException.java
======================================================================

package com.tutoringplatform.user.exceptions;

public class InvalidPasswordException extends ProfileUpdateException {

    private String reason;
    public InvalidPasswordException(String reason) {
        super("password", reason);
        this.reason = reason;
    }

    public String getReason() {
        return reason;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\exceptions\ProfileUpdateException.java
======================================================================

package com.tutoringplatform.user.exceptions;

public class ProfileUpdateException extends UserException {
    private final String field;

    public ProfileUpdateException(String field, String reason) {
        super("PROFILE_UPDATE_ERROR",
                String.format("Cannot update %s: %s", field, reason));
        this.field = field;
    }

    public String getField() {
        return field;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\exceptions\UserException.java
======================================================================

package com.tutoringplatform.user.exceptions;

import com.tutoringplatform.shared.exceptions.TutoringPlatformException;

public abstract class UserException extends TutoringPlatformException {
    protected UserException(String errorCode, String message) {
        super(errorCode, message);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\exceptions\UserNotFoundException.java
======================================================================

package com.tutoringplatform.user.exceptions;

public class UserNotFoundException extends UserException {
    private final String userId;
    private final String identifier;

    public UserNotFoundException(String userId) {
        super("USER_NOT_FOUND", String.format("User not found with id: %s", userId));
        this.userId = userId;
        this.identifier = "id";
    }

    public UserNotFoundException(String email, boolean byEmail) {
        super("USER_NOT_FOUND", String.format("User not found with email: %s", email));
        this.userId = email;
        this.identifier = "email";
    }

    public String getUserId() {
        return userId;
    }

    public String getIdentifier() {
        return identifier;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\student\IStudentRepository.java
======================================================================

package com.tutoringplatform.user.student;

import com.tutoringplatform.user.IUserRepository;

import java.util.List;

public interface IStudentRepository extends IUserRepository<Student> {
    List<Student> findByNameContaining(String name);
}



======================================================================
// FILE: java\com\tutoringplatform\user\student\Student.java
======================================================================

package com.tutoringplatform.user.student;

import com.tutoringplatform.user.User;
import com.tutoringplatform.user.UserType;

public class Student extends User {
    private double balance;

    public Student(String name, String email, String password) {
        super(name, email, password, UserType.STUDENT);
        this.balance = 0.0;
    }

    public double getBalance() { return balance; }
    public void setBalance(double balance) { this.balance = balance; }
}



======================================================================
// FILE: java\com\tutoringplatform\user\student\StudentController.java
======================================================================

package com.tutoringplatform.user.student;

import com.tutoringplatform.shared.dto.request.AddFundsRequest;
import com.tutoringplatform.shared.dto.request.UpdateProfileRequest;
import com.tutoringplatform.shared.dto.response.StudentProfileResponse;
import com.tutoringplatform.shared.dto.response.ValueResponse;
import com.tutoringplatform.user.exceptions.UserNotFoundException;
import com.tutoringplatform.authentication.exceptions.EmailAlreadyExistsException;
import com.tutoringplatform.user.exceptions.InvalidPasswordException;
import com.tutoringplatform.authentication.exceptions.InvalidTimezoneException;
import com.tutoringplatform.review.exceptions.NoCompletedBookingsException;
import com.tutoringplatform.payment.exceptions.PaymentNotFoundException;
import com.tutoringplatform.user.student.exceptions.InvalidFundAmountException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

import java.util.Map;
import java.io.IOException;

@RestController
@RequestMapping("/api/students")
public class StudentController {

    private final StudentService studentService;

    @Autowired
    public StudentController(StudentService studentService) {
        this.studentService = studentService;
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getStudent(@PathVariable String id) throws UserNotFoundException, NoCompletedBookingsException, PaymentNotFoundException {
        StudentProfileResponse profile = studentService.getStudentProfile(id);
        return ResponseEntity.ok(profile);
    }

    @PutMapping("/{id}")
    public ResponseEntity<?> updateStudent(@PathVariable String id, @RequestBody UpdateProfileRequest request) throws UserNotFoundException, EmailAlreadyExistsException, InvalidPasswordException, InvalidTimezoneException, NoCompletedBookingsException, PaymentNotFoundException {
        StudentProfileResponse profile = studentService.updateStudentProfile(id, request);
        return ResponseEntity.ok(profile);
    }

    @PostMapping("/{id}/profile-picture")
    public ResponseEntity<?> updateProfilePicture(
            @PathVariable String id,
            @RequestParam("file") MultipartFile file) throws UserNotFoundException, IOException {
        Map<String, String> result = studentService.updateProfilePicture(id, file);
        return ResponseEntity.ok(result);
    }

    @PostMapping("/{id}/add-funds")
    public ResponseEntity<?> addFunds(@PathVariable String id, @RequestBody AddFundsRequest request) throws UserNotFoundException, InvalidFundAmountException {
        ValueResponse<Double> balance = studentService.addFunds(id, request.getAmount());
        return ResponseEntity.ok(balance);
    }

    @GetMapping("/{id}/balance")
    public ResponseEntity<?> getBalance(@PathVariable String id) throws UserNotFoundException {
        ValueResponse<Double> balance = studentService.getBalance(id);
        return ResponseEntity.ok(balance);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\student\StudentRepository.java
======================================================================

package com.tutoringplatform.user.student;

import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Repository
public class StudentRepository implements IStudentRepository {
    private Map<String, Student> students = new HashMap<>();

    @Override
    public Student findById(String id) {
        return students.get(id);
    }

    @Override
    public Student findByEmail(String email) {
        return students.values().stream()
                .filter(s -> s.getEmail().equals(email))
                .findFirst()
                .orElse(null);
    }

    @Override
    public List<Student> findAll() {
        return new ArrayList<>(students.values());
    }

    @Override
    public void save(Student student) {
        students.put(student.getId(), student);
    }

    @Override
    public void update(Student student) {
        students.put(student.getId(), student);
    }

    @Override
    public void delete(String id) {
        students.remove(id);
    }

    @Override
    public List<Student> findByNameContaining(String name) {
        return students.values().stream()
                .filter(s -> s.getName().toLowerCase().contains(name.toLowerCase()))
                .collect(Collectors.toList());
    }

    @Override
    public boolean emailExists(String email) {
        return findByEmail(email) != null;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\student\StudentService.java
======================================================================

package com.tutoringplatform.user.student;

import com.tutoringplatform.file.FileService;
import com.tutoringplatform.shared.dto.request.UpdateProfileRequest;
import com.tutoringplatform.shared.dto.response.StudentProfileResponse;
import com.tutoringplatform.shared.dto.response.ValueResponse;
import com.tutoringplatform.shared.util.DTOMapper;
import com.tutoringplatform.user.UserService;
import com.tutoringplatform.booking.IBookingRepository;
import com.tutoringplatform.booking.Booking;
import com.tutoringplatform.user.exceptions.UserNotFoundException;
import com.tutoringplatform.authentication.exceptions.EmailAlreadyExistsException;
import com.tutoringplatform.authentication.exceptions.InvalidTimezoneException;
import com.tutoringplatform.user.exceptions.InvalidPasswordException;
import com.tutoringplatform.user.student.exceptions.InvalidFundAmountException;
import com.tutoringplatform.payment.exceptions.PaymentNotFoundException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.multipart.MultipartFile;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.io.IOException;
import java.time.DateTimeException;

@Service
public class StudentService extends UserService<Student> {

    private final Logger logger = LoggerFactory.getLogger(StudentService.class);
    private final IBookingRepository bookingRepository;
    private final FileService fileService;
    private final PasswordEncoder passwordEncoder;
    private final DTOMapper dtoMapper;

    @Autowired
    public StudentService(
            IStudentRepository studentRepository,
            IBookingRepository bookingRepository,
            FileService fileService,
            PasswordEncoder passwordEncoder,
            DTOMapper dtoMapper) {
        super(studentRepository);
        this.bookingRepository = bookingRepository;
        this.fileService = fileService;
        this.passwordEncoder = passwordEncoder;
        this.dtoMapper = dtoMapper;
    }

    public StudentProfileResponse getStudentProfile(String studentId) throws UserNotFoundException, PaymentNotFoundException {
        logger.debug("Getting student profile for student: {}", studentId);
        Student student = findById(studentId);

        // Calculate joined date (would normally come from audit fields)
        LocalDate joinedDate = LocalDate.now().minusYears(1); // Placeholder

        // Count total sessions
        List<Booking> bookings = bookingRepository.findByStudentId(studentId);
        int totalSessions = bookings.size();

        logger.info("Student profile found successfully for student: {}", studentId);
        return dtoMapper.toStudentProfileResponse(student, joinedDate, totalSessions);
    }

    @Transactional
    public StudentProfileResponse updateStudentProfile(String studentId, UpdateProfileRequest request)
            throws UserNotFoundException, EmailAlreadyExistsException, InvalidPasswordException, InvalidTimezoneException, PaymentNotFoundException {
        logger.debug("Updating student profile for student: {}", studentId);
        Student student = findById(studentId);

        // Update name if provided
        if (request.getName() != null && !request.getName().trim().isEmpty()) {
            student.setName(request.getName());
        }

        // Update email if provided and not taken
        if (request.getEmail() != null && !request.getEmail().isEmpty()) {
            Student existing = repository.findByEmail(request.getEmail());
            if (existing != null && !existing.getId().equals(studentId)) {
                logger.warn("Email already exists: {}", request.getEmail());
                throw new EmailAlreadyExistsException(request.getEmail());
            }
            student.setEmail(request.getEmail());
        }

        // Update password if provided with current password verification
        if (request.getPassword() != null && !request.getPassword().isEmpty()) {
            if (request.getCurrentPassword() == null || request.getCurrentPassword().isEmpty()) {
                logger.warn("Current password is required");
                throw new InvalidPasswordException("Current password is required");
            }

            if (!passwordEncoder.matches(request.getCurrentPassword(), student.getPassword())) {
                logger.warn("Current password is incorrect");
                throw new InvalidPasswordException("Current password is incorrect");
            }

            student.setPassword(passwordEncoder.encode(request.getPassword()));
        }

        // Update timezone if provided
        if (request.getTimeZoneId() != null) {
            try {
                ZoneId zone = ZoneId.of(request.getTimeZoneId());
                student.setTimeZone(zone);
            } catch (DateTimeException e) {
                logger.warn("Invalid timezone: {}", request.getTimeZoneId());
                throw new InvalidTimezoneException(request.getTimeZoneId());
            }
        }

        repository.update(student);

        logger.info("Student profile updated successfully for student: {}", studentId);
        return getStudentProfile(studentId);
    }

    @Transactional
    public Map<String, String> updateProfilePicture(String studentId, MultipartFile file) throws UserNotFoundException, IOException {
        Student student = findById(studentId);

        // Delete old profile picture if exists
        if (student.getProfilePictureId() != null) {
            try {
                fileService.deleteFile(student.getProfilePictureId());
            } catch (Exception e) {
                logger.warn("Couldn't delete old profile picture: {}", e.getMessage());
            }
        }

        // Store new profile picture
        String fileId = fileService.storeFile(studentId, file, "profile");
        student.setProfilePictureId(fileId);
        repository.update(student);

        Map<String, String> result = new HashMap<>();
        result.put("profilePictureId", fileId);
        result.put("profilePictureUrl", "/api/files/" + fileId);

        return result;
    }

    @Transactional
    public ValueResponse<Double> addFunds(String studentId, double amount) throws UserNotFoundException, InvalidFundAmountException {
        if (amount <= 0) {
            logger.warn("Invalid fund amount: {}", amount);
            throw new InvalidFundAmountException(amount);
        }

        Student student = findById(studentId);
        double newBalance = student.getBalance() + amount;
        student.setBalance(newBalance);
        repository.update(student);

        // Log transaction (would normally create a transaction record)
        // transactionService.createDeposit(studentId, amount);

        return dtoMapper.toValueResponse(newBalance);
    }

    public ValueResponse<Double> getBalance(String studentId) throws UserNotFoundException {
        Student student = findById(studentId);
        return dtoMapper.toValueResponse(student.getBalance());
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\student\exceptions\InsufficientBalanceException.java
======================================================================

package com.tutoringplatform.user.student.exceptions;

public class InsufficientBalanceException extends StudentException {
    private final String studentId;
    private final double required;
    private final double available;

    public InsufficientBalanceException(String studentId, double required, double available) {
        super("INSUFFICIENT_BALANCE", "Insufficient balance for student " + studentId + ". Required: " + required + ", Available: " + available);
        this.studentId = studentId;
        this.required = required;
        this.available = available;
    }

    public String getStudentId() {
        return studentId;
    }

    public double getRequired() {
        return required;
    }

    public double getAvailable() {
        return available;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\student\exceptions\InvalidFundAmountException.java
======================================================================

package com.tutoringplatform.user.student.exceptions;

public class InvalidFundAmountException extends StudentException {
    private final double amount;

    public InvalidFundAmountException(double amount) {
        super("INVALID_FUND_AMOUNT",
                String.format("Invalid fund amount: $%.2f", amount));
        this.amount = amount;
    }

    public double getAmount() {
        return amount;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\student\exceptions\StudentException.java
======================================================================

package com.tutoringplatform.user.student.exceptions;

import com.tutoringplatform.shared.exceptions.TutoringPlatformException;

public abstract class StudentException extends TutoringPlatformException {
    protected StudentException(String errorCode, String message) {
        super(errorCode, message);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\student\exceptions\StudentNotFoundException.java
======================================================================

package com.tutoringplatform.user.student.exceptions;

public class StudentNotFoundException extends StudentException {
    public StudentNotFoundException(String studentId) {
        super(studentId, "Student not found: " + studentId);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\tutor\ITutorRepository.java
======================================================================

package com.tutoringplatform.user.tutor;

import com.tutoringplatform.subject.Subject;
import com.tutoringplatform.user.IUserRepository;

import java.util.List;

public interface ITutorRepository extends IUserRepository<Tutor>{
    List<Tutor> findBySubject(Subject subject); 
}



======================================================================
// FILE: java\com\tutoringplatform\user\tutor\Tutor.java
======================================================================

package com.tutoringplatform.user.tutor;

import com.tutoringplatform.subject.Subject;
import com.tutoringplatform.user.User;
import com.tutoringplatform.user.UserType;

import java.util.ArrayList;
import java.util.List;

public class Tutor extends User {
    private List<Subject> subjects;
    private double hourlyRate;
    private String description;
    private double earnings;

    public Tutor(String name, String email, String password, double hourlyRate, String description) {
        super(name, email, password, UserType.TUTOR);
        this.subjects = new ArrayList<>();
        this.hourlyRate = hourlyRate;
        this.description = description;
        this.earnings = 0.0;
    }

    public List<Subject> getSubjects() {
        return subjects;
    }

    public void addSubject(Subject subject) {
        if (!subjects.contains(subject))
            subjects.add(subject);
    }

    public void removeSubject(Subject subject) {
        subjects.remove(subject);
    }

    public double getHourlyRate() { return hourlyRate; }
    public void setHourlyRate(double hourlyRate) { this.hourlyRate = hourlyRate; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public double getEarnings() { return earnings; }
    public void setEarnings(double earnings) { this.earnings = earnings; }

}



======================================================================
// FILE: java\com\tutoringplatform\user\tutor\TutorController.java
======================================================================

package com.tutoringplatform.user.tutor;

import com.tutoringplatform.shared.dto.request.UpdateProfileRequest;
import com.tutoringplatform.shared.dto.response.TutorProfileResponse;
import com.tutoringplatform.shared.dto.response.ValueResponse;
import com.tutoringplatform.user.availability.AvailabilityService;
import com.tutoringplatform.shared.dto.request.AddSubjectToTutorRequest;
import com.tutoringplatform.shared.dto.response.AvailabilityResponse;
import com.tutoringplatform.shared.dto.request.TutorAvailabilityRequest;
import com.tutoringplatform.user.exceptions.UserNotFoundException;
import com.tutoringplatform.subject.exceptions.SubjectNotFoundException;
import com.tutoringplatform.user.tutor.exceptions.TutorNotTeachingSubjectException;
import com.tutoringplatform.user.tutor.exceptions.TutorHasBookingsException;
import com.tutoringplatform.review.exceptions.NoCompletedBookingsException;
import com.tutoringplatform.authentication.exceptions.EmailAlreadyExistsException;
import com.tutoringplatform.user.exceptions.InvalidPasswordException;
import com.tutoringplatform.authentication.exceptions.InvalidTimezoneException;
import com.tutoringplatform.user.tutor.exceptions.TutorTeachesSubjectException;
import com.tutoringplatform.payment.exceptions.PaymentNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

import java.util.Map;
import java.util.List;
import java.io.IOException;

@RestController
@RequestMapping("/api/tutors")
public class TutorController {

    private final TutorService tutorService;
    private final AvailabilityService availabilityService;

    @Autowired
    public TutorController(TutorService tutorService, AvailabilityService availabilityService) {
        this.tutorService = tutorService;
        this.availabilityService = availabilityService;
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getTutor(@PathVariable String id) throws UserNotFoundException, NoCompletedBookingsException {
        TutorProfileResponse profile = tutorService.getTutorProfile(id);
        return ResponseEntity.ok(profile);
    }

    @GetMapping
    public ResponseEntity<?> getAllTutors() throws UserNotFoundException, NoCompletedBookingsException {
        List<TutorProfileResponse> tutors = tutorService.getAllTutorProfiles();
        return ResponseEntity.ok(tutors);
    }

    @PutMapping("/{id}")
    public ResponseEntity<?> updateTutor(@PathVariable String id, @RequestBody UpdateProfileRequest request) throws UserNotFoundException, EmailAlreadyExistsException, InvalidPasswordException, InvalidTimezoneException, NoCompletedBookingsException {
        TutorProfileResponse profile = tutorService.updateTutorProfile(id, request);
        return ResponseEntity.ok(profile);
    }

    @PostMapping("/{id}/profile-picture")
    public ResponseEntity<?> updateProfilePicture(
            @PathVariable String id,
            @RequestParam("file") MultipartFile file) throws UserNotFoundException, IOException {
        Map<String, String> result = tutorService.updateProfilePicture(id, file);
        return ResponseEntity.ok(result);
    }

    @PostMapping("/{id}/availability")
    public ResponseEntity<?> updateAvailability(
            @PathVariable String id,
            @RequestBody TutorAvailabilityRequest request) throws UserNotFoundException {
        AvailabilityResponse availability = availabilityService.updateTutorAvailability(id, request);
        return ResponseEntity.ok(availability);
    }

    @GetMapping("/{id}/availability")
    public ResponseEntity<?> getTutorAvailability(@PathVariable String id) throws UserNotFoundException {
        AvailabilityResponse availability = availabilityService.getTutorAvailability(id);
        return ResponseEntity.ok(availability);
    }

    @PostMapping("/{id}/subjects")
    public ResponseEntity<?> addSubject(@PathVariable String id, @RequestBody AddSubjectToTutorRequest request) throws UserNotFoundException, TutorTeachesSubjectException, SubjectNotFoundException, NoCompletedBookingsException {
        TutorProfileResponse profile = tutorService.addSubjectToTutor(id, request.getSubjectId());
        return ResponseEntity.ok(profile);
    }

    @DeleteMapping("/{id}/subjects/{subjectId}")
    public ResponseEntity<?> removeSubject(@PathVariable String id, @PathVariable String subjectId) throws UserNotFoundException, SubjectNotFoundException, TutorNotTeachingSubjectException, TutorHasBookingsException, NoCompletedBookingsException, PaymentNotFoundException {
        TutorProfileResponse profile = tutorService.removeSubjectFromTutor(id, subjectId);
        return ResponseEntity.ok(profile);
    }

    @GetMapping("/{id}/earnings")
    public ResponseEntity<?> getEarnings(@PathVariable String id) throws UserNotFoundException {
        ValueResponse<Double> earnings = tutorService.getEarnings(id);
        return ResponseEntity.ok(earnings);
    }

    @GetMapping("/{id}/average-rating")
    public ResponseEntity<?> getAverageRating(@PathVariable String id) throws NoCompletedBookingsException, UserNotFoundException {
        ValueResponse<Double> rating = tutorService.getAverageRating(id);
        return ResponseEntity.ok(rating);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\tutor\TutorRepository.java
======================================================================

package com.tutoringplatform.user.tutor;

import com.tutoringplatform.subject.Subject;

import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Repository
public class TutorRepository implements ITutorRepository {
    private Map<String, Tutor> tutors = new HashMap<>();

    @Override
    public Tutor findById(String id) {
        return tutors.get(id);
    }

    @Override
    public Tutor findByEmail(String email) {
        return tutors.values().stream()
                .filter(t -> t.getEmail().equals(email))
                .findFirst()
                .orElse(null);
    }

    @Override
    public List<Tutor> findAll() {
        return new ArrayList<>(tutors.values());
    }

    @Override
    public void save(Tutor tutor) {
        tutors.put(tutor.getId(), tutor);
    }

    @Override
    public void update(Tutor tutor) {
        tutors.put(tutor.getId(), tutor);
    }

    @Override
    public void delete(String id) {
        tutors.remove(id);
    }

    @Override
    public List<Tutor> findBySubject(Subject subject) {
        return tutors.values().stream()
                .filter(t -> t.getSubjects().contains(subject))
                .collect(Collectors.toList());
    }

    @Override
    public boolean emailExists(String email) {
        return findByEmail(email) != null;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\tutor\TutorService.java
======================================================================

package com.tutoringplatform.user.tutor;

import com.tutoringplatform.booking.Booking;
import com.tutoringplatform.booking.IBookingRepository;
import com.tutoringplatform.review.Review;
import com.tutoringplatform.subject.Subject;
import com.tutoringplatform.file.FileService;
import com.tutoringplatform.subject.ISubjectRepository;
import com.tutoringplatform.review.ReviewService;
import com.tutoringplatform.user.UserService;
import com.tutoringplatform.user.availability.AvailabilityService;
import com.tutoringplatform.shared.dto.request.UpdateProfileRequest;
import com.tutoringplatform.shared.dto.response.SubjectResponse;
import com.tutoringplatform.shared.dto.response.TutorProfileResponse;
import com.tutoringplatform.shared.dto.response.ValueResponse;
import com.tutoringplatform.shared.util.DTOMapper;
import com.tutoringplatform.user.availability.model.RecurringAvailability;
import com.tutoringplatform.user.availability.model.TutorAvailability;
import com.tutoringplatform.user.exceptions.UserNotFoundException;
import com.tutoringplatform.authentication.exceptions.EmailAlreadyExistsException;
import com.tutoringplatform.authentication.exceptions.InvalidTimezoneException;
import com.tutoringplatform.user.exceptions.InvalidPasswordException;
import com.tutoringplatform.user.tutor.exceptions.TutorTeachesSubjectException;
import com.tutoringplatform.subject.exceptions.SubjectNotFoundException;
import com.tutoringplatform.user.tutor.exceptions.TutorNotTeachingSubjectException;
import com.tutoringplatform.user.tutor.exceptions.TutorHasBookingsException;
import com.tutoringplatform.payment.exceptions.PaymentNotFoundException;
import com.tutoringplatform.review.exceptions.NoCompletedBookingsException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.multipart.MultipartFile;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;
import java.io.IOException;

@Service
public class TutorService extends UserService<Tutor> {

    private final Logger logger = LoggerFactory.getLogger(TutorService.class);
    private final ITutorRepository repository;
    private final ISubjectRepository subjectRepository;
    private final IBookingRepository bookingRepository;
    private final ReviewService reviewService;
    private final AvailabilityService availabilityService;
    private final FileService fileService;
    private final PasswordEncoder passwordEncoder;
    private final DTOMapper dtoMapper;
    @Autowired
    public TutorService(
            ITutorRepository repository,
            ISubjectRepository subjectRepository,
            IBookingRepository bookingRepository,
            ReviewService reviewService,
            AvailabilityService availabilityService,
            FileService fileService,
            PasswordEncoder passwordEncoder,
            DTOMapper dtoMapper) {
        super(repository);
        this.repository = repository;
        this.subjectRepository = subjectRepository;
        this.bookingRepository = bookingRepository;
        this.reviewService = reviewService;
        this.availabilityService = availabilityService;
        this.fileService = fileService;
        this.passwordEncoder = passwordEncoder;
        this.dtoMapper = dtoMapper;
    }

    public TutorProfileResponse getTutorProfile(String tutorId) throws UserNotFoundException, NoCompletedBookingsException {
        logger.debug("Getting tutor profile for tutor {}", tutorId);
        Tutor tutor = findById(tutorId);

        // Get reviews
        List<Review> allReviews = reviewService.getTutorReviews(tutorId);

        // Calculate average rating
        double averageRating = allReviews.isEmpty() ? 0.0
                : allReviews.stream()
                        .mapToDouble(Review::getRating)
                        .average()
                        .orElse(0.0);

        // Count completed sessions
        List<Booking> bookings = bookingRepository.findByTutorId(tutorId);
        int completedSessions = (int) bookings.stream()
                .filter(b -> b.getStatus() == Booking.BookingStatus.COMPLETED)
                .count();

        // Map subjects
        List<SubjectResponse> subjects = tutor.getSubjects().stream()
                .map(dtoMapper::toSubjectResponse)
                .collect(Collectors.toList());

        // Get availability
        TutorAvailability availability = availabilityService.getAvailability(tutorId);
        List<RecurringAvailability> recurringSlots = availability != null ? availability.getRecurringSlots()
                : new ArrayList<>();

        
        // Calculate joined date (would normally come from audit fields)
        LocalDate joinedDate = LocalDate.now().minusYears(1); // Placeholder

        logger.info("Tutor profile retrieved for tutor {}", tutorId);
        return dtoMapper.toTutorProfileResponse(
                tutor,
                averageRating,
                allReviews.size(),
                subjects,
                recurringSlots,
                completedSessions,
                joinedDate);
    }

    public List<TutorProfileResponse> getAllTutorProfiles() throws UserNotFoundException, NoCompletedBookingsException {
        logger.debug("Getting all tutor profiles");
        List<Tutor> tutors = findAll();
        List<TutorProfileResponse> profiles = new ArrayList<>();

        for (Tutor tutor : tutors) {
            profiles.add(getTutorProfile(tutor.getId()));
        }

        logger.info("All tutor profiles retrieved");
        return profiles;
    }

    @Transactional
    public TutorProfileResponse updateTutorProfile(String tutorId, UpdateProfileRequest request)
        throws UserNotFoundException, EmailAlreadyExistsException, InvalidPasswordException,
        InvalidTimezoneException, NoCompletedBookingsException {
        logger.debug("Updating tutor profile for tutor {}", tutorId);
        Tutor tutor = findById(tutorId);

        // Update name if provided
        if (request.getName() != null && !request.getName().trim().isEmpty()) {
            tutor.setName(request.getName());
        }

        // Update email if provided and not taken
        if (request.getEmail() != null && !request.getEmail().isEmpty()) {
            Tutor existing = repository.findByEmail(request.getEmail());
            if (existing != null && !existing.getId().equals(tutorId)) {
                throw new EmailAlreadyExistsException(request.getEmail());
            }
            tutor.setEmail(request.getEmail());
        }

        // Update password if provided with current password verification
        if (request.getPassword() != null && !request.getPassword().isEmpty()) {
            if (request.getCurrentPassword() == null || request.getCurrentPassword().isEmpty()) {
                throw new InvalidPasswordException("Current password is required");
            }

            if (!passwordEncoder.matches(request.getCurrentPassword(), tutor.getPassword())) {
                throw new InvalidPasswordException("Current password is incorrect");
            }

            tutor.setPassword(passwordEncoder.encode(request.getPassword()));
        }

        // Update timezone if provided
        if (request.getTimeZoneId() != null) {
            try {
                ZoneId zone = ZoneId.of(request.getTimeZoneId());
                tutor.setTimeZone(zone);
            } catch (IllegalArgumentException e) {
                logger.error("Invalid timezone: {}", request.getTimeZoneId());
                throw new InvalidTimezoneException(request.getTimeZoneId());
            }
        }

        // Update tutor-specific fields
        if (request.getHourlyRate() > 0) {
            tutor.setHourlyRate(request.getHourlyRate());
        }

        if (request.getDescription() != null && !request.getDescription().trim().isEmpty()) {
            tutor.setDescription(request.getDescription());
        }

        repository.update(tutor);

        logger.info("Tutor profile updated for tutor {}", tutorId);
        return getTutorProfile(tutorId);
    }

    @Transactional
    public Map<String, String> updateProfilePicture(String tutorId, MultipartFile file) throws UserNotFoundException, IOException {
        logger.debug("Updating profile picture for tutor {}", tutorId);
        Tutor tutor = findById(tutorId);

        // Delete old profile picture if exists
        if (tutor.getProfilePictureId() != null) {
            try {
                fileService.deleteFile(tutor.getProfilePictureId());
            } catch (Exception e) {
                logger.warn("Couldn't delete old profile picture: {}", e.getMessage());
            }
        }

        // Store new profile picture
        String fileId = fileService.storeFile(tutorId, file, "profile");
        tutor.setProfilePictureId(fileId);
        repository.update(tutor);

        Map<String, String> result = new HashMap<>();
        result.put("profilePictureId", fileId);
        result.put("profilePictureUrl", "/api/files/" + fileId);

        logger.info("Profile picture updated for tutor {}", tutorId);
        return result;
    }

    @Transactional
    public TutorProfileResponse addSubjectToTutor(String tutorId, String subjectId)
        throws UserNotFoundException, TutorTeachesSubjectException, SubjectNotFoundException,
        NoCompletedBookingsException {
        logger.debug("Adding subject {} to tutor {}", subjectId, tutorId);
        Tutor tutor = findById(tutorId);
        Subject subject = subjectRepository.findById(subjectId);

        if (subject == null) {
            logger.error("Subject not found: {}", subjectId);
            throw new SubjectNotFoundException(subjectId);
        }

        if (tutor.getSubjects().contains(subject)) {
            logger.error("Tutor {} already teaches this subject: {}", tutorId, subjectId);
            throw new TutorTeachesSubjectException(tutorId, subjectId);
        }

        tutor.addSubject(subject);
        repository.update(tutor);

        logger.info("Subject {} added to tutor {}", subjectId, tutorId);
        return getTutorProfile(tutorId);
    }

    @Transactional
    public TutorProfileResponse removeSubjectFromTutor(String tutorId, String subjectId)
        throws UserNotFoundException, SubjectNotFoundException, TutorNotTeachingSubjectException,
        TutorHasBookingsException, NoCompletedBookingsException, PaymentNotFoundException {
        logger.debug("Removing subject {} from tutor {}", subjectId, tutorId);
        Tutor tutor = findById(tutorId);
        Subject subject = subjectRepository.findById(subjectId);

        if (!tutor.getSubjects().contains(subject)) {
            logger.error("Tutor {} does not teach this subject: {}", tutorId, subjectId);
            throw new TutorNotTeachingSubjectException(tutorId, subjectId);
        }
        List<Booking> bookingsForSubject = bookingRepository.findByTutorIdAndSubjectId(tutorId, subjectId);
        if (!bookingsForSubject.isEmpty()) {
            logger.error("Cannot remove subject with existing bookings: {}", subjectId);
            throw new TutorHasBookingsException(tutorId, subjectId);
        }

        tutor.removeSubject(subject);
        repository.update(tutor);

        logger.info("Subject {} removed from tutor {}", subjectId, tutorId);
        return getTutorProfile(tutorId);
    }

    public ValueResponse<Double> getEarnings(String tutorId) throws UserNotFoundException {
        Tutor tutor = findById(tutorId);
        logger.debug("Earnings for tutor {} is {}", tutorId, tutor.getEarnings());
        return dtoMapper.toValueResponse(tutor.getEarnings());
    }

    public ValueResponse<Double> getAverageRating(String tutorId) throws NoCompletedBookingsException, UserNotFoundException {
        logger.debug("Getting average rating for tutor {}", tutorId);
        List<Review> reviews = reviewService.getTutorReviews(tutorId);

        double averageRating = reviews.isEmpty() ? 0.0
                : reviews.stream()
                        .mapToDouble(Review::getRating)
                        .average()
                        .orElse(0.0);

        logger.info("Average rating for tutor {} is {}", tutorId, averageRating);
        return dtoMapper.toValueResponse(averageRating);
    }

    public List<Tutor> findBySubject(Subject subject) {
        return repository.findBySubject(subject);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\tutor\exceptions\InvalidHourlyRateException.java
======================================================================

package com.tutoringplatform.user.tutor.exceptions;

public class InvalidHourlyRateException extends TutorException {
    private final double rate;

    public InvalidHourlyRateException(double rate, String reason) {
        super("INVALID_HOURLY_RATE",
                String.format("Invalid hourly rate: $%.2f. %s", rate, reason));
        this.rate = rate;
    }

    public double getRate() {
        return rate;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\tutor\exceptions\TutorException.java
======================================================================

package com.tutoringplatform.user.tutor.exceptions;

import com.tutoringplatform.shared.exceptions.TutoringPlatformException;

public abstract class TutorException extends TutoringPlatformException {
    protected TutorException(String errorCode, String message) {
        super(errorCode, message);
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\tutor\exceptions\TutorHasBookingsException.java
======================================================================

package com.tutoringplatform.user.tutor.exceptions;

public class TutorHasBookingsException extends TutorException {
    private final String tutorId;
    private final String subjectId;

    public TutorHasBookingsException(String tutorId, String subjectId) {
        super("TUTOR_HAS_BOOKINGS", String.format("Tutor %s has bookings for subject %s.", tutorId, subjectId));
        this.tutorId = tutorId;
        this.subjectId = subjectId;
    }

    public String getTutorId() {
        return tutorId;
    }

    public String getSubjectId() {
        return subjectId;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\tutor\exceptions\TutorNotTeachingSubjectException.java
======================================================================

package com.tutoringplatform.user.tutor.exceptions;

public class TutorNotTeachingSubjectException extends TutorException {
    private final String tutorId;
    private final String subjectId;

    public TutorNotTeachingSubjectException(String tutorId, String subjectId) {
        super("TUTOR_NOT_TEACHING_SUBJECT", "Tutor " + tutorId + " is not teaching subject " + subjectId + ".");
        this.tutorId = tutorId;
        this.subjectId = subjectId;
    }

    public String getTutorId() {
        return tutorId;
    }

    public String getSubjectId() {
        return subjectId;
    }
}



======================================================================
// FILE: java\com\tutoringplatform\user\tutor\exceptions\TutorTeachesSubjectException.java
======================================================================

package com.tutoringplatform.user.tutor.exceptions;

public class TutorTeachesSubjectException extends TutorException {
    private final String tutorId;
    private final String subjectId;

    public TutorTeachesSubjectException(String tutorId, String subjectId) {
        super("TUTOR_TEACHES_SUBJECT", String.format("Tutor %s already teaches this subject: %s", tutorId, subjectId));
        this.tutorId = tutorId;
        this.subjectId = subjectId;
    }

    public String getTutorId() {
        return tutorId;
    }

    public String getSubjectId() {
        return subjectId;
    }
}



======================================================================
// FILE: resources\static\index.html
======================================================================

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tutoring Platform</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="css/styles.css">
</head>

<body>
    <div id="app">
        <!-- Navigation -->
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark" id="mainNav" style="display: none;">
            <div class="container">
                <a class="navbar-brand" href="#">Tutoring Platform</a>
                <div class="navbar-nav ms-auto">
                    <span class="navbar-text me-3" id="userNameDisplay"></span>
                    <span class="navbar-text me-3" id="balanceDisplay"></span>
                    <!-- Notification bell -->
                    <div class="dropdown me-3">
                        <button class="btn btn-outline-light position-relative" id="notificationBell"
                            data-bs-toggle="dropdown">
                            <i class="bi bi-bell"></i>
                            <span
                                class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                                id="notificationCount" style="display: none;">
                                0
                            </span>
                        </button>
                        <div class="dropdown-menu dropdown-menu-end" id="notificationDropdown" style="width: 350px;">
                            <h6 class="dropdown-header">Notifications</h6>
                            <div id="notificationList" style="max-height: 400px; overflow-y: auto;">
                                <!-- Notifications will be populated here -->
                            </div>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item text-center" href="#" id="markAllReadBtn">Mark all as read</a>
                        </div>
                    </div>
                    <button class="btn btn-outline-light" id="logoutBtn">Logout</button>
                </div>
            </div>
        </nav>

        <!-- Login/Signup View -->
        <div id="authView" class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <ul class="nav nav-tabs mb-3">
                                <li class="nav-item">
                                    <a class="nav-link active" id="loginTab" href="#">Login</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="signupTab" href="#">Sign Up</a>
                                </li>
                            </ul>

                            <!-- Login Form -->
                            <form id="loginForm">
                                <div class="mb-3">
                                    <label for="loginEmail" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="loginEmail" required>
                                </div>
                                <div class="mb-3">
                                    <label for="loginPassword" class="form-label">Password</label>
                                    <input type="password" class="form-control" id="loginPassword" required>
                                </div>
                                <button type="submit" class="btn btn-primary">Login</button>
                                <div class="alert alert-danger mt-3" id="loginError" style="display: none;"></div>
                            </form>

                            <!-- Signup Form -->
                            <form id="signupForm" style="display: none;">
                                <div class="mb-3">
                                    <label for="signupUserType" class="form-label">I am a</label>
                                    <select class="form-control" id="signupUserType" required>
                                        <option value="">Select...</option>
                                        <option value="STUDENT">Student</option>
                                        <option value="TUTOR">Tutor</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="signupName" class="form-label">Name</label>
                                    <input type="text" class="form-control" id="signupName" required>
                                </div>
                                <div class="mb-3">
                                    <label for="signupEmail" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="signupEmail" required>
                                    <div class="invalid-feedback">Please enter a valid email address</div>
                                </div>
                                <div class="mb-3">
                                    <label for="signupPassword" class="form-label">Password</label>
                                    <input type="password" class="form-control" id="signupPassword" required>
                                    <div class="invalid-feedback">Password must be at least 8 characters</div>
                                    <small id="passwordStrength" class="form-text"></small>
                                </div>
                                <div class="mb-3">
                                    <label for="signupTimeZone" class="form-label">Time Zone</label>
                                    <select class="form-control" id="signupTimeZone" required>
                                        <option value="">Select timezone...</option>
                                        <option value="America/New_York">Eastern Time</option>
                                        <option value="America/Chicago">Central Time</option>
                                        <option value="America/Denver">Mountain Time</option>
                                        <option value="America/Los_Angeles">Pacific Time</option>
                                        <option value="Europe/London">London</option>
                                        <option value="Europe/Paris">Paris</option>
                                        <option value="Asia/Tokyo">Tokyo</option>
                                    </select>
                                </div>
                                <div id="tutorFields" style="display: none;">
                                    <div class="mb-3">
                                        <label for="signupHourlyRate" class="form-label">Hourly Rate ($)</label>
                                        <input type="number" class="form-control" id="signupHourlyRate" min="1"
                                            step="0.01">
                                    </div>
                                    <div class="mb-3">
                                        <label for="signupDescription" class="form-label">Description</label>
                                        <textarea class="form-control" id="signupDescription" rows="3"></textarea>
                                    </div>
                                </div>
                                <button type="submit" class="btn btn-primary">Sign Up</button>
                                <div class="alert alert-danger mt-3" id="signupError" style="display: none;"></div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Student Dashboard View -->
        <div id="studentDashboard" class="container mt-5" style="display: none;">
            <h2>Your Dashboard</h2>
            <div class="row mt-4">
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Profile</h5>
                            <div class="text-center mb-3">
                                <img id="studentProfilePic" src="/api/files/default-avatar" alt="Profile"
                                    class="profile-picture-preview">
                            </div>
                            <p>Name: <span id="studentName"></span></p>
                            <p>Balance: $<span id="studentBalance"></span></p>
                            <button class="btn btn-sm btn-primary" id="addFundsBtn">Add Funds</button>
                            <button class="btn btn-sm btn-secondary" id="editStudentProfileBtn">Edit Profile</button>
                        </div>
                    </div>
                    <div class="card mt-3">
                        <div class="card-body">
                            <h5 class="card-title">Statistics</h5>
                            <p>Total Sessions: <span id="totalSessions"></span></p>
                            <p>Completed: <span id="completedSessions"></span></p>
                            <p>Upcoming: <span id="upcomingSessions"></span></p>
                        </div>
                    </div>
                </div>
                <div class="col-md-9">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Actions</h5>
                            <button class="btn btn-primary" id="findTutorBtn">Find a Tutor</button>
                            <button class="btn btn-secondary" id="viewStudentBookingsBtn">My Bookings</button>
                        </div>
                    </div>
                    <div class="card mt-3">
                        <div class="card-body">
                            <h5 class="card-title">Upcoming Sessions</h5>
                            <div id="upcomingBookingsList"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tutor Dashboard View -->
        <div id="tutorDashboard" class="container mt-5" style="display: none;">
            <h2>Your Dashboard</h2>
            <div class="row mt-4">
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Profile</h5>
                            <div class="text-center mb-3">
                                <img id="tutorProfilePic" src="/api/files/default-avatar" alt="Profile"
                                    class="profile-picture-preview">
                            </div>
                            <p>Name: <span id="tutorName"></span></p>
                            <p>Rate: $<span id="tutorRate"></span>/hr</p>
                            <p>Rating: <span id="tutorRating"></span></p>
                            <p>Earnings: $<span id="tutorEarnings"></span></p>
                            <button class="btn btn-sm btn-secondary" id="editTutorProfileBtn">Edit Profile</button>
                        </div>
                    </div>
                    <div class="card mt-3">
                        <div class="card-body">
                            <h5 class="card-title">Statistics</h5>
                            <p>Total Sessions: <span id="tutorTotalSessions"></span></p>
                            <p>Completed: <span id="tutorCompletedSessions"></span></p>
                            <p>This Month: $<span id="thisMonthEarnings"></span></p>
                            <p>Reviews: <span id="totalReviews"></span></p>
                        </div>
                    </div>
                </div>
                <div class="col-md-9">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Actions</h5>
                            <button class="btn btn-primary" id="manageSubjectsBtn">Manage Subjects</button>
                            <button class="btn btn-secondary" id="manageAvailabilityBtn">Manage Availability</button>
                            <button class="btn btn-info" id="viewTutorBookingsBtn">My Sessions</button>
                        </div>
                    </div>
                    <div class="card mt-3">
                        <div class="card-body">
                            <h5 class="card-title">Today's Schedule</h5>
                            <div id="todaysScheduleList"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search Tutors View -->
        <div id="searchTutorsView" class="container mt-5" style="display: none;">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Find a Tutor</h2>
                <button class="btn btn-secondary" id="backFromSearchBtn">Back to Dashboard</button>
            </div>
            <div class="card mb-4">
                <div class="card-body">
                    <form id="searchForm">
                        <div class="row">
                            <div class="col-md-4">
                                <label for="searchSubject" class="form-label">Subject</label>
                                <select class="form-control" id="searchSubject">
                                    <option value="">All Subjects</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label for="minPrice" class="form-label">Min Price</label>
                                <input type="number" class="form-control" id="minPrice" min="0">
                            </div>
                            <div class="col-md-2">
                                <label for="maxPrice" class="form-label">Max Price</label>
                                <input type="number" class="form-control" id="maxPrice" min="0">
                            </div>
                            <div class="col-md-2">
                                <label for="minRating" class="form-label">Min Rating</label>
                                <input type="number" class="form-control" id="minRating" min="0" max="5" step="0.1">
                            </div>
                            <div class="col-md-2">
                                <label for="sortBy" class="form-label">Sort By</label>
                                <select class="form-control" id="sortBy">
                                    <option value="RATING">Rating</option>
                                    <option value="PRICE_LOW">Price: Low to High</option>
                                    <option value="PRICE_HIGH">Price: High to Low</option>
                                    <option value="REVIEWS">Most Reviews</option>
                                </select>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary mt-3">Search</button>
                    </form>
                </div>
            </div>
            <div id="searchResults"></div>
        </div>

        <!-- Booking Management View -->
        <div id="bookingManagementView" class="container mt-5" style="display: none;">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 id="bookingViewTitle">My Bookings</h2>
                <button class="btn btn-secondary" id="backFromBookingsBtn">Back to Dashboard</button>
            </div>
            <ul class="nav nav-tabs mb-3">
                <li class="nav-item">
                    <a class="nav-link active" id="upcomingTab" href="#">Upcoming</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="pastTab" href="#">Past</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="cancelledTab" href="#">Cancelled</a>
                </li>
            </ul>
            <div id="bookingsList"></div>
        </div>

        <!-- Subject Management View (Tutors) -->
        <div id="subjectManagementView" class="container mt-5" style="display: none;">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Manage Subjects</h2>
                <button class="btn btn-secondary" id="backFromSubjectsBtn">Back to Dashboard</button>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">My Subjects</h5>
                            <div id="mySubjectsList"></div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Available Subjects</h5>
                            <div id="availableSubjectsList"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Availability Management View (Tutors) -->
        <div id="availabilityManagementView" class="container mt-5" style="display: none;">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Manage Availability</h2>
                <button class="btn btn-secondary" id="backFromAvailabilityBtn">Back to Dashboard</button>
            </div>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Add Availability Slot</h5>
                    <form id="availabilityForm">
                        <div class="row">
                            <div class="col-md-3">
                                <label for="dayOfWeek" class="form-label">Day of Week</label>
                                <select class="form-control" id="dayOfWeek" required>
                                    <option value="MONDAY">Monday</option>
                                    <option value="TUESDAY">Tuesday</option>
                                    <option value="WEDNESDAY">Wednesday</option>
                                    <option value="THURSDAY">Thursday</option>
                                    <option value="FRIDAY">Friday</option>
                                    <option value="SATURDAY">Saturday</option>
                                    <option value="SUNDAY">Sunday</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="startTime" class="form-label">Start Time</label>
                                <input type="time" class="form-control" id="startTime" required>
                            </div>
                            <div class="col-md-3">
                                <label for="endTime" class="form-label">End Time</label>
                                <input type="time" class="form-control" id="endTime" required>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">&nbsp;</label>
                                <button type="submit" class="btn btn-primary d-block">Add Slot</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="card mt-3">
                <div class="card-body">
                    <h5 class="card-title">Current Availability</h5>
                    <div id="availabilityList"></div>
                </div>
            </div>
        </div>

        <!-- Profile Edit Modal -->
        <div class="modal fade" id="profileEditModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Profile</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger modal-error" style="display: none;"></div>
                        <form id="profileEditForm">
                            <div class="mb-3">
                                <label for="editName" class="form-label">Name</label>
                                <input type="text" class="form-control" id="editName">
                            </div>
                            <div class="mb-3">
                                <label for="editEmail" class="form-label">Email</label>
                                <input type="email" class="form-control" id="editEmail">
                            </div>
                            <div class="mb-3">
                                <label for="editCurrentPassword" class="form-label">Current Password (required for
                                    password change)</label>
                                <input type="password" class="form-control" id="editCurrentPassword">
                            </div>
                            <div class="mb-3">
                                <label for="editNewPassword" class="form-label">New Password</label>
                                <input type="password" class="form-control" id="editNewPassword">
                            </div>
                            <div class="mb-3">
                                <label for="editTimeZone" class="form-label">Time Zone</label>
                                <select class="form-control" id="editTimeZone">
                                    <option value="America/New_York">Eastern Time (UTC-5)</option>
                                    <option value="America/Chicago">Central Time (UTC-6)</option>
                                    <option value="America/Denver">Mountain Time (UTC-7)</option>
                                    <option value="America/Los_Angeles">Pacific Time (UTC-8)</option>
                                    <option value="Europe/London">London (UTC+0)</option>
                                    <option value="Europe/Paris">Paris (UTC+1)</option>
                                    <option value="Asia/Tokyo">Tokyo (UTC+9)</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="profilePictureUpload" class="form-label">Profile Picture</label>
                                <input type="file" class="form-control" id="profilePictureUpload" accept="image/*">
                                <small class="text-muted">Accepted formats: JPG, PNG (Max 5MB)</small>
                            </div>
                            <div id="tutorEditFields" style="display: none;">
                                <div class="mb-3">
                                    <label for="editHourlyRate" class="form-label">Hourly Rate ($)</label>
                                    <input type="number" class="form-control" id="editHourlyRate" min="1" step="0.01">
                                </div>
                                <div class="mb-3">
                                    <label for="editDescription" class="form-label">Description</label>
                                    <textarea class="form-control" id="editDescription" rows="3"></textarea>
                                    <small id="autoSaveIndicator" class="text-muted"></small>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="saveProfileBtn">Save Changes</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Add Funds Modal -->
        <div class="modal fade" id="addFundsModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add Funds</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger modal-error" style="display: none;"></div>
                        <form id="addFundsForm">
                            <div class="mb-3">
                                <label for="fundAmount" class="form-label">Amount ($)</label>
                                <input type="number" class="form-control" id="fundAmount" min="1" step="0.01" required>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="confirmAddFundsBtn">Add Funds</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Create Booking Modal -->
        <div class="modal fade" id="createBookingModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Book Session with <span id="bookingTutorName"></span></h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger modal-error" style="display: none;"></div>
                        <form id="createBookingForm">
                            <input type="hidden" id="bookingTutorId">
                            <div class="mb-3">
                                <label for="bookingSubject" class="form-label">Subject</label>
                                <select class="form-control" id="bookingSubject" required>
                                    <option value="">Select subject...</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="bookingDate" class="form-label">Date</label>
                                <input type="date" class="form-control" id="bookingDate" required min="">
                            </div>
                            <div class="mb-3">
                                <label for="bookingTime" class="form-label">Time</label>
                                <input type="time" class="form-control" id="bookingTime" required>
                            </div>
                            <div class="mb-3">
                                <label for="bookingDuration" class="form-label">Duration (hours)</label>
                                <input type="number" class="form-control" id="bookingDuration" min="1" max="4" value="1"
                                    required>
                            </div>
                            <p>Total Cost: $<span id="bookingTotalCost">0</span></p>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="confirmBookingBtn">Create Booking</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Review Modal -->
        <div class="modal fade" id="reviewModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Leave a Review</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="alert alert-danger modal-error" style="display: none;"></div>
                        <form id="reviewForm">
                            <input type="hidden" id="reviewTutorId">
                            <div class="mb-3">
                                <label for="reviewRating" class="form-label">Rating</label>
                                <select class="form-control" id="reviewRating" required>
                                    <option value="">Select rating...</option>
                                    <option value="5">5 - Excellent</option>
                                    <option value="4">4 - Very Good</option>
                                    <option value="3">3 - Good</option>
                                    <option value="2">2 - Fair</option>
                                    <option value="1">1 - Poor</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="reviewComment" class="form-label">Comment</label>
                                <textarea class="form-control" id="reviewComment" rows="3" required></textarea>
                                <small class="text-muted">Minimum 50 characters required</small>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="submitReviewBtn">Submit Review</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tutor Details Modal -->
        <div class="modal fade" id="tutorDetailsModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Tutor Details</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div id="tutorDetailsContent"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Generic Confirmation Modal -->
        <div class="modal fade" id="confirmModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="confirmTitle">Confirm Action</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <p id="confirmMessage"></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" id="confirmCancelBtn">Cancel</button>
                        <button type="button" class="btn btn-warning" id="confirmActionBtn">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="loading-message mt-3">Loading...</p>
    </div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="toast" class="toast" role="alert">
            <div class="toast-header">
                <strong class="me-auto" id="toastTitle">Notification</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body" id="toastMessage"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="js/app.js"></script>
</body>

</html>



======================================================================
// FILE: resources\static\css\styles.css
======================================================================

/* CSS Variables for theming */
:root {
    --primary: #4f46e5;
    --primary-dark: #4338ca;
    --primary-light: #6366f1;
    --secondary: #10b981;
    --danger: #ef4444;
    --warning: #f59e0b;
    --gray-50: #f9fafb;
    --gray-100: #f3f4f6;
    --gray-200: #e5e7eb;
    --gray-300: #d1d5db;
    --gray-400: #9ca3af;
    --gray-500: #6b7280;
    --gray-600: #4b5563;
    --gray-700: #374151;
    --gray-800: #1f2937;
    --gray-900: #111827;
    --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    line-height: 1.6;
    color: var(--gray-900);
    background: var(--gray-50);
}

/* Override Bootstrap Navbar */
.navbar {
    background: white !important;
    box-shadow: var(--shadow);
    padding: 1rem 0;
}

.navbar-brand {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primary) !important;
    cursor: pointer;
    text-decoration: none;
}

.navbar-brand:hover {
    color: var(--primary-dark) !important;
}

.navbar-text,
#userNameDisplay {
    color: var(--gray-700) !important;
    font-weight: 500;
}

/* Remove balance/rate display */
#balanceDisplay {
    display: none;
}

/* Fix logout button visibility */
#logoutBtn {
    background: var(--primary);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
}

#logoutBtn:hover {
    background: var(--primary-dark);
    color: white;
}

/* Override Bootstrap Cards */
.card {
    background: white;
    border: none;
    border-radius: 8px;
    box-shadow: var(--shadow);
    margin-bottom: 1rem;
    transition: box-shadow 0.2s;
}

.card:hover {
    box-shadow: var(--shadow-lg);
}

.card-body {
    padding: 1.5rem;
}

.card-title {
    color: var(--gray-900);
    margin-bottom: 0.5rem;
}

/* Override Bootstrap Forms */
.form-label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--gray-700);
}

.form-control,
.form-select {
    width: 100%;
    padding: 0.5rem 0.75rem;
    border: 1px solid var(--gray-300);
    border-radius: 4px;
    font-size: 1rem;
    transition: border-color 0.2s, box-shadow 0.2s;
    background: white;
}

.form-control:focus,
.form-select:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
}

.form-control[type="date"],
.form-control[type="time"] {
    padding: 0.5rem 0.75rem;
}

textarea.form-control {
    resize: vertical;
    min-height: 100px;
}

/* Override Bootstrap Buttons */
.btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
    text-decoration: none;
    display: inline-block;
    text-align: center;
}

.btn:hover {
    transform: translateY(-1px);
    box-shadow: var(--shadow);
}

.btn:active {
    transform: translateY(0);
}

/* Unified button styling - primary for main actions */
.btn-primary,
.btn-success,
.btn-info {
    background: var(--primary);
    color: white;
}

.btn-primary:hover,
.btn-success:hover,
.btn-info:hover {
    background: var(--primary-dark);
    color: white;
}

.btn-secondary {
    background: var(--gray-200);
    color: var(--gray-700);
}

.btn-secondary:hover {
    background: var(--gray-300);
    color: var(--gray-700);
}

.btn-danger {
    background: var(--danger);
    color: white;
}

.btn-danger:hover {
    background: #dc2626;
    color: white;
}

.btn-outline-light {
    background: transparent;
    color: white;
    border: 1px solid white;
}

.btn-outline-light:hover {
    background: white;
    color: var(--primary);
}

.btn-sm {
    padding: 0.25rem 0.75rem;
    font-size: 0.875rem;
}

/* Override Bootstrap Nav Tabs */
.nav-tabs {
    border-bottom: 1px solid var(--gray-200);
}

.nav-tabs .nav-link {
    color: var(--gray-600);
    border: none;
    border-bottom: 2px solid transparent;
    padding: 0.5rem 1rem;
    font-weight: 500;
}

.nav-tabs .nav-link:hover {
    color: var(--primary);
    border-color: transparent;
}

.nav-tabs .nav-link.active {
    color: var(--primary);
    background: none;
    border-color: transparent;
    border-bottom-color: var(--primary);
}

/* Override Bootstrap Alerts */
.alert {
    border: none;
    border-radius: 4px;
    padding: 1rem;
}

.alert-danger {
    background: #fee2e2;
    color: var(--danger);
}

/* Override Bootstrap Modals */
.modal-content {
    border: none;
    border-radius: 8px;
}

.modal-header {
    border-bottom: 1px solid var(--gray-200);
    padding: 1.5rem;
}

.modal-body {
    padding: 1.5rem;
}

.modal-footer {
    border-top: 1px solid var(--gray-200);
    padding: 1rem 1.5rem;
}

/* Auth View Specific */
#authView .card {
    max-width: 450px;
    margin: 0 auto;
}

/* Dashboard Components */
h2 {
    color: var(--gray-900);
    font-size: 1.875rem;
    margin-bottom: 1.5rem;
}

/* Tutor Search Results */
.tutor-card {
    display: flex;
    gap: 1rem;
    align-items: start;
}

.tutor-info h5 {
    color: var(--gray-900);
    margin-bottom: 0.25rem;
}

.tutor-meta {
    display: flex;
    gap: 1rem;
    margin: 0.5rem 0;
    font-size: 0.875rem;
    color: var(--gray-600);
}

/* Booking Cards */
.booking-status {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 500;
}

.booking-status.PENDING {
    background: #fef3c7;
    color: #d97706;
}

.booking-status.CONFIRMED {
    background: #d1fae5;
    color: #065f46;
}

.booking-status.COMPLETED {
    background: #ddd6fe;
    color: #5b21b6;
}

.booking-status.CANCELLED {
    background: #fee2e2;
    color: var(--danger);
}

/* Subject Tags */
.subject-tag {
    background: var(--gray-100);
    color: var(--gray-700);
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    display: inline-block;
    margin-right: 0.5rem;
    margin-bottom: 0.5rem;
}

/* Availability Management */
.availability-slot {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: var(--gray-100);
    border-radius: 4px;
    margin-bottom: 0.5rem;
}

/* Stats Display */
.stat-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--primary);
}

/* Review Display */
.review-card {
    border-left: 4px solid var(--primary);
    padding-left: 1rem;
    margin-bottom: 1rem;
}

.review-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
}

.review-date {
    color: var(--gray-500);
    font-size: 0.875rem;
}

/* Empty States */
.empty-state {
    text-align: center;
    padding: 3rem;
    color: var(--gray-500);
}

/* Rating Stars */
.rating {
    color: var(--warning);
    font-size: 1.2rem;
}

.star {
    color: var(--warning);
    font-size: 1.2rem;
}

.star.empty {
    color: var(--gray-300);
}

.star.half::after {
    content: '★';
    color: var(--warning);
    position: absolute;
    overflow: hidden;
    width: 50%;
}

.not-rated {
    color: var(--gray-500);
    font-style: italic;
}

/* Cost Display */
#bookingTotalCost {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--primary);
}

/* Loading States */
.spinner {
    border: 3px solid var(--gray-200);
    border-top: 3px solid var(--primary);
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 2rem auto;
}

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .container {
        padding: 0 1rem;
    }

    .card-body {
        padding: 1rem;
    }

    .btn {
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
    }

    h2 {
        font-size: 1.5rem;
    }

    .modal-content {
        margin: 1rem;
    }
}

/* Utility Classes to Override Bootstrap */
.text-muted {
    color: var(--gray-500) !important;
}

.text-center {
    text-align: center;
}

.text-end {
    text-align: right;
}

.d-flex {
    display: flex;
}

.justify-content-between {
    justify-content: space-between;
}

.align-items-center {
    align-items: center;
}

.mb-0 {
    margin-bottom: 0;
}

.mb-1 {
    margin-bottom: 0.25rem;
}

.mb-2 {
    margin-bottom: 0.5rem;
}

.mb-3 {
    margin-bottom: 1rem;
}

.mb-4 {
    margin-bottom: 1.5rem;
}

.mt-2 {
    margin-top: 0.5rem;
}

.mt-3 {
    margin-top: 1rem;
}

.mt-4 {
    margin-top: 1.5rem;
}

.mt-5 {
    margin-top: 3rem;
}

/* Fix Bootstrap's default link colors */
a {
    color: var(--primary);
    text-decoration: none;
}

a:hover {
    color: var(--primary-dark);
}

/* Profile Picture Placeholder */
.profile-picture {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background: var(--gray-200);
    object-fit: cover;
}

/* Session Time Display */
.session-time {
    font-size: 0.875rem;
    color: var(--gray-600);
}

/* Price Display */
.price-display {
    color: var(--secondary);
    font-weight: 600;
}

/* Search Form Specific */
#searchForm .row {
    align-items: end;
}

#searchForm .btn {
    margin-top: 0.5rem;
}

/* Subject List Items */
.subject-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    border-bottom: 1px solid var(--gray-100);
}

.subject-item:last-child {
    border-bottom: none;
}

/* Upcoming Sessions List */
.session-item {
    padding: 0.75rem;
    border-left: 3px solid var(--primary);
    background: var(--gray-50);
    margin-bottom: 0.5rem;
    border-radius: 0 4px 4px 0;
}

/* Fix spacing in booking details */
.booking-details p {
    margin-bottom: 0.5rem;
}

.booking-details p:last-child {
    margin-bottom: 0;
}

.toast-success {
    border-left: 4px solid var(--secondary);
}

.toast-danger {
    border-left: 4px solid var(--danger);
}

.toast-info {
    border-left: 4px solid var(--primary);
}

.empty-state {
    text-align: center;
    padding: 4rem 2rem;
    color: var(--gray-500);
}

.empty-state i {
    font-size: 4rem;
    color: var(--gray-300);
    display: block;
    margin-bottom: 1rem;
}

.empty-state h5 {
    color: var(--gray-700);
    margin-bottom: 0.5rem;
}

.empty-state p {
    margin-bottom: 1.5rem;
}

#loadingOverlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.9);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

.loading-message {
    color: var(--gray-700);
    font-weight: 500;
}

/* Notification Dropdown Styles */
.notification-item {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid var(--gray-100);
    cursor: pointer;
    transition: background-color 0.2s;
}

.notification-item:hover {
    background-color: var(--gray-50);
}

.notification-item.unread {
    background-color: var(--primary-light);
    background-color: rgba(99, 102, 241, 0.05);
}

.notification-item:last-child {
    border-bottom: none;
}

#notificationBell {
    position: relative;
    background: transparent;
    border: 1px solid rgba(255, 255, 255, 0.5);
    color: var(--gray-700);
    padding: 0.5rem 0.75rem;
}

#notificationBell:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.8);
}

.badge {
    font-size: 0.7rem;
    padding: 0.2rem 0.4rem;
}

#notificationDropdown {
    box-shadow: var(--shadow-lg);
    border: none;
    border-radius: 8px;
    margin-top: 0.5rem;
}

.dropdown-header {
    background: var(--gray-50);
    padding: 0.75rem 1rem;
    font-weight: 600;
    color: var(--gray-900);
}

/* File Upload Styles */
input[type="file"] {
    font-size: 0.9rem;
}

input[type="file"]::-webkit-file-upload-button {
    background: var(--primary);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.875rem;
    margin-right: 1rem;
}

input[type="file"]::-webkit-file-upload-button:hover {
    background: var(--primary-dark);
}

/* Profile Picture Preview */
.profile-picture-preview {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    object-fit: cover;
    border: 3px solid var(--gray-200);
    margin-bottom: 1rem;
}



======================================================================
// FILE: resources\static\js\app.js
======================================================================

// Global state management
const state = {
  currentUser: null,
  currentView: "auth",
};

// API Base URL
const API_BASE_URL = "/api";

// Bootstrap modal instances
let profileEditModal;
let addFundsModal;
let createBookingModal;
let reviewModal;
let tutorDetailsModal;

// Loading state management
const loadingState = {
  isLoading: false,
  loadingMessage: ''
};

// Notification polling interval
let notificationInterval;

// Initialize the application
document.addEventListener("DOMContentLoaded", () => {
  initializeModals();
  initializeEventListeners();
  initializeTimezoneSelects();
  checkAuthState();
});

// Initialize Bootstrap modals
function initializeModals() {
  profileEditModal = new bootstrap.Modal(
    document.getElementById("profileEditModal")
  );
  addFundsModal = new bootstrap.Modal(document.getElementById("addFundsModal"));
  createBookingModal = new bootstrap.Modal(
    document.getElementById("createBookingModal")
  );
  reviewModal = new bootstrap.Modal(document.getElementById("reviewModal"));
  tutorDetailsModal = new bootstrap.Modal(
    document.getElementById("tutorDetailsModal")
  );
}

// Initialize all event listeners
function initializeEventListeners() {
  // Auth listeners
  document.getElementById("loginTab").addEventListener("click", showLoginForm);
  document
    .getElementById("signupTab")
    .addEventListener("click", showSignupForm);
  document.getElementById("loginForm").addEventListener("submit", handleLogin);
  document
    .getElementById("signupForm")
    .addEventListener("submit", handleSignup);
  document
    .getElementById("signupUserType")
    .addEventListener("change", toggleTutorFields);
  document.getElementById("logoutBtn").addEventListener("click", handleLogout);

  // Logo click to go to dashboard
  document.querySelector(".navbar-brand").addEventListener("click", () => {
    if (state.currentUser) {
      showDashboard();
    }
  });

  // Student dashboard listeners
  document
    .getElementById("addFundsBtn")
    .addEventListener("click", showAddFundsModal);
  document
    .getElementById("editStudentProfileBtn")
    .addEventListener("click", showEditProfileModal);
  document
    .getElementById("findTutorBtn")
    .addEventListener("click", showSearchTutors);
  document
    .getElementById("viewStudentBookingsBtn")
    .addEventListener("click", showStudentBookings);
  document
    .getElementById("confirmAddFundsBtn")
    .addEventListener("click", handleAddFunds);

  // Tutor dashboard listeners
  document
    .getElementById("editTutorProfileBtn")
    .addEventListener("click", showEditProfileModal);
  document
    .getElementById("manageSubjectsBtn")
    .addEventListener("click", showSubjectManagement);
  document
    .getElementById("manageAvailabilityBtn")
    .addEventListener("click", showAvailabilityManagement);
  document
    .getElementById("viewTutorBookingsBtn")
    .addEventListener("click", showTutorBookings);

  // Search listeners
  document
    .getElementById("backFromSearchBtn")
    .addEventListener("click", backToDashboard);
  document
    .getElementById("searchForm")
    .addEventListener("submit", handleSearch);

  // Booking management listeners
  document
    .getElementById("backFromBookingsBtn")
    .addEventListener("click", backToDashboard);
  document
    .getElementById("upcomingTab")
    .addEventListener("click", () => showBookingTab("upcoming"));
  document
    .getElementById("pastTab")
    .addEventListener("click", () => showBookingTab("past"));
  document
    .getElementById("cancelledTab")
    .addEventListener("click", () => showBookingTab("cancelled"));

  // Subject management listeners
  document
    .getElementById("backFromSubjectsBtn")
    .addEventListener("click", backToDashboard);

  // Availability management listeners
  document
    .getElementById("backFromAvailabilityBtn")
    .addEventListener("click", backToDashboard);
  document
    .getElementById("availabilityForm")
    .addEventListener("submit", handleAddAvailability);

  // Modal listeners
  document
    .getElementById("saveProfileBtn")
    .addEventListener("click", handleUpdateProfile);
  document
    .getElementById("confirmBookingBtn")
    .addEventListener("click", handleCreateBooking);
  document
    .getElementById("submitReviewBtn")
    .addEventListener("click", handleSubmitReview);
  document
    .getElementById("bookingDuration")
    .addEventListener("input", updateBookingCost);

  // Notification listeners
  document.getElementById('markAllReadBtn').addEventListener('click', markAllNotificationsRead);

  // Event delegation for dynamically created content

  // Search results event delegation
  document.getElementById("searchResults").addEventListener("click", (e) => {
    if (e.target.classList.contains("book-tutor-btn")) {
      const tutorId = e.target.dataset.tutorId;
      const tutorName = e.target.dataset.tutorName;
      const hourlyRate = parseFloat(e.target.dataset.hourlyRate);
      bookTutor(tutorId, tutorName, hourlyRate);
    } else if (e.target.classList.contains("view-tutor-btn")) {
      const tutorId = e.target.dataset.tutorId;
      viewTutorDetails(tutorId);
    }
  });

  // Bookings list event delegation
  document.getElementById("bookingsList").addEventListener("click", (e) => {
    if (e.target.classList.contains("confirm-booking-btn")) {
      const bookingId = e.target.dataset.bookingId;
      confirmBooking(bookingId);
    } else if (e.target.classList.contains("cancel-booking-btn")) {
      const bookingId = e.target.dataset.bookingId;
      cancelBooking(bookingId);
    } else if (e.target.classList.contains("complete-booking-btn")) {
      const bookingId = e.target.dataset.bookingId;
      completeBooking(bookingId);
    } else if (e.target.classList.contains("review-tutor-btn")) {
      const tutorId = e.target.dataset.tutorId;
      showReviewModal(tutorId);
    }
  });

  // Subject management event delegation
  document.getElementById("mySubjectsList").addEventListener("click", (e) => {
    if (e.target.classList.contains("remove-subject-btn")) {
      const subjectId = e.target.dataset.subjectId;
      removeSubject(subjectId);
    }
  });

  document
    .getElementById("availableSubjectsList")
    .addEventListener("click", (e) => {
      if (e.target.classList.contains("add-subject-btn")) {
        const subjectId = e.target.dataset.subjectId;
        addSubject(subjectId);
      }
    });

  // Availability management event delegation
  document.getElementById("availabilityList").addEventListener("click", (e) => {
    if (e.target.classList.contains("remove-availability-btn")) {
      const dayOfWeek = e.target.dataset.dayOfWeek;
      const startTime = e.target.dataset.startTime;
      const endTime = e.target.dataset.endTime;
      removeAvailability(dayOfWeek, startTime, endTime);
    }
  });

  // Form validation listeners
  addFormValidationListeners();

  // Keyboard shortcuts
  addKeyboardShortcuts();

  // Auto-save listeners
  addAutoSaveListeners();
}

// Initialize timezone selects
function initializeTimezoneSelects() {
  // This function is called but not implemented in the original code
  // You can leave it empty if timezones are hardcoded in HTML
}

// Loading overlay functions
function showLoading(message = 'Loading...') {
  loadingState.isLoading = true;
  loadingState.loadingMessage = message;
  
  const overlay = document.getElementById('loadingOverlay');
  if (overlay) {
    overlay.querySelector('.loading-message').textContent = message;
    overlay.style.display = 'flex';
  }
}

function hideLoading() {
  loadingState.isLoading = false;
  const overlay = document.getElementById('loadingOverlay');
  if (overlay) {
    overlay.style.display = 'none';
  }
}

// Notification functions
function startNotificationPolling() {
  // Initial load
  loadNotifications();
  
  // Poll every 30 seconds
  notificationInterval = setInterval(loadNotifications, 30000);
}

function stopNotificationPolling() {
  if (notificationInterval) {
    clearInterval(notificationInterval);
    notificationInterval = null;
  }
}

async function loadNotifications() {
  if (!state.currentUser) return;
  
  try {
    const response = await fetch(`${API_BASE_URL}/notifications/user/${state.currentUser.id}/unread`);
    if (response.ok) {
      const data = await response.json();
      updateNotificationUI(data);
    }
  } catch (error) {
    console.error("Error loading notifications:", error);
  }
}

function updateNotificationUI(data) {
  const countBadge = document.getElementById('notificationCount');
  const notificationList = document.getElementById('notificationList');
  
  // Update count
  if (data.unreadCount > 0) {
    countBadge.textContent = data.unreadCount > 9 ? '9+' : data.unreadCount;
    countBadge.style.display = 'inline-block';
  } else {
    countBadge.style.display = 'none';
  }
  
  // Update notification list
  notificationList.innerHTML = '';
  
  if (data.notifications.length === 0) {
    notificationList.innerHTML = '<div class="dropdown-item text-muted">No new notifications</div>';
    return;
  }
  
  data.notifications.forEach(notification => {
    const notifElement = document.createElement('div');
    notifElement.className = `dropdown-item notification-item ${!notification.read ? 'unread' : ''}`;
    notifElement.innerHTML = `
      <div class="d-flex justify-content-between align-items-start">
        <div>
          <h6 class="mb-1">${notification.title}</h6>
          <p class="mb-0 small">${notification.message}</p>
          <small class="text-muted">${formatTimeAgo(notification.createdAt)}</small>
        </div>
        ${notification.actionUrl ? `<i class="bi bi-chevron-right"></i>` : ''}
      </div>
    `;
    
    notifElement.addEventListener('click', () => handleNotificationClick(notification));
    notificationList.appendChild(notifElement);
  });
}

async function handleNotificationClick(notification) {
  // Mark as read
  try {
    await fetch(`${API_BASE_URL}/notifications/${notification.id}/read`, {
      method: 'PUT'
    });
    
    // Reload notifications
    loadNotifications();
    
    // Navigate if action URL exists
    if (notification.actionUrl) {
      // Handle navigation based on URL
      if (notification.actionUrl.includes('/bookings/')) {
        showBookingManagement();
      }
    }
  } catch (error) {
    console.error("Error marking notification as read:", error);
  }
}

async function markAllNotificationsRead() {
  try {
    await fetch(`${API_BASE_URL}/notifications/user/${state.currentUser.id}/read-all`, {
      method: 'PUT'
    });
    loadNotifications();
  } catch (error) {
    console.error("Error marking all notifications as read:", error);
  }
}

// Validation utilities
const validators = {
  email: (email) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  },
  
  password: (password) => {
    return password.length >= 8;
  },
  
  hourlyRate: (rate) => {
    return rate > 0 && rate <= 1000;
  },
  
  description: (desc) => {
    return desc && desc.trim().length >= 50 && desc.length <= 1000;
  }
};

function addFormValidationListeners() {
  // Add real-time validation
  document.getElementById('signupEmail').addEventListener('blur', function() {
    const email = this.value;
    const isValid = validators.email(email);
    this.classList.toggle('is-invalid', !isValid && email.length > 0);
  });

  document.getElementById('signupPassword').addEventListener('input', function() {
    const password = this.value;
    const isValid = validators.password(password);
    this.classList.toggle('is-invalid', !isValid && password.length > 0);
    
    // Show password strength
    const strengthIndicator = document.getElementById('passwordStrength');
    if (strengthIndicator) {
      const strength = calculatePasswordStrength(password);
      strengthIndicator.textContent = strength.message;
      strengthIndicator.className = `form-text ${strength.class}`;
    }
  });
}

function calculatePasswordStrength(password) {
  if (password.length < 8) return { message: 'Too short', class: 'text-danger' };
  
  let strength = 0;
  if (password.match(/[a-z]+/)) strength++;
  if (password.match(/[A-Z]+/)) strength++;
  if (password.match(/[0-9]+/)) strength++;
  if (password.match(/[$@#&!]+/)) strength++;
  
  if (strength < 2) return { message: 'Weak password', class: 'text-warning' };
  if (strength < 3) return { message: 'Good password', class: 'text-info' };
  return { message: 'Strong password', class: 'text-success' };
}

// Empty state component
function createEmptyState(type) {
  const emptyStates = {
    bookings: {
      icon: 'calendar-x',
      title: 'No bookings yet',
      message: 'Start by finding a tutor and booking your first session!',
      action: state.currentUser?.userType === 'Student' ? 
        '<button class="btn btn-primary" onclick="showSearchTutors()">Find a Tutor</button>' : ''
    },
    subjects: {
      icon: 'book',
      title: 'No subjects added',
      message: 'Add subjects you want to teach to start receiving bookings.',
      action: ''
    },
    notifications: {
      icon: 'bell-slash',
      title: 'No notifications',
      message: 'You\'re all caught up!',
      action: ''
    },
    search: {
      icon: 'search',
      title: 'No tutors found',
      message: 'Try adjusting your search filters or browse all tutors.',
      action: '<button class="btn btn-secondary" onclick="clearSearchFilters()">Clear Filters</button>'
    }
  };
  
  const stateConfig = emptyStates[type];
  return `
    <div class="empty-state">
      <i class="bi bi-${stateConfig.icon}"></i>
      <h5>${stateConfig.title}</h5>
      <p>${stateConfig.message}</p>
      ${stateConfig.action}
    </div>
  `;
}

// Toast notification utility
function showToast(title, message, type = 'info') {
  const toastEl = document.getElementById('toast');
  const toastTitle = document.getElementById('toastTitle');
  const toastMessage = document.getElementById('toastMessage');
  
  // Set content
  toastTitle.textContent = title;
  toastMessage.textContent = message;
  
  // Set color based on type
  toastEl.className = `toast toast-${type}`;
  
  // Show toast
  const toast = new bootstrap.Toast(toastEl);
  toast.show();
}

// Time formatting functions
function formatTimeAgo(dateString) {
  const date = new Date(dateString);
  const now = new Date();
  const seconds = Math.floor((now - date) / 1000);
  
  if (seconds < 60) return 'just now';
  const minutes = Math.floor(seconds / 60);
  if (minutes < 60) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
  const hours = Math.floor(minutes / 60);
  if (hours < 24) return `${hours} hour${hours > 1 ? 's' : ''} ago`;
  const days = Math.floor(hours / 24);
  if (days < 7) return `${days} day${days > 1 ? 's' : ''} ago`;
  const weeks = Math.floor(days / 7);
  return `${weeks} week${weeks > 1 ? 's' : ''} ago`;
}

// Rating display function
function displayRating(rating) {
  if (rating === 0) return '<span class="not-rated">Not rated yet</span>';

  const fullStars = Math.floor(rating);
  const hasHalfStar = rating % 1 >= 0.5;
  let stars = "";

  for (let i = 0; i < fullStars; i++) {
    stars += '<i class="bi bi-star-fill"></i>';
  }
  if (hasHalfStar) {
    stars += '<i class="bi bi-star-half"></i>';
  }

  // Add empty stars to complete 5
  const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
  for (let i = 0; i < emptyStars; i++) {
    stars += '<i class="bi bi-star"></i>';
  }

  return `${stars} <span class="rating-number">${rating.toFixed(1)}</span>`;
}

// Session countdown timer
function startSessionCountdown() {
  const updateCountdowns = () => {
    document.querySelectorAll('.session-countdown').forEach(el => {
      const sessionTime = new Date(el.dataset.sessionTime);
      const now = new Date();
      const diff = sessionTime - now;
      
      if (diff > 0) {
        const hours = Math.floor(diff / (1000 * 60 * 60));
        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
        
        if (hours < 24) {
          el.textContent = `Starts in ${hours}h ${minutes}m`;
          el.classList.add('text-warning');
        } else {
          const days = Math.floor(hours / 24);
          el.textContent = `In ${days} day${days > 1 ? 's' : ''}`;
        }
      } else {
        el.textContent = 'Session started';
        el.classList.add('text-danger');
      }
    });
  };
  
  updateCountdowns();
  setInterval(updateCountdowns, 60000); // Update every minute
}

// Keyboard shortcuts
function addKeyboardShortcuts() {
  document.addEventListener('keydown', (e) => {
    if (!state.currentUser) return;
    
    // Ctrl/Cmd + K - Quick search
    if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
      e.preventDefault();
      if (state.currentUser.userType === 'Student') {
        showSearchTutors();
      }
    }
    
    // Escape - Close modals
    if (e.key === 'Escape') {
      const modals = document.querySelectorAll('.modal.show');
      modals.forEach(modal => {
        const modalInstance = bootstrap.Modal.getInstance(modal);
        if (modalInstance) modalInstance.hide();
      });
    }
  });
}

// Auto-save functionality
let autoSaveTimeout;

function addAutoSaveListeners() {
  document.getElementById('editDescription')?.addEventListener('input', function() {
    clearTimeout(autoSaveTimeout);
    const value = this.value;
    
    // Show saving indicator
    const indicator = document.getElementById('autoSaveIndicator');
    if (indicator) {
      indicator.textContent = 'Typing...';
      indicator.className = 'text-muted small';
    }
    
    autoSaveTimeout = setTimeout(() => {
      // Save to localStorage
      localStorage.setItem('draft_description', value);
      if (indicator) {
        indicator.textContent = 'Draft saved';
        indicator.className = 'text-success small';
      }
    }, 1000);
  });
}

// Confirmation dialog
function showConfirmDialog(title, message, confirmText = 'Confirm', type = 'warning') {
  return new Promise((resolve) => {
    const modal = new bootstrap.Modal(document.getElementById('confirmModal'));
    
    document.getElementById('confirmTitle').textContent = title;
    document.getElementById('confirmMessage').textContent = message;
    const confirmBtn = document.getElementById('confirmActionBtn');
    confirmBtn.textContent = confirmText;
    confirmBtn.className = `btn btn-${type}`;
    
    confirmBtn.onclick = () => {
      modal.hide();
      resolve(true);
    };
    
    document.getElementById('confirmCancelBtn').onclick = () => {
      modal.hide();
      resolve(false);
    };
    
    modal.show();
  });
}

// Check if user is already authenticated
function checkAuthState() {
  const savedUser = localStorage.getItem("currentUser");
  if (savedUser) {
    state.currentUser = JSON.parse(savedUser);
    showDashboard();
  } else {
    showAuthView();
  }
}

// View switching functions
function showAuthView() {
  hideAllViews();
  document.getElementById("authView").style.display = "block";
  document.getElementById("mainNav").style.display = "none";
}

function showDashboard() {
  hideAllViews();
  document.getElementById("mainNav").style.display = "block";
  document.getElementById("userNameDisplay").textContent =
    state.currentUser.name;

  // Start notification polling
  startNotificationPolling();

  if (state.currentUser.userType === "Student") {
    document.getElementById(
      "balanceDisplay"
    ).textContent = `Balance: ${state.currentUser.balance}`;
    showStudentDashboard();
  } else {
    document.getElementById(
      "balanceDisplay"
    ).textContent = `Rate: ${state.currentUser.hourlyRate}/hr`;
    showTutorDashboard();
  }
}

function showStudentDashboard() {
  document.getElementById("studentDashboard").style.display = "block";
  loadStudentDashboard();
}

function showTutorDashboard() {
  document.getElementById("tutorDashboard").style.display = "block";
  loadTutorDashboard();
}

function showSearchTutors() {
  hideAllViews();
  document.getElementById("searchTutorsView").style.display = "block";
  loadSubjectsForSearch();
}

function showStudentBookings() {
  state.currentView = "studentBookings";
  showBookingManagement();
}

function showTutorBookings() {
  state.currentView = "tutorBookings";
  showBookingManagement();
}

function showBookingManagement() {
  hideAllViews();
  document.getElementById("bookingManagementView").style.display = "block";
  document.getElementById("bookingViewTitle").textContent =
    state.currentView === "studentBookings" ? "My Bookings" : "My Sessions";
  showBookingTab("upcoming");
}

function showSubjectManagement() {
  hideAllViews();
  document.getElementById("subjectManagementView").style.display = "block";
  loadTutorSubjects();
}

function showAvailabilityManagement() {
  hideAllViews();
  document.getElementById("availabilityManagementView").style.display = "block";
  loadTutorAvailability();
}

function hideAllViews() {
  const views = [
    "authView",
    "studentDashboard",
    "tutorDashboard",
    "searchTutorsView",
    "bookingManagementView",
    "subjectManagementView",
    "availabilityManagementView",
  ];
  views.forEach(
    (view) => (document.getElementById(view).style.display = "none")
  );
}

function backToDashboard() {
  showDashboard();
}

// Auth form switching
function showLoginForm(e) {
  e.preventDefault();
  document.getElementById("loginForm").style.display = "block";
  document.getElementById("signupForm").style.display = "none";
  document.getElementById("loginTab").classList.add("active");
  document.getElementById("signupTab").classList.remove("active");
}

function showSignupForm(e) {
  e.preventDefault();
  document.getElementById("loginForm").style.display = "none";
  document.getElementById("signupForm").style.display = "block";
  document.getElementById("signupTab").classList.add("active");
  document.getElementById("loginTab").classList.remove("active");
}

function toggleTutorFields() {
  const userType = document.getElementById("signupUserType").value;
  document.getElementById("tutorFields").style.display =
    userType === "TUTOR" ? "block" : "none";
}

// Authentication handlers
async function handleLogin(e) {
  e.preventDefault();
  showLoading('Logging in...');
  
  const loginData = {
    email: document.getElementById("loginEmail").value,
    password: document.getElementById("loginPassword").value,
  };

  try {
    const response = await fetch(`${API_BASE_URL}/auth/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(loginData),
    });

    if (response.ok) {
      const userData = await response.json();
      state.currentUser = userData;
      localStorage.setItem("currentUser", JSON.stringify(userData));
      showDashboard();
    } else {
      const error = await response.text();
      document.getElementById("loginError").textContent = error;
      document.getElementById("loginError").style.display = "block";
    }
  } catch (error) {
    console.error("Login error:", error);
    document.getElementById("loginError").textContent = "Connection error";
    document.getElementById("loginError").style.display = "block";
  } finally {
    hideLoading();
  }
}

async function handleSignup(e) {
  e.preventDefault();
  showLoading('Creating account...');
  
  const signupData = {
    userType: document.getElementById("signupUserType").value,
    name: document.getElementById("signupName").value,
    email: document.getElementById("signupEmail").value,
    password: document.getElementById("signupPassword").value,
    timeZoneId: document.getElementById("signupTimeZone").value,
    hourlyRate:
      parseFloat(document.getElementById("signupHourlyRate").value) || 0,
    description: document.getElementById("signupDescription").value || "",
  };

  try {
    const response = await fetch(`${API_BASE_URL}/auth/signup`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(signupData),
    });

    if (response.ok) {
      const userData = await response.json();
      state.currentUser = userData;
      localStorage.setItem("currentUser", JSON.stringify(userData));
      showDashboard();
    } else {
      const error = await response.text();
      document.getElementById("signupError").textContent = error;
      document.getElementById("signupError").style.display = "block";
    }
  } catch (error) {
    console.error("Signup error:", error);
    document.getElementById("signupError").textContent = "Connection error";
    document.getElementById("signupError").style.display = "block";
  } finally {
    hideLoading();
  }
}

function handleLogout() {
  state.currentUser = null;
  localStorage.removeItem("currentUser");
  stopNotificationPolling();
  showAuthView();
}

// Dashboard loading functions
async function loadStudentDashboard() {
  try {
    const response = await fetch(
      `${API_BASE_URL}/dashboard/student/${state.currentUser.id}`
    );
    if (response.ok) {
      const dashboard = await response.json();

      // Update profile
      document.getElementById("studentName").textContent =
        dashboard.profile.name;
      document.getElementById("studentBalance").textContent =
        dashboard.profile.balance.toFixed(2);
      
      // Update profile picture
      if (dashboard.profile.profilePictureUrl) {
        document.getElementById("studentProfilePic").src = dashboard.profile.profilePictureUrl;
      }

      // Update stats
      document.getElementById("totalSessions").textContent =
        dashboard.stats.totalSessions;
      document.getElementById("completedSessions").textContent =
        dashboard.stats.completedSessions;
      document.getElementById("upcomingSessions").textContent =
        dashboard.stats.upcomingSessions;

      // Update upcoming bookings
      renderUpcomingBookings(
        dashboard.upcomingBookings,
        "upcomingBookingsList"
      );
    }
  } catch (error) {
    console.error("Error loading student dashboard:", error);
  }
}

async function loadTutorDashboard() {
  try {
    const response = await fetch(
      `${API_BASE_URL}/dashboard/tutor/${state.currentUser.id}`
    );
    if (response.ok) {
      const dashboard = await response.json();

      // Update profile
      document.getElementById("tutorName").textContent = dashboard.profile.name;
      document.getElementById("tutorRate").textContent =
        dashboard.profile.hourlyRate.toFixed(2);
      
      // Update profile picture
      if (dashboard.profile.profilePictureUrl) {
        document.getElementById("tutorProfilePic").src = dashboard.profile.profilePictureUrl;
      }

      // Update stats
      document.getElementById("tutorTotalSessions").textContent =
        dashboard.stats.totalSessions;
      document.getElementById("tutorCompletedSessions").textContent =
        dashboard.stats.completedSessions;
      document.getElementById("tutorRating").innerHTML = displayRating(
        dashboard.stats.averageRating
      );
      document.getElementById("tutorEarnings").textContent =
        dashboard.stats.totalEarnings.toFixed(2);
      document.getElementById("thisMonthEarnings").textContent =
        dashboard.stats.thisMonthEarnings.toFixed(2);
      document.getElementById("totalReviews").textContent =
        dashboard.stats.totalReviews;

      // Update today's schedule
      renderUpcomingBookings(dashboard.todaysSchedule, "todaysScheduleList");
    }
  } catch (error) {
    console.error("Error loading tutor dashboard:", error);
  }
}

// Search functionality
async function loadSubjectsForSearch() {
  try {
    const response = await fetch(`${API_BASE_URL}/subjects`);
    if (response.ok) {
      const data = await response.json();
      const select = document.getElementById("searchSubject");
      select.innerHTML = '<option value="">All Subjects</option>';

      data.subjects.forEach((category) => {
        category.subjects.forEach((subject) => {
          const option = document.createElement("option");
          option.value = subject.id;
          option.textContent = `${subject.name} (${category.category})`;
          select.appendChild(option);
        });
      });
    }
  } catch (error) {
    console.error("Error loading subjects:", error);
  }
}

async function handleSearch(e) {
  e.preventDefault();
  showLoading("Searching...");

  const searchData = {
    subjectId: document.getElementById("searchSubject").value || null,
    minPrice: parseFloat(document.getElementById("minPrice").value) || 0,
    maxPrice: parseFloat(document.getElementById("maxPrice").value) || 0,
    minRating: parseFloat(document.getElementById("minRating").value) || 0,
    sortBy: document.getElementById("sortBy").value,
    page: 0,
    pageSize: 20,
  };

  try {
    const response = await fetch(`${API_BASE_URL}/search/tutors`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(searchData),
    });

    if (response.ok) {
      const results = await response.json();
      renderSearchResults(results.results);
    }
  } catch (error) {
    console.error("Search error:", error);
  } finally {
    hideLoading();
  }
}

function renderSearchResults(tutors) {
  const container = document.getElementById("searchResults");
  container.innerHTML = "";

  if (tutors.length === 0) {
    container.innerHTML = createEmptyState("search");
    return;
  }

  tutors.forEach((tutor) => {
    const card = document.createElement("div");
    card.className = "card mb-3";
    card.innerHTML = `
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <h5 class="card-title">${tutor.name}</h5>
                        <p class="card-text">${tutor.shortDescription}</p>
                        <p>Rate: $${
                          tutor.hourlyRate
                            }/hr | Rating: ${tutor.rating.toFixed(1)} (${
      tutor.reviewCount
    } reviews)</p>
                        <p>Subjects: ${tutor.subjects
                          .map((s) => s.name)
                          .join(", ")}</p>
                    </div>
                    <div class="col-md-4 text-end">
                        <button class="btn btn-primary book-tutor-btn" 
                                data-tutor-id="${tutor.id}" 
                                data-tutor-name="${tutor.name}" 
                                data-hourly-rate="${
                                  tutor.hourlyRate
                                }">Book Session</button>
                        <button class="btn btn-secondary view-tutor-btn" 
                                data-tutor-id="${
                                  tutor.id
                                }">View Profile</button>
                    </div>
                </div>
            </div>
        `;
    container.appendChild(card);
  });
}

// Clear search filters
function clearSearchFilters() {
  document.getElementById("searchForm").reset();
  handleSearch(new Event("submit"));
}

// Booking management
async function showBookingTab(tab) {
    console.log("showbookingtab called with tab:", tab);
  const userId = state.currentUser.id;
  const endpoint =
    state.currentView === "studentBookings"
      ? `${API_BASE_URL}/bookings/student/${userId}`
      : `${API_BASE_URL}/bookings/tutor/${userId}`;

  console.log("Endpoint:", endpoint);

  try {
    const response = await fetch(endpoint);
    console.log("Response status:", response.status);
    if (response.ok) {
      const data = await response.json();
      console.log("Data received:", data);
      const bookings =
        tab === "upcoming"
          ? data.upcomingBookings
          : tab === "past"
          ? data.pastBookings
          : data.cancelledBookings;

      renderBookings(bookings, tab);

      // Update tab active states
      document
        .querySelectorAll("#bookingManagementView .nav-link")
        .forEach((link) => {
          link.classList.remove("active");
        });
      document.getElementById(`${tab}Tab`).classList.add("active");
    } else {
      const errorText = await response.text();
      console.error("Error response:", response.status, errorText);

      // Try to parse error as JSON
      try {
        const errorJson = JSON.parse(errorText);
        console.error("Error details:", errorJson);
      } catch (e) {
        // Not JSON, just log the text
      }

      // Show empty state or error message
      const container = document.getElementById("bookingsList");
      container.innerHTML = `
                <div class="alert alert-danger">
                    Failed to load bookings. Please try again later.
                </div>
            `;
    }
  } catch (error) {
    console.error("Error loading bookings:", error);
    const container = document.getElementById("bookingsList");
    container.innerHTML = `
            <div class="alert alert-danger">
                Failed to load bookings. Please try again later.
            </div>
        `;
  }
}

function renderBookings(bookings, tab) {
  const container = document.getElementById("bookingsList");
  container.innerHTML = "";

  if (bookings.length === 0) {
    container.innerHTML = createEmptyState("bookings");
    return;
  }

  bookings.forEach((booking) => {
    const card = document.createElement("div");
    card.className = "card mb-3";
    const dateTime = new Date(booking.dateTime).toLocaleString();

    card.innerHTML = `
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <h5 class="card-title">${booking.subject.name}</h5>
                        <p>With: ${
                          state.currentView === "studentBookings"
                            ? booking.tutor.name
                            : booking.student.name
                        }</p>
                        <p>Date: ${dateTime} | Duration: ${
      booking.durationHours
    } hour(s)</p>
                        <p>Total Cost: ${booking.totalCost} | Status: ${
      booking.status
    }</p>
                    </div>
                    <div class="col-md-4 text-end">
                        ${getBookingActions(booking, tab)}
                    </div>
                </div>
            </div>
        `;
    container.appendChild(card);
  });
}

function getBookingActions(booking, tab) {
  if (tab === "upcoming" && booking.status === "PENDING") {
    return `
            <button class="btn btn-success btn-sm confirm-booking-btn" data-booking-id="${booking.id}">Confirm & Pay</button>
            <button class="btn btn-danger btn-sm cancel-booking-btn" data-booking-id="${booking.id}">Cancel</button>
        `;
  } else if (tab === "upcoming" && booking.status === "CONFIRMED") {
    // Add complete button for tutors
    const completeButton =
      state.currentView === "tutorBookings" &&
      new Date(booking.dateTime) < new Date()
        ? `<button class="btn btn-primary btn-sm complete-booking-btn" data-booking-id="${booking.id}">Mark Complete</button>`
        : "";
    return `
      ${completeButton}
      <button class="btn btn-danger btn-sm cancel-booking-btn" data-booking-id="${booking.id}">Cancel</button>
    `;
  } else if (
    tab === "past" &&
    booking.status === "COMPLETED" &&
    state.currentView === "studentBookings"
  ) {
    return `<button class="btn btn-primary btn-sm review-tutor-btn" data-tutor-id="${booking.tutor.id}">Leave Review</button>`;
  }
  return "";
}

function renderUpcomingBookings(bookings, containerId) {
  const container = document.getElementById(containerId);
  container.innerHTML = "";

  if (bookings.length === 0) {
    container.innerHTML = '<p class="text-muted">No upcoming sessions.</p>';
    return;
  }

  bookings.forEach((booking) => {
    const dateTime = new Date(booking.dateTime);
    const div = document.createElement("div");
    div.className = "session-item";
    div.innerHTML = `
      <div class="d-flex justify-content-between align-items-start">
        <div>
          <strong>${booking.subject.name}</strong><br>
          With: ${
            state.currentUser.userType === "Student"
              ? booking.tutor.name
              : booking.student.name
          }<br>
          ${dateTime.toLocaleString()}
        </div>
        <small class="session-countdown" data-session-time="${
          booking.dateTime
        }"></small>
      </div>
    `;
    container.appendChild(div);
  });

  startSessionCountdown();
}

// Subject management
async function loadTutorSubjects() {
  try {
    // Load tutor's current subjects
    const tutorResponse = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}`
    );
    if (tutorResponse.ok) {
      const tutorData = await tutorResponse.json();
      renderMySubjects(tutorData.subjects);
    }

    // Load available subjects
    const availableResponse = await fetch(
      `${API_BASE_URL}/subjects/available/tutor/${state.currentUser.id}`
    );
    if (availableResponse.ok) {
      const availableSubjects = await availableResponse.json();
      renderAvailableSubjects(availableSubjects);
    }
  } catch (error) {
    console.error("Error loading subjects:", error);
  }
}

function renderMySubjects(subjects) {
  const container = document.getElementById("mySubjectsList");
  container.innerHTML = "";

  if (subjects.length === 0) {
    container.innerHTML = createEmptyState("subjects");
    return;
  }

  subjects.forEach((subject) => {
    const div = document.createElement("div");
    div.className = "d-flex justify-content-between align-items-center mb-2";
    div.innerHTML = `
            <span>${subject.name} (${subject.category})</span>
            <button class="btn btn-sm btn-danger remove-subject-btn" data-subject-id="${subject.id}">Remove</button>
        `;
    container.appendChild(div);
  });
}

function renderAvailableSubjects(subjects) {
  const container = document.getElementById("availableSubjectsList");
  container.innerHTML = "";

  if (subjects.length === 0) {
    container.innerHTML =
      '<p class="text-muted">All subjects already added.</p>';
    return;
  }

  subjects.forEach((subject) => {
    const div = document.createElement("div");
    div.className = "d-flex justify-content-between align-items-center mb-2";
    div.innerHTML = `
            <span>${subject.name} (${subject.category})</span>
            <button class="btn btn-sm btn-success add-subject-btn" data-subject-id="${subject.id}">Add</button>
        `;
    container.appendChild(div);
  });
}

async function addSubject(subjectId) {
  try {
    const response = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}/subjects`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ subjectId }),
      }
    );

    if (response.ok) {
      loadTutorSubjects();
      showToast("Success", "Subject added successfully", "success");
    }
  } catch (error) {
    console.error("Error adding subject:", error);
    showToast("Error", "Failed to add subject", "danger");
  }
}

async function removeSubject(subjectId) {
  try {
    const response = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}/subjects/${subjectId}`,
      {
        method: "DELETE",
      }
    );

    if (response.ok) {
      loadTutorSubjects();
      showToast("Success", "Subject removed successfully", "success");
    }
  } catch (error) {
    console.error("Error removing subject:", error);
    showToast("Error", "Failed to remove subject", "danger");
  }
}

// Availability management
async function loadTutorAvailability() {
  try {
    const response = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}/availability`
    );
    if (response.ok) {
      const availability = await response.json();
      renderAvailability(availability.regularSchedule);
    }
  } catch (error) {
    console.error("Error loading availability:", error);
  }
}

function renderAvailability(slots) {
  const container = document.getElementById("availabilityList");
  container.innerHTML = "";

  if (slots.length === 0) {
    container.innerHTML = '<p class="text-muted">No availability set.</p>';
    return;
  }

  const dayOrder = [
    "MONDAY",
    "TUESDAY",
    "WEDNESDAY",
    "THURSDAY",
    "FRIDAY",
    "SATURDAY",
    "SUNDAY",
  ];
  slots.sort(
    (a, b) => dayOrder.indexOf(a.dayOfWeek) - dayOrder.indexOf(b.dayOfWeek)
  );

  slots.forEach((slot) => {
    const div = document.createElement("div");
    div.className = "d-flex justify-content-between align-items-center mb-2";
    div.innerHTML = `
            <span>${slot.dayOfWeek}: ${slot.startTime} - ${slot.endTime}</span>
            <button class="btn btn-sm btn-danger remove-availability-btn" 
                    data-day-of-week="${slot.dayOfWeek}" 
                    data-start-time="${slot.startTime}" 
                    data-end-time="${slot.endTime}">Remove</button>
        `;
    container.appendChild(div);
  });
}

async function handleAddAvailability(e) {
  e.preventDefault();

  const data = {
    action: "ADD",
    dayOfWeek: document.getElementById("dayOfWeek").value,
    startTime: document.getElementById("startTime").value,
    endTime: document.getElementById("endTime").value,
  };

  try {
    const response = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}/availability`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      }
    );

    if (response.ok) {
      document.getElementById("availabilityForm").reset();
      loadTutorAvailability();
      showToast("Success", "Availability added successfully", "success");
    }
  } catch (error) {
    console.error("Error adding availability:", error);
    showToast("Error", "Failed to add availability", "danger");
  }
}

async function removeAvailability(dayOfWeek, startTime, endTime) {
  const data = {
    action: "REMOVE",
    dayOfWeek,
    startTime,
    endTime,
  };

  try {
    const response = await fetch(
      `${API_BASE_URL}/tutors/${state.currentUser.id}/availability`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      }
    );

    if (response.ok) {
      loadTutorAvailability();
      showToast("Success", "Availability removed successfully", "success");
    }
  } catch (error) {
    console.error("Error removing availability:", error);
    showToast("Error", "Failed to remove availability", "danger");
  }
}

// Profile management
function showEditProfileModal() {
  if (state.currentUser.userType === "Student") {
    document.getElementById("tutorEditFields").style.display = "none";
  } else {
    document.getElementById("tutorEditFields").style.display = "block";

    // Restore draft for tutors
    const savedDescription = localStorage.getItem("draft_description");
    if (savedDescription) {
      document.getElementById("editDescription").value = savedDescription;
    }
  }
  profileEditModal.show();
}

async function handleUpdateProfile() {
  const updateData = {
    name: document.getElementById("editName").value || null,
    email: document.getElementById("editEmail").value || null,
    currentPassword:
      document.getElementById("editCurrentPassword").value || null,
    password: document.getElementById("editNewPassword").value || null,
    timeZoneId: document.getElementById("editTimeZone").value || null,
  };

  if (state.currentUser.userType === "Tutor") {
    updateData.hourlyRate =
      parseFloat(document.getElementById("editHourlyRate").value) || null;
    updateData.description =
      document.getElementById("editDescription").value || null;
  }

  const endpoint =
    state.currentUser.userType === "Student"
      ? `${API_BASE_URL}/students/${state.currentUser.id}`
      : `${API_BASE_URL}/tutors/${state.currentUser.id}`;

  try {
    const response = await fetch(endpoint, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(updateData),
    });

    if (response.ok) {
      const updatedProfile = await response.json();

      // Handle profile picture upload if file selected
      const fileInput = document.getElementById("profilePictureUpload");
      if (fileInput.files.length > 0) {
        await uploadProfilePicture(fileInput.files[0]);
      }

      // Update current user data
      Object.assign(state.currentUser, updatedProfile);
      localStorage.setItem("currentUser", JSON.stringify(state.currentUser));
      profileEditModal.hide();
      showDashboard();
      showToast("Success", "Profile updated successfully", "success");
    }
  } catch (error) {
    console.error("Error updating profile:", error);
    showToast("Error", "Failed to update profile", "danger");
  }
}

// Profile picture upload
async function uploadProfilePicture(file) {
  const formData = new FormData();
  formData.append("file", file);
  formData.append("type", "profile");

  const endpoint =
    state.currentUser.userType === "Student"
      ? `${API_BASE_URL}/students/${state.currentUser.id}/profile-picture`
      : `${API_BASE_URL}/tutors/${state.currentUser.id}/profile-picture`;

  try {
    const response = await fetch(endpoint, {
      method: "POST",
      body: formData,
    });

    if (response.ok) {
      const result = await response.json();
      state.currentUser.profilePictureUrl = result.profilePictureUrl;
    }
  } catch (error) {
    console.error("Error uploading profile picture:", error);
  }
}

// Funds management
function showAddFundsModal() {
  addFundsModal.show();
}

async function handleAddFunds() {
  const amount = parseFloat(document.getElementById("fundAmount").value);

  try {
    const response = await fetch(
      `${API_BASE_URL}/students/${state.currentUser.id}/add-funds`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ amount }),
      }
    );

    if (response.ok) {
      const result = await response.json();
      state.currentUser.balance = result.value;
      localStorage.setItem("currentUser", JSON.stringify(state.currentUser));
      addFundsModal.hide();
      document.getElementById("addFundsForm").reset();
      loadStudentDashboard();
      showToast(
        "Success",
        `$${amount.toFixed(2)} added to your balance`,
        "success"
      );
    }
  } catch (error) {
    console.error("Error adding funds:", error);
    showToast("Error", "Failed to add funds", "danger");
  }
}

// Booking functions
async function bookTutor(tutorId, tutorName, hourlyRate) {
  document.getElementById("bookingTutorName").textContent = tutorName;
  document.getElementById("bookingTutorId").value = tutorId;

  // Set minimum date to today
  const today = new Date().toISOString().split("T")[0];
  document.getElementById("bookingDate").setAttribute("min", today);

  // Load tutor's subjects
  try {
    const response = await fetch(`${API_BASE_URL}/tutors/${tutorId}`);
    if (response.ok) {
      const tutorData = await response.json();
      const select = document.getElementById("bookingSubject");
      select.innerHTML = '<option value="">Select subject...</option>';

      tutorData.subjects.forEach((subject) => {
        const option = document.createElement("option");
        option.value = subject.id;
        option.textContent = subject.name;
        select.appendChild(option);
      });

      // Store hourly rate for cost calculation
      select.dataset.hourlyRate = hourlyRate;
      updateBookingCost();
    }
  } catch (error) {
    console.error("Error loading tutor subjects:", error);
  }

  createBookingModal.show();
}

function updateBookingCost() {
  const duration =
    parseInt(document.getElementById("bookingDuration").value) || 1;
  const hourlyRate =
    parseFloat(document.getElementById("bookingSubject").dataset.hourlyRate) ||
    0;
  const totalCost = duration * hourlyRate;
  document.getElementById("bookingTotalCost").textContent =
    totalCost.toFixed(2);
}

async function handleCreateBooking() {
  const bookingData = {
    studentId: state.currentUser.id,
    tutorId: document.getElementById("bookingTutorId").value,
    subjectId: document.getElementById("bookingSubject").value,
    dateTime: `${document.getElementById("bookingDate").value}T${
      document.getElementById("bookingTime").value
    }:00`,
    durationHours: parseInt(document.getElementById("bookingDuration").value),
  };

  try {
    const response = await fetch(`${API_BASE_URL}/bookings`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(bookingData),
    });

    if (response.ok) {
      createBookingModal.hide();
      document.getElementById("createBookingForm").reset();
      showToast(
        "Success",
        "Booking created! Please confirm and pay to secure your session.",
        "success"
      );
      showStudentBookings();
    } else {
      const error = await response.text();
      const errorDiv = document.querySelector(
        "#createBookingModal .modal-error"
      );
      if (errorDiv) {
        errorDiv.textContent = `Error: ${error}`;
        errorDiv.style.display = "block";
      }
    }
  } catch (error) {
    console.error("Error creating booking:", error);
    showToast("Error", "Failed to create booking", "danger");
  }
}

async function confirmBooking(bookingId) {
  try {
    const response = await fetch(
      `${API_BASE_URL}/bookings/${bookingId}/confirm`,
      {
        method: "POST",
      }
    );

    if (response.ok) {
      showToast(
        "Success",
        "Booking confirmed and payment processed!",
        "success"
      );
      showBookingTab("upcoming");
      loadStudentDashboard();
    } else {
      const error = await response.text();
      showToast("Error", `Failed to confirm booking: ${error}`, "danger");
    }
  } catch (error) {
    console.error("Error confirming booking:", error);
    showToast("Error", "Connection error. Please try again.", "danger");
  }
}

async function cancelBooking(bookingId) {
  const confirmed = await showConfirmDialog(
    "Cancel Booking",
    "Are you sure you want to cancel this booking? If you've already paid, you will receive a full refund.",
    "Yes, Cancel",
    "danger"
  );

  if (!confirmed) return;

  try {
    const response = await fetch(
      `${API_BASE_URL}/bookings/${bookingId}/cancel`,
      {
        method: "POST",
      }
    );

    if (response.ok) {
      showToast("Success", "Booking cancelled successfully!", "success");
      showBookingTab("upcoming");
    } else {
      const error = await response.text();
      showToast("Error", `Failed to cancel booking: ${error}`, "danger");
    }
  } catch (error) {
    console.error("Error cancelling booking:", error);
    showToast("Error", "Connection error. Please try again.", "danger");
  }
}

async function completeBooking(bookingId) {
  const confirmed = await showConfirmDialog(
    "Complete Session",
    "Mark this session as completed? This will release payment to you.",
    "Mark Complete",
    "success"
  );

  if (!confirmed) return;

  try {
    const response = await fetch(
      `${API_BASE_URL}/bookings/${bookingId}/complete`,
      {
        method: "POST",
      }
    );

    if (response.ok) {
      showToast("Success", "Session marked as completed!", "success");
      showBookingTab("upcoming");
      loadTutorDashboard(); // Refresh to update earnings
    } else {
      const error = await response.text();
      showToast("Error", `Failed to complete booking: ${error}`, "danger");
    }
  } catch (error) {
    console.error("Error completing booking:", error);
    showToast("Error", "Connection error. Please try again.", "danger");
  }
}

// Review functions
function showReviewModal(tutorId) {
  document.getElementById("reviewTutorId").value = tutorId;
  reviewModal.show();
}

async function handleSubmitReview() {
  const reviewData = {
    studentId: state.currentUser.id,
    tutorId: document.getElementById("reviewTutorId").value,
    rating: parseInt(document.getElementById("reviewRating").value),
    comment: document.getElementById("reviewComment").value,
  };

  try {
    const response = await fetch(`${API_BASE_URL}/reviews`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(reviewData),
    });

    if (response.ok) {
      reviewModal.hide();
      document.getElementById("reviewForm").reset();
      showToast("Success", "Review submitted successfully!", "success");
    } else {
      const error = await response.text();
      showToast("Error", `Failed to submit review: ${error}`, "danger");
    }
  } catch (error) {
    console.error("Error submitting review:", error);
    showToast("Error", "Connection error. Please try again.", "danger");
  }
}

// Tutor details
async function viewTutorDetails(tutorId) {
  try {
    const response = await fetch(`${API_BASE_URL}/tutors/${tutorId}`);
    if (response.ok) {
      const tutor = await response.json();

      const content = document.getElementById("tutorDetailsContent");
      content.innerHTML = `
                <h4>${tutor.name}</h4>
                <p><strong>Rate:</strong> ${tutor.hourlyRate}/hr</p>
                <p><strong>Rating:</strong> ${tutor.rating.toFixed(1)}⭐ (${
        tutor.totalReviews
      } reviews)</p>
                <p><strong>Description:</strong> ${tutor.description}</p>
                <p><strong>Subjects:</strong> ${tutor.subjects
                  .map((s) => s.name)
                  .join(", ")}</p>
                <p><strong>Completed Sessions:</strong> ${
                  tutor.completedSessions
                }</p>
                <p><strong>Member Since:</strong> ${new Date(
                  tutor.joinedDate
                ).toLocaleDateString()}</p>
                <hr>
                <h5>Reviews</h5>
                <div id="tutorReviews"></div>
            `;

      // Load and display reviews
      loadTutorReviews(tutorId);
      tutorDetailsModal.show();
    }
  } catch (error) {
    console.error("Error loading tutor details:", error);
  }
}

async function loadTutorReviews(tutorId) {
  try {
    const response = await fetch(`${API_BASE_URL}/reviews/tutor/${tutorId}`);
    if (response.ok) {
      const reviews = await response.json();
      const container = document.getElementById("tutorReviews");

      if (reviews.length === 0) {
        container.innerHTML = '<p class="text-muted">No reviews yet.</p>';
        return;
      }

      container.innerHTML = reviews
        .map(
          (review) => `
                <div class="border-bottom pb-2 mb-2">
                    <strong>${review.studentInfo.name}</strong> - ${
            review.rating
          }⭐
                    <p class="mb-0">${review.comment}</p>
                    <small class="text-muted">${new Date(
                      review.createdAt
                    ).toLocaleDateString()}</small>
                </div>
            `
        )
        .join("");
    }
  } catch (error) {
    console.error("Error loading reviews:", error);
  }
}



